{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Northstar","text":"<p>Here you can find all the documentation for the Titanfall2 mod Northstar</p> <ul> <li>For using Northstar, check our wiki</li> <li>For modding with Northstar, check the modding docs</li> </ul>"},{"location":"Modding/","title":"Welcome to the Northstar Modding Documentation!","text":"<p>Note</p> <p>This project is under active development. Please PR everything you can!</p> <p>Check Contributing to ModdingDocs section for getting started.</p>"},{"location":"Modding/#contents","title":"Contents","text":"<p>These docs contain info on squirrel usage and northstar/respawn functions. Its very much WIP.</p> <p>If you know anything about any function, object or concept please dont hesitate to contribute it, even if its just a quick and dirty PR.</p>"},{"location":"Modding/#cheatsheet","title":"Cheatsheet","text":"<ul> <li>NoSkill modding guide (highly recommended to check out)</li> <li>Tools for modding</li> <li>All the Squirrel Constants</li> <li>Modding Documentation</li> <li>Squirrel Highlighting for Notepad++ and VSCode</li> <li>List of Console Commands</li> <li>Useful Squirrel</li> <li>List of squirrel funcs available to dedicated server with their signatures</li> <li>Native registered script functions,   they are from Season 3 Apex but most also exist on Titanfall 2, especially the Titan   functions. Also includes description for each function if the developers have given it   one</li> </ul>"},{"location":"Modding/guides/contributing/","title":"Contributing to ModdingDocs","text":"<p>How can I contribute?</p> <p>All contributions to ModdingDocs are welcome. </p> <p>Including:</p> <ul> <li>GitHub Issues containing any knowledge you want to share</li> <li>Pull Requests with changes to the docs, even small ones</li> </ul> <p>What do I need to know to contribute?</p> <p>The Northstar modding documentation uses Markdown.</p> <p>The <code>.md</code> files can be found in the <code>docs/source</code> directory.</p>"},{"location":"Modding/guides/contributing/#contributing-without-a-local-build","title":"Contributing without a local build","text":"<p>You don't necessarily need to set up a local build environment.</p> <p>To contribute without doing so, you can just edit the files in an editor of your choice and create a GitHub pull request from them.</p>"},{"location":"Modding/guides/contributing/#building-locally","title":"Building locally","text":"<p>You need to have a relatively recent version of Python installed - 3.8 or higher. Download here</p> WindowsLinux <pre><code>git clone https://github.com/R2Northstar/ModdingDocs/\ncd ModdingDocs\n./run.ps1\n</code></pre> <pre><code>git clone https://github.com/R2Northstar/ModdingDocs/\ncd ModdingDocs\n./run.sh\n</code></pre> <p>Warning</p> <p>On Windows, if you are not able to run the script by running <code>./run.ps1</code>, try running it with: <code>powershell.exe -ExecutionPolicy Bypass -File .\\run.ps1</code></p> <p>After this you should be able to run with just <code>./run.ps1</code>.</p>"},{"location":"Modding/guides/gettingstarted/","title":"Getting Started","text":"<p>Northstar supports the creation of many user mods. This guide will teach you the basics of modding to get you started.</p> <p>Check out the <code>usage</code> section for further information, including <code>installation</code>.</p>"},{"location":"Modding/guides/gettingstarted/#basics","title":"Basics","text":"<p>This guide assumes you have basic understanding with programming and know how to use developer environments. Listed below are tools useful for exporting file formats.</p> <p>If you'd like a more lengthy set of tutorials covering many topics. Look at: NoSkill modding guide</p>"},{"location":"Modding/guides/gettingstarted/#tools","title":"Tools","text":"<p>To get started with modding for Northstar, we recommend getting yourself some tools. Check out the <code>tools</code> section for more information.</p>"},{"location":"Modding/guides/gettingstarted/#quick-start","title":"Quick Start","text":"<p>In order to get started with making your mod, create a folder in <code>R2Northstar/mods</code>. While it isn't required, it is best practise by mod authors to follow the naming scheme <code>Author.ModName</code>, such as <code>Northstar.Client</code>.</p> <p>After making this folder, inside it add a folder named <code>mod</code> and a file named <code>mod.json</code>.</p> <p>Provided is a template <code>mod.json</code>, for a detailed list of values read the <code>cheatsheet</code></p> <pre><code>    {\n       \"Name\": \"Yourname.Modname\",\n       \"Description\": \"Woo yeah wooo!\",\n\n       \"LoadPriority\": 0,\n       \"ConVars\": [],\n       \"Scripts\": [],\n       \"Localisation\": []\n    }\n</code></pre> <p>Inside the <code>mod</code> folder, existing files found in the engine's virtual file system will be overwritten and new files can be added. If you need to define new Squirrel files <code>(.nut/.gnut)</code> they must be declared in the <code>\"Scripts\"</code> array in <code>mod.json</code>. An example for this might be:</p> <pre><code>    \"Scripts\": [\n       {\n          \"Path\": \"path/to/file.nut\",\n          \"RunOn\": \"( CLIENT || SERVER ) &amp;&amp; MP\"\n       },\n       {\n          \"Path\": \"path/to/another_file.nut\",\n          \"RunOn\": \"( CLIENT || SERVER ) &amp;&amp; MP\",\n          \"ClientCallback\": {\n             \"Before\": \"ClientPreMapspawnThing\",\n             \"After\": \"AfterMapspawnClientThing\"\n          },\n          \"ServerCallback\": {\n             \"Before\": \"ServerPreMapspawncrap\",\n             \"After\": \"ServerAfterMapspawnWoo\"\n          }\n       }\n    ]\n</code></pre> <p><code>\"Path\"</code> indicates where the script is, <code>\"RunOn\"</code> is the Squirrel VM context (see <code>../native/sqvm</code>) as an expression, and <code>\"ClientCallback\"</code> and <code>\"ServerCallback\"</code> specify a function call that can be <code>\"Before\"</code> and/or <code>\"After\"</code> map-spawn.</p>"},{"location":"Modding/guides/gettingstarted/#detailed-modjson-architecture","title":"Detailed <code>mod.json</code> architecture","text":"<p>Located at your mod's root folder, the <code>mod.json</code> file is the entrypoint of your mod; it contains human-readable information about it, which scripts to load, and a bunch of interesting stuff.</p> <p>This guide will dig into each of the possible <code>mod.json</code> fields. Please note that <code>mod.json</code> keys must start with an uppercase letter.</p> <p>This is what a well-formatted <code>mod.json</code> looks like:</p> <pre><code>    {\n        \"Name\": \"Northstar.CustomServers\",\n        \"Description\": \"Attempts to recreate the behaviour of vanilla Titanfall 2 servers, as well as changing some scripts to allow better support for mods\",\n        \"Version\": \"1.5.0\",\n        \"LoadPriority\": 0,\n        \"ConVars\": [\n            {\n                \"Name\": \"ns_private_match_last_mode\",\n                \"DefaultValue\": \"tdm\"\n            },\n            {\n                \"Name\": \"ns_private_match_last_map\",\n                \"DefaultValue\": \"mp_forwardbase_kodai\"\n            }\n        ],\n        \"Scripts\": [\n            {\n                \"Path\": \"sh_northstar_utils.gnut\",\n                \"RunOn\": \"CLIENT || SERVER || UI\"\n            },\n            {\n                \"Path\": \"mp/_classic_mp_dropship_intro.gnut\",\n                \"RunOn\": \"SERVER &amp;&amp; MP\"\n            }\n        ],\n        \"Localisation\": [\n            \"resource/northstar_custom_%language%.txt\"\n        ]\n    }\n</code></pre> <p>Note</p> <p>The real <code>Northstar.CustomServers</code> mod contains more convars and scripts, some have been removed for the readability of the example.</p>"},{"location":"Modding/guides/gettingstarted/#name-and-description","title":"Name and description","text":"<p>Those ones are pretty self-explanatory. Both fields are used by Northstar itself to display in-game information about your mod in the main screen <code>Mods</code> menu.</p> <p>Best pratice for your mod's name is to use the <code>Author.ModName</code> convention.</p>"},{"location":"Modding/guides/gettingstarted/#version","title":"Version","text":"<p>This field specifies version of your mod using <code>X.Y.Z</code> scheme; this field must be updated each time you release a new version of your mod.</p> <p>Common use is to increase Z when you publish a fix (e.g. <code>1.5.0</code> to <code>1.5.1</code>), and increase Y when you release new features (e.g. <code>1.5.1</code> to <code>1.6.0</code>).</p> <p>Best practise is to follow semantic versioning (https://semver.org/).</p>"},{"location":"Modding/guides/gettingstarted/#loadpriority","title":"LoadPriority","text":"<p>This field defines the order in which all mods will be loaded by Northstar. For example, a mod with <code>\"LoadPriority\": 1</code> will be loaded after a mod with <code>\"LoadPriority\": 0</code>.</p> <p>If your mod uses code from another mod, make sure to set a greater LoadPriority than the mod you're using code from.</p>"},{"location":"Modding/guides/gettingstarted/#convars","title":"ConVars","text":"<p>This field lists configuration variables, that can be set by servers owners to modify behaviour of your mod.</p> <p>Each configuration variable must have a <code>\"Name\"</code> and a <code>\"DefaultValue\"</code>. ConVars can also have an optional <code>\"Flags\"</code> field which specifies special behaviour and an optional <code>\"HelpString\"</code> field which specifies the usage of the ConVar which can be view in-game by running <code>help &lt;convar&gt;</code>.</p> <p>You can access configuration variables from squirrel code using <code>GetConVarInt</code>, <code>GetConVarFloat</code>, <code>GetConVarBool</code> or <code>GetConVarString</code> calls.</p> <p>Warning</p> <p>No matter the type of your variables, they have to be JSON strings, otherwise game won't start!</p>"},{"location":"Modding/guides/gettingstarted/#example","title":"Example","text":"<p>If I don't want to wait 15 seconds for matches to start on my server, <code>Northstar.CustomServers</code> mod exposes a ConVar named <code>ns_private_match_countdown_length</code> in its <code>mod.json</code> manifesto:</p> <pre><code>    \"ConVars\": [\n        {\n            \"Name\": \"ns_private_match_countdown_length\",\n            \"DefaultValue\": \"15\"\n        },\n\n        ...\n    ]\n</code></pre> <p>I can setup the <code>ns_private_match_countdown_length</code> variable in my <code>R2Northstar/mods/Northstar.CustomServers/mod/cfg/autoexec_ns_server.cfg</code> configuration file.</p> <p>When starting a match, <code>Northstar.CustomServers</code> mod will retrieve the configuration variable value, or its default value if it hasn't been specified in configuration file:</p> <pre><code>    // start countdown\n    SetUIVar( level, \"gameStartTime\", Time() + GetConVarFloat( \"ns_private_match_countdown_length\" ) )\n</code></pre> <p>Note</p> <p>All <code>Northstar.CustomServers</code> ConVars are listed here: https://r2northstar.gitbook.io/r2northstar-wiki/hosting-a-server-with-northstar/basic-listen-server</p>"},{"location":"Modding/guides/gettingstarted/#flags","title":"Flags","text":"<p>You can assign flags to configuration variables; to use several flags at once, just add their values.</p> Name Value Description FCVAR_UNREGISTERED 1 If this is set, don't add to linked list, etc. FCVAR_DEVELOPMENTONLY 2 Hidden in released products. Flag is removed automatically if ALLOW_DEVELOPMENT_CVARS is defined. FCVAR_GAMEDLL 4 Defined by the game DLL FCVAR_CLIENTDLL 8 Defined by the client DLL FCVAR_HIDDEN 16 Hidden. Doesn't appear in find or auto complete. Not deterred by ALLOW_DEVELOPMENT_CVARS. FCVAR_PROTECTED 32 It's a server cvar, but we don't send the data since it's a password, etc. Sends 1 if it's not bland/zero, 0 otherwise as value. FCVAR_SPONLY 64 This cvar cannot be changed by clients connected to a multiplayer server. FCVAR_ARCHIVE 128 Save this ConVar's value to vars.rc - this works both server and client-side. FCVAR_NOTIFY 256 Notifies players when this ConVar's value was changed. FCVAR_USERINFO 512 Changes the client's info string FCVAR_PRINTABLEONLY 1024 This cvar's string cannot contain unprintable characters ( e.g., used for player name etc ). FCVAR_UNLOGGED 2048 If this is a FCVAR_SERVER, don't log changes to the log file / console if we are creating a log FCVAR_NEVER_AS_STRING 4096 never try to print that cvar FCVAR_REPLICATED (AKA FCVAR_SERVER) 8192 This value is set by server and replicated by clients. FCVAR_CHEAT 16384 Do NOT allow changing of this convar by console, unless sv_cheats is 1. FCVAR_SS 32768 causes varnameN where N == 2 through max splitscreen slots for mod to be autogenerated FCVAR_DEMO 65536 Record this cvar in a demo. FCVAR_DONTRECORD 131072 Don't record this. FCVAR_SS_ADDED 262144 This is one of the \"added\" FCVAR_SS variables for the splitscreen players FCVAR_RELEASE 524288 This value is available to the end user. FCVAR_RELOAD_MATERIALS 1048576 If this cvar changes, it forces a material reload FCVAR_RELOAD_TEXTURES 2097152 If this cvar changes, it forces a texture reload FCVAR_NOT_CONNECTED 4194304 cvar cannot be changed by a client that is connected to a server FCVAR_MATERIAL_SYSTEM_THREAD 8388608 Indicates this cvar is read from the material system thread FCVAR_ARCHIVE_PLAYERPROFILE 16777216 Save this, but to profile.cfg instead - meaning this only works for clients. FCVAR_ACCESSIBLE_FROM_THREADS 33554432 used as a debugging tool necessary to check material system thread convars FCVAR_SERVER_CAN_EXECUTE 268435456 the server is allowed to execute this command on clients via ClientCommand/NET_StringCmd/CBaseClientState::ProcessStringCmd FCVAR_SERVER_CANNOT_QUERY 536870912 If this is set, then the server is not allowed to query this cvar's value (via IServerPluginHelpers::StartQueryCvarValue). FCVAR_CLIENTCMD_CAN_EXECUTE 1073741824 IVEngineClient::ClientCmd is allowed to execute this command. Note: IVEngineClient::ClientCmd_Unrestricted can run any client command. <p>Note</p> <p>Some flags have been skipped due to them being generally useless unless you have very specific requirements.</p>"},{"location":"Modding/guides/gettingstarted/#scripts","title":"Scripts","text":"<p>The scripts field lets you declare an array of Squirrel files to import into your mod.</p> <p>Each script entry must have a \"Path\" value and a \"RunOn\" value.</p> <pre><code>     \"Scripts\": [\n         {\n             \"Path\": \"path/to/file.nut\",\n             \"RunOn\": \"( CLIENT || SERVER ) &amp;&amp; MP\"\n         },\n         {\n             \"Path\": \"path/to/another_file.nut\",\n             \"RunOn\": \"( CLIENT || SERVER ) &amp;&amp; MP\",\n             \"ClientCallback\": {\n                 \"Before\": \"ClientPreMapspawnThing\",\n                 \"After\": \"AfterMapspawnClientThing\"\n             },\n             \"ServerCallback\": {\n                 \"Before\": \"ServerPreMapspawncrap\",\n                 \"After\": \"ServerAfterMapspawnWoo\"\n             }\n         }\n    ]\n</code></pre>"},{"location":"Modding/guides/gettingstarted/#path","title":"Path","text":"<p>Path of the Squirrel file to import, without <code>mod/scripts/vscripts</code> prefix (that's where your script files should go).</p>"},{"location":"Modding/guides/gettingstarted/#runon","title":"RunOn","text":"<p>A boolean expression which tells the game when and in which context to compile the script.</p> Name Description SERVER Server script VM, recompiles on map change CLIENT Client script VM, recompiles on map change UI UI script VM, recompiles on when <code>uiscript_reset</code> is ran SP Singleplayer MP Multiplayer DEV Value of developer convar LOBBY True in mp_lobby. (Server and client VMs only) MAP_mp_box True if the given map name is being loaded GAMEMODE_at True if the given game mode is being loaded <p><code>CLIENT &amp;&amp; !LOBBY</code> - Compiles on client and not in the lobby. So during actual singeplayer and multiplayer gameplay.</p> <p><code>CLIENT &amp;&amp; MP &amp;&amp; !LOBBY</code> - Compiles on client, only in multiplayer and not in the lobby.</p> <p><code>( CLIENT || SERVER ) &amp;&amp; MP</code> - Compiles on both client and server only in multiplayer.</p> <p><code>CLIENT &amp;&amp; SP &amp;&amp; MAP_sp_boomtown</code> - Compiles only on client in singleplayer only when the map <code>sp_boomtown</code> is loaded. ( Here <code>SP</code> isn't needed as <code>sp_boomtown</code> is singleplayer only )</p> <p><code>CLIENT &amp;&amp; GAMEMODE_aitdm</code> - Compiles on client on both singleplayer and multiplayer only when the <code>aitdm</code> gamemode is set. ( <code>aitdm</code> is attrition which is multiplayer only so this script only compiles on multiplayer )</p>"},{"location":"Modding/guides/gettingstarted/#clientcallback-servercallback","title":"ClientCallback / ServerCallback","text":"<p>Specify methods that will be called before/after map spawn.</p>"},{"location":"Modding/guides/gettingstarted/#localisation","title":"Localisation","text":"<p>This field is an array listing localisation files relative paths.</p> <p>For more info about localisation works on Northstar, read the <code>localisation</code> section.</p> <p>Note</p> <p>This project is under active development.</p>"},{"location":"Modding/guides/publishing/","title":"Publishing your mod","text":""},{"location":"Modding/guides/publishing/#best-practices","title":"Best practices","text":"<p>Make sure to name your mod in the form <code>&lt;your name&gt;.&lt;mod name&gt;</code>, similar to the existing default mods, like <code>Northstar.Client</code>, <code>Northstar.CusomServer</code>, Note that the Northstar name (<code>Northstar.Xyz</code>) is reserved for mods that come with the Northstar install and should therefore not be used.</p> <p>It is recommended to upload the source code of your mod to a public repository like Github to give your users a place to suggest changes and leave feedback in an organised manner.</p> <p>If the changes your mod makes can be represented in screenshots, gameplay recordings, or GIFs, consider adding those to your README. This way anyone coming across your mod can tell which aspects of the game it changes even before installing it.</p> <p>To do so, simply upload the image or gif to a host of your choice (Imgur, GitHub, and even Discord all work). To display the image directly on your page in Thunderstore, add the following line to your README:</p> <pre><code>    ![alt text, this text shows up when image cannot be loaded](https://example.com/image/to/link/to.gif)\n</code></pre>"},{"location":"Modding/guides/publishing/#thunderstore","title":"Thunderstore","text":"<p>The best place to publish your mod is Thunderstore. To do so, you need to package your mod as a zip with a specific folder structure. You can either set the structure up manually or use this GitHub template</p>"},{"location":"Modding/guides/publishing/#package-structure","title":"Package structure","text":"<p>The Thunderstore package zip structure is as follows:</p> <pre><code>    mods/&lt;your name&gt;.&lt;mod name&gt;/\n    icon.png\n    manifest.json\n    README.md\n</code></pre> <ul> <li><code>icon.png</code>: 256x256px icon for your mod.</li> <li><code>README.md</code>: the description page for your mod</li> <li><code>manifest.json</code> outlined here</li> </ul> <p>You can put multiple mods in the <code>mods/</code> folder, but only do this if neccessary.</p> <p><code>manifest.json</code> checker: https://northstar.thunderstore.io/tools/manifest-v1-validator/</p>"},{"location":"Modding/guides/publishing/#uploading","title":"Uploading","text":"<p>After you have set up the folder structure, head to https://northstar.thunderstore.io and log in with either Discord or Github. Then you can use the <code>Upload</code> button at the top of the page to upload your zip.</p> <p>When uploading, it will verify your package structure and you can publish after it's successfully checked.</p> <p>To update a mod, change the version in <code>mod.json</code> and <code>manifest.json</code>, and upload again. If the mod name is the same, it will update the previous version.</p>"},{"location":"Modding/guides/publishing/#github-workflows","title":"Github Workflows","text":"<p>If you want to create a Github repository for your mod, you can use a template that automatically packages and uploads your mod to Thunderstore when you create a Github release of your mod.</p> <p>Github only supports files smaller than 100mb without using git-lfs. Using git-lfs isn't recommended. Instead you should use scripts that split your assets like in this template</p>"},{"location":"Modding/guides/keyvalue/","title":"Weapon and key value modding","text":""},{"location":"Modding/guides/keyvalue/#weapon-modding","title":"Weapon Modding","text":"<p>Do keep in mind that these are usually changed server-side.</p> <p>To actually change the keyvalues of weapons you'd have to name them appropriately inside a mod folder For example: <code>R2Northstar\\mods\\Northstar.Custom\\keyvalues\\scripts\\weapons</code> You can find all the weapon keyvalues here</p> <p>Example for modding crossshairs using keyvalues: crosshairmodding</p> <ul> <li> <p>Mod Examples:</p> </li> <li> <p>Northstar.Custom</p> </li> <li>Unholy Trinity</li> <li>Kraber9K</li> </ul> <p>Note</p> <p>This project is under active development, and this section needs expanding</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/","title":"Crosshair Modding","text":"<p>Example Mod:  Custom.Crosshairs</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#how-to-modify-crosshairs","title":"How To Modify Crosshairs:","text":"<p>1: Create the following file <code>~/Your.Mod/keyvalues/scripts/weapons/mp_weapon_[desired weapon].txt</code></p> <p>2: Put the following into the newly created .txt file:</p> <pre><code>   WeaponData\n   {   \n       RUI_CrosshairData\n       {\n           Crosshair_1 \n           {\n               \"ui\"                        \"ui/crosshair_alternator\" \n           }\n       }\n   }\n</code></pre> <p>3: change \"ui/crosshair_alternator\" to your desired crosshair</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#overlapping-crosshairs","title":"Overlapping Crosshairs","text":"<p>It is possible to combine crosshairs by modifying the mp_weapon_[Desired Weapons].txt</p> <p>Below is an example of combining the Alternator and R201 crosshairs into one</p> <pre><code>   WeaponData\n   {\n       active_crosshair_count              \"2\" //Amount of crosshairs you want to use\n\n       RUI_CrosshairData\n       {\n           Crosshair_1                                                                     \n           {\n               \"ui\"                        \"ui/crosshair_alternator\"   \n           }                                                                               \n           Crosshair_2                                                                     \n           {\n               \"ui\"                        \"ui/crosshair_tri\"          \n           }                                                                              \n       }\n   }\n</code></pre> <p>To add more crosshairs add another Crosshair_ X following the formating in the script above.</p> <p>Note</p> <p>The limit for this seems to be 4 Crosshairs onscreen at once</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#how-the-script-above-appears","title":"How the script above appears:","text":""},{"location":"Modding/guides/keyvalue/crosshairmodding/#adjust-crosshair-spread","title":"Adjust Crosshair Spread?","text":"<p>Simply add the following line below the  \"ui\" line <code>\"base_spread\"               \"3.0\"</code> Below the \"ui\" line, Like this:</p> <pre><code>    {   \n       RUI_CrosshairData\n       {\n           Crosshair_1 \n           {\n               \"ui\"                        \"ui/crosshair_alternator\" //THis is the Croshair\n               \"base_spread\"               \"3.0\"   //This is a spread Multiplier, Line doesn't exist by default\n           }\n       }\n   }\n</code></pre> <ul> <li>This only affects the visual spread of the crosshair, not the actual bullet spread. Positive Values increase spread while negative decrease it. By default it is based on the weapon's own stats.</li> </ul>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#no-crosshair","title":"No Crosshair?","text":"<pre><code>   WeaponData\n   {   \n       RUI_CrosshairData\n       {\n           Crosshair_1 \n           {\n               \"ui\"                        \"ui/crosshair_sniper_amped\" //This means NO crosshair\n           }\n       }\n   }\n</code></pre>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#crosshair-index","title":"Crosshair Index:","text":"<p>These are the available crosshairs in-game, along with their in-game reference:</p> <p></p> <p>Crosshair images are taken from the modding guide on https://noskill.gitbook.io/titanfall2/</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#examples","title":"Examples","text":""},{"location":"Modding/guides/keyvalue/crosshairmodding/#extra-info","title":"Extra Info","text":"<ul> <li> <p>As with any mod, it is recommended to test this out in a private match first. Save any changes you made to the desired weapon's file and type <code>reload</code> in your console</p> </li> <li> <p>Keep in mind that some weapons have animated or dynamic crosshairs. Weapons like the Charge Rifle, Cold War, Frag Grenade, etc... have custom animations for their crosshairs. which can cause weirdness or jank when used on other weapons or when using other crosshairs on them. </p> </li> <li>Animated weapons like the Charge rifle will work with animated crosshairs like <code>ui/crosshair_titan_sniper</code></li> </ul> <p>Thank you to <code>Cpone#0001</code> and <code>Nixie#8251</code> from the Northstar Discord for helping me figure this out</p>"},{"location":"Modding/guides/keyvalue/localisation/","title":"Localisation","text":"<p>For your content to reach as many people as possible, it is important to have it translated in users' natural language. This guide will help you do that!</p>"},{"location":"Modding/guides/keyvalue/localisation/#languages-list","title":"Languages list","text":"<p>Languages natively supported by Titanfall2 are:</p> <ul> <li>English</li> <li>French</li> <li>German</li> <li>Italian</li> <li>Japanese</li> <li>Portuguese</li> <li>Russian</li> <li>Spanish</li> <li>Traditional Chinese (<code>\"tchinese\"</code>)</li> </ul>"},{"location":"Modding/guides/keyvalue/localisation/#create-translation-files","title":"Create translation files","text":"<p>Here's what a translation file looks like:</p> <pre><code>    \"lang\"\n    {\n        \"Language\" \"english\"\n        \"Tokens\"\n        {\n            \"MENU_LAUNCH_NORTHSTAR\" \"Launch Northstar\"\n            \"MENU_TITLE_MODS\" \"Mods\"\n            \"RELOAD_MODS\" \"Reload Mods\"\n            \"WARNING\" \"Warning\"\n            \"CORE_MOD_DISABLE_WARNING\" \"Disabling core mods can break your client!\"\n            \"DISABLE\" \"Disable\"\n        }\n    }\n</code></pre> <p>It begins with the <code>\"lang\"</code> instruction, contains a <code>\"Language\"</code> key indicating language of current file's translations, and a <code>\"Token\"</code> key indexing all translations.</p> <p>Warning</p> <p>If the translation file contains any non-ASCII character, it must use <code>\"UTF-16 LE\"</code> encoding.</p> <p>You'll have to create one file per supported language, and all your files must be named in a similar fashion.</p> <p>For example, Northstar translation files are named <code>\"northstar_client_localisation_english.txt\"</code>, <code>\"northstar_client_localisation_french.txt\"</code>, <code>\"northstar_client_localisation_german.txt\"</code> etc.</p> <p>You can import them from your <code>mod.json</code> manifesto this way:</p> <pre><code>    {\n        \"Localisation\": [\n            \"resource/northstar_client_localisation_%language%.txt\"\n        ]\n    }\n</code></pre> <p>Note</p> <p>The <code>\"%language%\"</code> syntax allows VM to load up translations matching game language (e.g. an English client will automatically use <code>\"northstar_client_localisation_english.txt\"</code> file)</p>"},{"location":"Modding/guides/keyvalue/localisation/#use-translations-in-your-code","title":"Use translations in your code","text":"<p>To translate UI elements like menus, you have to insert strings containing your translation keys, preceded by a <code>#</code>.</p> <p>For example, to translate the \"Launch Northstar\" button on main menu, instead of calling:</p> <pre><code>    AddComboButton( comboStruct, headerIndex, buttonIndex++, \"Launch Northstar\" )\n</code></pre> <p>We'll use:</p> <pre><code>    AddComboButton( comboStruct, headerIndex, buttonIndex++, \"#MENU_LAUNCH_NORTHSTAR\" )\n</code></pre> <p>You can also use the <code>Localize</code> method client-side:</p> <pre><code>    Localize( \"#MENU_LAUNCH_NORTHSTAR\" )\n</code></pre>"},{"location":"Modding/guides/keyvalue/localisation/#northstar-translations","title":"Northstar translations","text":"<p>Northstar adds new strings to the game which can be localised to match the language you are using on your Titanfall 2 installation.</p> <p>They're all located in <code>\"Northstar.Client\"</code> mod: [Northstar localisation files on GitHub] (https://github.com/R2Northstar/NorthstarMods/blob/main/Northstar.Client/mod/resource)</p> <p>Note</p> <p>To test your modifications, change your game language: with Origin, go to <code>Origin (My games library) -&gt; Titanfall 2 (right click) -&gt; Game Properties -&gt; Advanced Launch Options</code>; with Steam, go to <code>Titanfall 2 page -&gt; Manage (cog) -&gt; Properties -&gt; Language</code>.</p>"},{"location":"Modding/guides/keyvalue/weaponkeyvalues/","title":"Weapon Key Values","text":"<p>This document provides a list of various Key Values utilized by weapons and their purposes.</p> <p>Note that asset values are identical to strings in Key Value files.</p> <p>These can be modified with KeyValue modding, see here: weaponmodding</p> <p>The majority of these values are held in <code>eWeaponVar</code>. Those that are can be modified with attachments (named \"Mods\" in Key Value files); otherwise, the game will crash with an \"Unrecognized entry\" error when Key Values are loaded.</p>"},{"location":"Modding/guides/keyvalue/weaponkeyvalues/#list-of-keyvalues","title":"List of KeyValues","text":"Name Type eWeaponVar Purpose Notes <code>active_crosshair_count</code> <code>int</code> True The number of crosshairs to use from the weapon's crosshair list, starting at <code>rui_crosshair_index</code>. <code>activitymodifier</code> <code>string</code> True Used for certain weapon animations. <code>ads_fov_zoomfrac_end</code> <code>float</code> True The fraction at which FoV should finish zooming in when aiming down sights. <code>ads_fov_zoomfrac_start</code> <code>float</code> True The fraction at which FoV should start zooming in when aiming down sights. <code>ads_move_speed_scale</code> <code>float</code> True Scalar on movement speed when aiming down sights. Does not affect acceleration. <code>aimassist_adspull_weaponclass</code> <code>string</code> True Determines the aim assist class for aim assist pull on aiming down sights. <code>none</code>: No aim assist pull.<code>broad</code>, <code>broad_sp</code>: Moderate aim assist pull.<code>precise</code>, <code>precise_sp</code>: High aim assist pull. <code>aimassist_adspull_zoomEnd</code> <code>float</code> True The fraction during aiming down sights at which aim assist pull ends. <code>aimassist_adspull_zoomStart</code> <code>float</code> True The fraction during aiming down sights at which aim assist pull starts. <code>aimassist_disable_ads</code> <code>bool</code> True Disables aim assist while aiming down sights. <code>aimassist_disable_ads_humansonly</code> <code>bool</code> True Disables aim assist on non-heavily armored targets while aiming down sights. <code>aimassist_disable_ads_titansonly</code> <code>bool</code> True Disables aim assist on heavily armored targets while aiming down sights. <code>aimassist_disable_hipfire</code> <code>bool</code> True Disables aim assist while not aiming down sights. <code>aimassist_disable_hipfire_humansonly</code> <code>bool</code> True Disables aim assist on non-heavily armored targets while not aiming down sights. <code>aimassist_disable_hipfire_titansonly</code> <code>bool</code> True Disables aim assist on heavily armored targets while not aiming down sights. <code>allow_empty_fire</code> <code>bool</code> True Allows the weapon to fire with no ammo remaining. <code>allow_headshots</code> <code>bool</code> True Allows the weapon to land headshots on non-heavily armored targets. Does not work on titan weapons. <code>alt_fire_anim_count</code> <code>int</code> True Used to alternate firing animations on weapons with dual launchers (Flight Core, Salvo Core, etc.) <code>alwaysShow</code> <code>bool</code> False Unknown. <code>ammo_clip_random_loss_on_npc_drop</code> <code>float</code> True Random fraction of ammo missing in the clip when dropped by an NPC. <code>ammo_clip_random_loss_on_npc_drop_chunksize</code> <code>int</code> True Ensures that the ammo remaining in the weapon when dropped by an NPC is divisible by this value. <code>ammo_clip_reload_max</code> <code>int</code> True Unknown. <code>ammo_clip_size</code> <code>int</code> True Magazine size. <code>ammo_default_total</code> <code>int</code> True The total amount of ammo a weapon spawns with, including the magazine. <code>ammo_display</code> <code>string</code> True Unknown. <code>ammo_display_as_clips</code> <code>bool</code> True Unknown. <code>ammo_drains_to_empty_on_fire</code> <code>bool</code> True Forces the weapon's clip to drain to empty over <code>fire_duration</code>. <code>ammo_min_to_fire</code> <code>int</code> True The minimum amount of ammo needed to fire the weapon. <code>ammo_min_to_fire_autoreloads</code> <code>bool</code> True Forces a reload when the current ammo is lower than <code>ammo_min_to_fire</code>. <code>ammo_no_remove_from_clip</code> <code>bool</code> True Enables/disables consuming ammo in the magazine on attack. If true while <code>ammo_no_remove_from_stockpile</code> is false, displays only stockpile ammo on HUD. If both are true, displays infinite ammo.If true and magazine size is greater than 0, ammo is not removed from stockpile. <code>ammo_no_remove_from_stockpile</code> <code>bool</code> True Enables/disables consuming ammo in the stockpile when reloading or on weapons with no magazine. If false, displays stockpile ammo on HUD. <code>ammo_per_shot</code> <code>int</code> True The amount of ammo consumed per shot. <code>ammo_size_segmented_reload</code> <code>int</code> True The amount of ammo reloaded per segment on weapons with segmented reloads. <code>ammo_stockpile_max</code> <code>int</code> True The maximum amount of ammo that the stockpile can hold. <code>ammo_suck_behavior</code> <code>string</code> True Can be <code>melee_weapons</code>, <code>offhand_weapons</code>, or <code>primary_weapons</code>. Use unknown. <code>anim_alt_idleAttack</code> <code>int</code> True Unknown. <code>arc_switch_activator</code> <code>bool</code> False Unknown. <code>attack_button_presses_ads</code> <code>bool</code> True Enables/disables the attack button triggering aim down sights when held. <code>attack_button_presses_melee</code> <code>bool</code> True Enables/disables the attack button triggering melee. <code>battle_chatter_event</code> <code>string</code> False Unknown. <code>bob_</code> Various False A set of values controlling view model bobbing while moving. <code>body_skin</code> <code>int</code> True Unknown. <code>body_type</code> <code>string</code> False Unknown. <code>bodygroup1_name</code> <code>string</code> False The name that body group 1 is tied to. <code>bodygroup1_set</code> <code>bool</code> True Enables/disables body group 1. Distinct values exist for bodygroups up to <code>bodygroup10</code>. <code>bodygroup_ads_scope_name</code> <code>string</code> False The name that the set of aiming down sights scopes is tied to. <code>bodygroup_ads_scope_set</code> <code>int</code> True The index of the scope to use from the set while aiming down sights. <code>bodygroup_ammo_index_count</code> <code>int</code> True The maximum amount of ammo visible on the viewmodel. <code>bolt_bounce_frac</code> <code>float</code> True Maximum angle fraction from parallel that a bolt can still bounce off a surface at. <code>bolt_gravity_enabled</code> <code>bool</code> True Enables/disables gravity on bolts fired. <code>bolt_hitsize</code> <code>float</code> True The hitbox size of bolts. Hitbox size does not affect map collisions.Not 1:1 with other size measurements. <code>bolt_hitsize_grow1_size</code> <code>float</code> True The hitbox size the bolt reaches at the grow1 time. <code>bolt_hitsize_grow1_time</code> <code>float</code> True The time in seconds at which grow1 size is reached. <code>bolt_hitsize_grow2_size</code> <code>float</code> True The hitbox size the bolt reaches at the grow2 time. <code>bolt_hitsize_grow2_time</code> <code>float</code> True The time in seconds at which grow2 size is reached. <code>bolt_hitsize_growfinal_lerptime</code> <code>float</code> True The hitbox size the bolt reaches at the growfinal time. <code>bolt_hitsize_growfinal_size</code> <code>float</code> True The time in seconds at which growfinal size is reached. Time values are absolute from projectile spawn, not cumulative. Later time values must be &gt;= the previous values. <code>bounce_effect_table</code> <code>asset</code> True The effect table to use when bouncing. <code>breaks_cloak</code> <code>bool</code> True Enables/disables breaking cloak on attack. Does not appear to work for all weapons, such as titan weaponry. <code>burst_fire_count</code> <code>int</code> True The number of shots fired in a burst. <code>burst_fire_delay</code> <code>float</code> True The delay after a burst before another burst can be fired. Counts from the moment the last shot in a burst is fired.Also prevents other actions (e.g. holstering, melee) until finished. <code>burst_or_looping_fire_sound_end</code> <code>string</code> True Deprecated. Sound effect played at the end of the burst/loop for the user. <code>burst_or_looping_fire_sound_end_1p</code> <code>string</code> True Sound effect played at the end of the burst/loop for the user. <code>burst_or_looping_fire_sound_end_3p</code> <code>string</code> True Sound effect played at the end of the burst/loop for others. <code>burst_or_looping_fire_sound_end_npc</code> <code>string</code> True Sound effect played at the end of the burst/loop for others when an NPC is using the weapon. <code>burst_or_looping_fire_sound_middle</code> <code>string</code> True Deprecated. Sound effect played on every attack in the burst/loop for the user. Ends on burst/loop end. <code>burst_or_looping_fire_sound_middle_1p</code> <code>string</code> True Sound effect played on every attack in the burst/loop for the user. Ends on burst/loop end. <code>burst_or_looping_fire_sound_middle_3p</code> <code>string</code> True Sound effect played on every attack in the burst/loop for others. Ends on burst/loop end. <code>burst_or_looping_fire_sound_middle_npc</code> <code>string</code> True Sound effect played on every attack in the burst/loop for others when an NPC is using the weapon. Ends on burst/loop end. <code>burst_or_looping_fire_sound_start</code> <code>string</code> True Deprecated. Sound effect played at the start of the burst/loop for the user. <code>burst_or_looping_fire_sound_start_1p</code> <code>string</code> True Sound effect played at the start of the burst/loop for the user. <code>burst_or_looping_fire_sound_start_3p</code> <code>string</code> True Sound effect played at the start of the burst/loop for others. <code>burst_or_looping_fire_sound_start_npc</code> <code>string</code> True Sound effect played at the start of the burst/loop for others when an NPC is using the weapon. <code>bypass_semiauto_hold_protection</code> <code>bool</code> True Unknown. <code>can_attack_when_dead</code> <code>bool</code> True Unknown. <code>challeng_req</code> <code>string</code> True Unknown. <code>challenge_tier</code> <code>int</code> True Unknown. <code>chance_for_bonus_last_shot_in_clip</code> <code>float</code> True Chance to refund a shot while on the last shot in the magazine. <code>charge_allow_melee</code> <code>bool</code> True Allows the user to melee in the middle of charging the weapon. <code>charge_allow_midway_charge</code> <code>bool</code> True Unknown. <code>charge_cooldown_delay</code> <code>float</code> True The time in seconds since last charge before charge begins cooling down. <code>charge_cooldown_time</code> <code>float</code> True The time in seconds for charge to cooldown to 0 (from full charge). <code>charge_drain_sound_1p</code> <code>string</code> True Sound effect played to the user when charge begins cooling down. <code>charge_drain_sound_3p</code> <code>string</code> True Sound effect played to others when charge begins cooling down. <code>charge_drain_sound_seek_to_charge_fraction</code> <code>bool</code> True Enables/disables setting the starting point of the charge drain sound effect to match the charge fraction. <code>charge_drain_sound_stop_when_empty</code> <code>bool</code> True Enables/disables stopping the charge drain sound effect when charge is empty. <code>charge_effect_1p</code> <code>string</code> True The particle effect played to the user when charging. <code>charge_effect_3p</code> <code>string</code> True The particle effect played to others when charging. <code>charge_effect_attachment</code> <code>string</code> True The weapon part to attach the charge effect to. An additional charge effect can be used under <code>charge_effect2</code>. <code>charge_effect_show_during_drain</code> <code>bool</code> True Determines whether to show the charge effect while cooling down. <code>charge_end_forces_fire</code> <code>bool</code> True Forces the weapon to fire once charge is full. Always forces fire if <code>charge_is_triggered_by_ADS</code> is false. <code>charge_full_sound_1p</code> <code>string</code> True Sound effect played to the user when charge is full. <code>charge_full_sound_3p</code> <code>string</code> True Sound effect played to others when charge is full. <code>charge_is_triggered_by_ADS</code> <code>bool</code> True Determines whether charge is triggered by aiming down sights. If false, charge is triggered by holding the attack button.If false, appears to break other charge systems, such as sound effects and charge level increased callbacks. <code>charge_levels</code> <code>int</code> True Determines how many equally-spaced charge levels are in the charge (max charge is always the last level). <code>charge_maintained_until_fired</code> <code>bool</code> True Unknown. <code>charge_remain_full_when_fired</code> <code>bool</code> True Preserves current charge when the weapon is fired. <code>charge_require_input</code> <code>bool</code> True Requires the user to hold attack to coninue to charge the weapon. If false, charge continues once triggered. Does not work if <code>charge_is_triggered_by_ADS</code> is true. <code>charge_rumble_max</code> <code>int</code> True Controls controller rumble at max charge. <code>charge_rumble_min</code> <code>int</code> True Controls controller rumble at minimum charge. <code>charge_sound_1p</code> <code>string</code> True Sound effect played to the user when charging begins. <code>charge_sound_3p</code> <code>string</code> True Sound effect played to the user when charging begins. <code>charge_sound_seek_to_charge_fraction</code> <code>bool</code> True Enables/disables setting the starting point of the charge sound effect to match the charge fraction. <code>charge_sound_stop_when_full</code> <code>bool</code> True Enables/disables stopping the charge sound effect when charge is full. <code>charge_time</code> <code>float</code> True The time in seconds it takes to charge to full (from empty). <code>charge_wave_max_count</code> <code>int</code> False The number of steps charged wave attacks should take. <code>charge_wave_step_dist</code> <code>float</code> False The distance each step moves a charged wave attack forward. <code>chargeup_time</code> <code>float</code> False Additional time added to the active Core meter to account for charge time. Total Core meter time is the sum of this and <code>core_duration</code>. <code>clear_fx_on_new_view_model</code> <code>bool</code> True Unknown. <code>clip_bodygroup</code> <code>string</code> False The name of the magazine bodygroup to refer to. <code>clip_bodygroup_index_shown</code> <code>bool</code> False Unknown. <code>clip_bodygroup_index_hidden</code> <code>bool</code> False Unknown. <code>clip_bodygroup_shown_for_milestone_0</code> <code>bool</code> False Enables/disables showing the body group during the corresponding reload milestone. Additional milestone values exist up to <code>clip_bodygroup_shown_for_milestone_4</code>. <code>cooldown_time</code> <code>float</code> True The time in seconds after the weapon stops firing before it can fire again. Unlike <code>fire_rate</code>, does not prevent other actions. <code>cooldown_viewkick_adsScale</code> <code>float</code> True Scalar on cooldown recoil when aiming down sights. <code>cooldown_viewkick_hardScale</code> <code>float</code> True Scalar on cooldown hard recoil, which applies recoil instantly. <code>cooldown_viewkick_pitch_base</code> <code>float</code> True The base amount of vertical recoil applied when cooldown begins (positive = down). <code>cooldown_viewkick_pitch_random</code> <code>float</code> True The maximum absolute value of randomness added to base cooldown vertical recoil. <code>cooldown_viewkick_pitch_random_innerexclude</code> <code>float</code> True Unknown. The same values exist for yaw (positive = left). <code>cooldown_viewkick_softScale</code> <code>float</code> True Scalar on cooldown soft recoil, which applies recoil over time. <code>core_build_time</code> <code>float</code> True Unused. The number of seconds to build Core. <code>core_duration</code> <code>float</code> True Duration of the Core in seconds. Does not include Core charge up time. <code>critical_hit</code> <code>bool</code> True Allows the weapon to land critical hits on heavily armored targets. <code>critical_hit_damage_scale</code> <code>float</code> True Scalar on critical hit damage. <code>crosshair_force_sprint_fade_disabled</code> <code>float</code> True Prevents the crosshair from fading when sprinting. <code>custom_bool_0</code> <code>bool</code> True Utility value with no specific purpose. <code>custom_float_0</code> <code>float</code> True Utility value with no specific purpose. <code>custom_int_0</code> <code>int</code> True Utility value with no specific purpose. These utility values go up to <code>custom_[x]_7</code>. <code>damage_additional_bullets</code> <code>int</code> True Has no native use. Used by Railgun in script to add damage per charge. <code>damage_additional_bullets_titanarmor</code> <code>int</code> True Has no native use. Used by Railgun in script to add heavy armor damage per charge. <code>damage_falloff_type</code> <code>string</code> True Determines the class of damage falloff to use. Only used by EVA-8. <code>damage_far_distance</code> <code>float</code> True The distance at which the far damage value is reached. If <code>headshot_distance</code> is not specified, this also acts as the maximum headshot distance.Controls maximum range for hitscan shotgun attacks.Damage scales linearly between near to far distances and far to very far (if it is used) distances. <code>damage_far_value</code> <code>float</code> True Damage dealt to non-heavily armored targets at <code>damage_far_distance</code>. <code>damage_far_value_titanarmor</code> <code>float</code> True Damage dealt to heavily armored targets at <code>damage_far_distance</code>. Optional. If unused, <code>damage_far_value</code> is applied instead. <code>damage_flags</code> <code>int</code> True The damage flags used by the weapon. Only applies by default; flags can be overwritten in script. <code>damage_headshot_scale</code> <code>float</code> True Scalar on headshot damage. <code>damage_heavyarmor_nontitan_scale</code> <code>float</code> True Unknown. <code>damage_inverse_distance</code> <code>float</code> True Distance used alongside <code>inverse</code> damage falloff type. <code>damage_near_distance</code> <code>float</code> True The farthest distance at which near damage value is applied. Damage scales linearly between near to far distances. <code>damage_near_value</code> <code>float</code> True Damage dealt to non-heavily armored targets at or below <code>damage_near_distance</code>. <code>damage_near_value_titanarmor</code> <code>float</code> True Damage dealt to heavily armored targets at or below <code>damage_near_distance</code>. Optional. If unused, <code>damage_near_value</code> is applied instead. <code>damage_rodeo</code> <code>float</code> True Damage dealt to the enemy titan during Rodeo. Unused normally. <code>damage_very_far_distance</code> <code>float</code> True The distance at which the very far damage value is reached. Optional. If unused, damage does not change after far distance. <code>damage_very_far_value</code> <code>float</code> True Damage dealt to non-heavily armored targets at or past <code>damage_ver_far_distance</code>. Optional. <code>damage_very_far_value_titanarmor</code> <code>float</code> True Damage dealt to heavily armored targets at or past <code>damage_ver_far_distance</code>. Optional. If unused, <code>damage_very_far_value</code> is applied instead. <code>deploy_time</code> <code>float</code> True The time in seconds for the weapon to deploy when swapped to from a main weapon. <code>deploycatch_time</code> <code>float</code> True Unknown. <code>deployfirst_time</code> <code>float</code> True Unknown. <code>description</code> <code>string</code> True Text displayed in weapon flyout descriptions. <code>destroy_on_all_ammo_take</code> <code>bool</code> True Unknown. <code>destroy_on_drop</code> <code>bool</code> True Destroys the weapon when dropped, preventing pickup. <code>dialog_core_online</code> <code>string</code> False Voiceline played when Core is available. <code>dialog_core_activated</code> <code>string</code> False Voiceline played when Core is activated. <code>does_not_interrupt_cloak</code> <code>bool</code> False Enables/disables not triggering cloak flickering on toss. (Grenades only) <code>dof_nearDepthEnd</code> <code>float</code> True Unknown. <code>dof_nearDepthStart</code> <code>float</code> True Unknown. <code>dof_zoom_focusArea_Bottom</code> <code>float</code> True Unknown. <code>dof_zoom_focusArea_Horizontal</code> <code>float</code> True Unknown. <code>dof_zoom_focusArea_Top</code> <code>float</code> True Unknown. <code>dof_zoom_nearDepthEnd</code> <code>float</code> True Unknown. <code>dof_zoom_nearDepthStart</code> <code>float</code> True Unknown. <code>empty_reload_only</code> <code>bool</code> False Enables/disables allowing reloads only when there is no ammo in the magazine. <code>enable_highlight_networking_on_creation</code> <code>bool</code> True Unknown. <code>explosion_damage</code> <code>int</code> True Maximum explosion damage dealt to non-heavily armored targets. <code>explosion_damage_flags</code> <code>int</code> True Unused. Likely equivalent to <code>damage_flags</code>, but for explosions. <code>explosion_damage_heavy_armor</code> <code>int</code> True Maximum explosion damage dealt to heavily armored targets. Optional. If unused, <code>explosion_damage</code> is applied instead. <code>explosion_damages_owner</code> <code>bool</code> True Enables/disables damaging the user with explosions. <code>explosion_inner_radius</code> <code>float</code> True The distance within which maximum explosion damage is dealt. Optional. If unused, assumed to be 0. <code>explosion_shake_amplitude</code> <code>float</code> True Strength of screen shake caused by explosions. <code>explosion_shake_duration</code> <code>float</code> True The time in seconds that the explosion screen shake lasts. <code>explosion_shake_frequency</code> <code>float</code> True Frequency of the explosion screen shake pattern. <code>explosion_shake_radius</code> <code>float</code> True The radius in which the explosion screen shake applies to enemies. <code>explosionradius</code> <code>float</code> True The maximum distance within which explosion damage can be dealt. <code>fast_swap_to</code> <code>bool</code> True Enables/disables fast swap when swapping to the weapon. <code>fire_anim_rate</code> <code>float</code> False Unknown. <code>fire_duration</code> <code>float</code> True Duration in seconds that an ability lasts for. Used by offhand weapons. Also determines ammo drain time for weapons with <code>ammo_drains_to_empty_on_fire</code> enabled. <code>fire_mode</code> <code>string</code> True Determines weapon attack and holster behavior. <code>auto</code>, <code>full-auto</code>: Attacks as long as the trigger is held. (Default)<code>semi-auto</code>: Attacks once per trigger pull.<code>offhand</code>: Swapped to when triggered, attacks as soon as possible, and holsters once fired.<code>offhand_instant</code>: Immediately attacks without being swapped to.<code>offhand_melee</code>: Used by melee weapons.<code>offhand_melee_hybrid</code>: Used by held melee weapons. Triggers a melee attack by attacking with the weapon. <code>fire_rate</code> <code>float</code> True The fire rate of the weapon in attacks per second. For burst weapons, determines the fire rate of the burst.For weapons with accelerating fire rate, determines the minimum fire rate.Also prevents other actions (e.g. holstering, melee) until the shot cooldown (1/<code>fire_rate</code>) has passed. <code>fire_rate_max</code> <code>float</code> True The maximum fire rate of the weapon in attacks per second. Used for accelerating fire rate. <code>fire_rate_max_time_cooldown</code> <code>float</code> True The time in seconds for the fire rate to decrease to minimum. Used for accelerating fire rate. <code>fire_rate_max_time_speedup</code> <code>float</code> True The time in seconds for the fire rate to increase to maximum. Used for accelerating fire rate. <code>fire_rate_max_use_ads</code> <code>bool</code> True Enables/disables setting fire rate to <code>fire_rate_max</code> when aiming down sights. Disables acceleration defined by <code>fire_rate_max_time_cooldown</code> and <code>fire_rate_max_time_speedup</code>. <code>fire_rumble</code> <code>string</code> True Determines the class used for controller rumble. <code>fire_sound_1</code> <code>string</code> True Deprecated. Sound effect played to user on attack. <code>fire_sound_1_npc</code> <code>string</code> True Sound effect played to others on NPC attack. <code>fire_sound_1_player_1p</code> <code>string</code> True Sound effect played to user on attack. <code>fire_sound_1_player_3p</code> <code>string</code> True Sound effect played to others on attack. Additional fire sound effects exist up to <code>fire_sound_3</code>. <code>fire_sound_first_shot</code> <code>string</code> True Deprecated. Sound effect played for the user on the first attack per trigger pull. <code>fire_sound_first_shot_npc</code> <code>string</code> True Deprecated. Sound effect played for others on the first attack per trigger pull done by an NPC. <code>fire_sound_first_shot_player_1p</code> <code>string</code> True Deprecated. Sound effect played for the user on the first attack per trigger pull. <code>fire_sound_first_shot_player_3p</code> <code>string</code> True Deprecated. Sound effect played for others on the first attack per trigger pull. This functionality is done with looping sound effects now. <code>flyoutEnabled</code> <code>bool</code> False Enables/disables weapon flyouts for this weapon. <code>fx_muzzle_flash_attach</code> <code>string</code> True The weapon part to attach the muzzle flash effect to. <code>fx_muzzle_flash_attach_scoped</code> <code>string</code> True The weapon part to attach the muzzle flash effect to while aiming down sights. <code>fx_muzzle_flash_view</code> <code>string</code> True The muzzle flash effect shown to the user on attack. <code>fx_muzzle_flash_world</code> <code>string</code> True The muzzle flash effect shown to others on attack. An additional muzzle flash effect can be used under <code>fx_muzzle_flash2</code>. <code>fx_shell_eject_attach</code> <code>string</code> True The weapon part to attach the shell eject effect to. <code>fx_shell_eject_attach_scoped</code> <code>string</code> True The weapon part to attach the shell eject effect to while aiming down sights. <code>fx_shell_eject_view</code> <code>asset</code> True The shell eject effect shown to the user on attack. <code>fx_shell_eject_world</code> <code>asset</code> True The shell eject effect shown to others on attack. An additional shell eject effect can be used under <code>fx_shell_eject2</code>. <code>gamepad_use_yaw_speed_for_pitch_ads</code> <code>bool</code> True Uses yaw sensitivity for pitch sensitivity on controllers (normally, pitch is lower). <code>gesture_attack_anim</code> <code>bool</code> False Unknown. <code>grapple_maxLength</code> <code>float</code> True The maximum horizontal length of grapple (x/y axis). <code>grapple_maxLengthVert</code> <code>float</code> True The maximum vertical length of grapple (z axis). <code>grapple_power_required</code> <code>float</code> True The minimum amount of power required to use grapple. <code>grapple_power_use_rate</code> <code>float</code> True The power drained per second while grapple is in use. <code>grapple_weapon</code> <code>bool</code> True Identifies that the weapon is a grapple. <code>grenade_arc_impact_indicator_effect</code> <code>asset</code> True The visual effect where the grenade arc indicator touches terrain. <code>grenade_arc_indicator_bounce_count</code> <code>int</code> True The number of bounces the grenade arc indicator shows. <code>grenade_arc_indicator_effect</code> <code>asset</code> True The particle effect used to create the grenade arc indicator. <code>grenade_arc_indicator_effect_first</code> <code>asset</code> True Unknown. <code>grenade_arc_indicator_show_from_hip</code> <code>bool</code> True Enables/disables the grenade arc indicator to be shown while not aiming down sights. <code>grenade_bounce_extra_vertical_randomness</code> <code>float</code> True Scalar on the maximum random vertical velocity added to grenade velocity on bounce. (Grenades only) <code>grenade_bounce_randomness</code> <code>float</code> True Scalar on the maximum random horizontal velocity added to grenade velocity on bounce. (Grenades only) <code>grenade_bounce_vel_frac_along_normal</code> <code>float</code> True The fraction of velocity preserved when bouncing off a surface parallel to velocity. (Grenades only) <code>grenade_bounce_vel_frac_shallow</code> <code>float</code> True The fraction of velocity preserved when bouncing off a surface at a shallow angle to velocity. (Grenades only) <code>grenade_bounce_vel_frac_sharp</code> <code>float</code> True The fraction of velocity preserved when bouncing off a surface at a sharp angle to velocity. (Grenades only) <code>grenade_death_drop_velocity_extraUp</code> <code>float</code> True The fraction of velocity applied upward when the grenade is released by dying. (Grenades only) <code>grenade_death_drop_velocity_scale</code> <code>float</code> True The fraction of velocity applied forwards (in current direction) when the grenade is released by dying. (Grenades only) <code>grenade_disc_throw</code> <code>bool</code> False Unknown. <code>grenade_fuse_time</code> <code>float</code> True The time in seconds after being pulled out that a grenade will last before exploding. (Grenades only) <code>grenade_ignition_time</code> <code>float</code> True The time in seconds in time after ignition that a grenade will last before expiring. Ignition is triggered in script. (Grenades only) <code>grenade_orient_to_velocity</code> <code>bool</code> True Unknown. <code>grenade_radius_horizontal</code> <code>float</code> True Horizontal distance a grenade will shift by when bouncing horizontally. (Grenades only) <code>grenade_radius_vertical</code> <code>float</code> True Bonus vertical distance on the grenade hitbox. (Grenades only) <code>grenade_roll_vel_frac_per_second</code> <code>float</code> True The fraction of velocity preserved per second of rolling. (Grenades only) <code>grenade_show_indicator_to_owner</code> <code>bool</code> False Enables/disables the nearby grenade indicator for the user on grenades fired. <code>headshot_distance</code> <code>float</code> False The distance within which headshots can occur. Optional. If unused, <code>damage_far_distance</code> is applied instead. <code>hide_holstered_sidearm_when_active</code> <code>bool</code> True Hides the holstered weapon while this weapon is active. Primarily used by offhands. <code>holster_time</code> <code>float</code> True The time in seconds for the weapon to holster when swapping to a main weapon. <code>burst_fire_delay</code> and <code>fire_rate</code> can cause a weapon to take longer to holster than this time. <code>holster_type</code> <code>string</code> True Determines where the weapon is holstered on the player model. <code>holstermodel</code> <code>asset</code> True The weapon viewmodel while holstered. <code>hud_icon</code> <code>string</code> True The icon shown for the weapon on HUD. <code>idle_sound_player_1p</code> <code>string</code> True Sound effect played while the weapon is idle. <code>ignition_distance</code> <code>float</code> True The distance at which the missile is ignited and <code>pre_ignition</code> values no longer apply. (Missiles only) <code>ignition_effect</code> <code>float</code> True The visual effect played upon ignition. (Missiles only) <code>ignition_sound</code> <code>float</code> True The sound effect played upon ignition. (Missiles only) <code>impact_effect_table</code> <code>asset</code> True The effect table referenced for collisions. Includes both visuals and sound effects. <code>impulse_force</code> <code>int</code> True The impulse force applied on damage. <code>impulse_force_explosions</code> <code>int</code> True The impulse force applied on explosion damage. (Optional) If unused, <code>impulse_force</code> is applied instead. <code>instant_swap_from</code> <code>bool</code> True Instantly swaps when swapping from this weapon to another. <code>instant_swap_to</code> <code>bool</code> True Instantly swaps when swapping to this weapon from another. <code>is_burn_mod</code> <code>bool</code> True Used to identify Amped attachments and trigger related flags. <code>item_flags</code> <code>int</code> False Unknown. <code>leveled_pickup</code> <code>bool</code> False Unknown. <code>lifetime_shots_default</code> <code>int</code> True Unknown. <code>loadout_child_ref</code> <code>string</code> True Unknown. <code>loadout_parent_ref</code> <code>string</code> True Unknown. <code>loadout_selectable</code> <code>bool</code> True Unknown. <code>loadout_type</code> <code>string</code> True Unknown. <code>looping_sounds</code> <code>bool</code> True Enables/disables <code>burst_or_looping_fire_sound</code> effects. Does not disable <code>fire_sound</code> effects. <code>low_ammo_fraction</code> <code>float</code> True Unknown. <code>low_ammo_sound_name_1</code> <code>string</code> True Sound effect played to the user on the last shot in the magazine. Additional values exist for the i-th to last shot up to <code>low_ammo_sound_name_15</code>. <code>low_ammo_sound_range_name_1</code> <code>string</code> True Unknown. <code>low_ammo_sound_range_start_1</code> <code>int</code> True Unknown. Additional values for these exist up to <code>low_ammo_sound_range_[x]_3</code>. <code>lower_time</code> <code>float</code> True The time in seconds it takes to lower the weapon when swapping to an offhand weapon. <code>melee_angle</code> <code>float</code> True The angle of the cone used for melee hit detection. <code>melee_anim_1p_number</code> <code>int</code> True ID used to determine the first person animation of a melee weapon. <code>melee_anim_3p</code> <code>string</code> True Determines the third person animation of a melee weapon. <code>melee_attack_animtime</code> <code>float</code> True The time in seconds it takes for the whole first person melee animation to play. Also affects the timing of the melee hitbox (both startup and duration).Does not change the length of time the user is locked to their melee weapon. <code>melee_can_hit_humansized</code> <code>bool</code> True Enables/disables the melee weapon to hit non-heavily armored targets. <code>melee_can_hit_titans</code> <code>bool</code> True Enables/disables the melee weapon to hit heavily armored targets. <code>melee_damage</code> <code>int</code> True Melee damage dealt to non-heavily armored targets. <code>melee_damage_heavyarmor</code> <code>int</code> True Melee damage dealt to heavily armored targets. <code>melee_freezelook_on_hit</code> <code>float</code> True Unknown. <code>melee_lunge_target_angle</code> <code>float</code> True The angle of the cone used for melee lunge. <code>melee_lunge_target_range</code> <code>float</code> True The range of the cone used for melee lunge. <code>melee_lunge_time</code> <code>float</code> True The time in seconds a melee lunge takes to complete its travel. <code>melee_raise_recovery_animtime_normal</code> <code>float</code> True Scalar on the time it takes to raise the held weapon after a melee. <code>melee_raise_recovery_animtime_quick</code> <code>float</code> True Unknown. <code>melee_range</code> <code>float</code> True The range of the cone used for melee hit detection. <code>melee_respect_next_attack_time</code> <code>bool</code> True Unknown. <code>melee_rumble_on_hit</code> <code>string</code> True Determines the class used for controller rumble on melee hit. <code>melee_rumble_on_hit_partial</code> <code>string</code> True Unknown. <code>melee_sound_attack_1p</code> <code>string</code> True Sound effect played to the user on melee attack. <code>melee_sound_attack_3p</code> <code>string</code> True Sound effect played to others on melee attack. <code>menu_alt_icon</code> <code>string</code> True Unknown. <code>menu_icon</code> <code>string</code> True Icon shown for this weapon in menus (e.g. loadout screen). <code>menu_image</code> <code>string</code> True Unknown. <code>minimap_reveal_distance</code> <code>float</code> True Unknown. <code>mod_description</code> <code>string</code> True Unknown. <code>mod_print_name</code> <code>string</code> True Unknown. <code>mod_short_print_name</code> <code>string</code> True Unknown. <code>move_speed_modifier</code> <code>float</code> True Scalar on user movement speed. <code>move_speed_modifier_when_out_of_ammo</code> <code>float</code> True Scalar on user movement speed while the weapon is out of ammo (both stockpile and magazine). <code>net_bullet_fix</code> <code>bool</code> True Unknown. <code>net_optimize</code> <code>bool</code> False Used to improve performance of hitscans. Should always be true for hitscan weapons. Projectiles fired with this on will have no third person sound effect and will not ping radar. <code>never_drop</code> <code>bool</code> True Makes the weapon unable to be dropped. <code>npc_accuracy_multiplier_heavy_armor</code> <code>float</code> True Scalar on NPC accuracy when targeting a heavily armored target. (Higher = better) <code>npc_accuracy_multiplier_npc</code> <code>float</code> True Scalar on NPC accuracy when targeting a non-heavily armored NPC. (Higher = better) <code>npc_accuracy_multiplier_pilot</code> <code>float</code> True Scalar on NPC accuracy when targeting a non-heavily armored player. (Higher = better) <code>npc_aim_at_feet</code> <code>bool</code> True Enables/disables NPCs aiming at the feet of targets. <code>npc_aim_at_feet_vs_heavy_armor</code> <code>bool</code> True Enables/disables NPCs aiming at the feet of heavily armored targets. <code>npc_attack_cone_angle</code> <code>float</code> True Unknown. <code>npc_burst_secondary</code> <code>int</code> True Unknown. <code>npc_charge_time_max</code> <code>float</code> True Maximum time in seconds that the NPC will charge the weapon for. <code>npc_charge_time_min</code> <code>float</code> True Minimum time in seconds that the NPC will charge the weapon for. <code>npc_clear_charge_if_not_fired</code> <code>bool</code> True Enables/disables clearing weapon charge for NPCs if they do not fire when it finishes. <code>npc_damage_far_distance</code> <code>float</code> True The distance at which the far damage value is reached for NPCs. Optional. Controls maximum range for hitscan shotgun attacks.Damage scales linearly between near to far distances and far to very far (if it is used) distances. <code>npc_damage_far_value</code> <code>float</code> True Damage dealt to non-heavily armored targets at <code>npc_damage_far_distance</code> for NPCs. Optional. <code>npc_damage_far_value_titanarmor</code> <code>float</code> True Damage dealt to heavily armored targets at <code>npc_damage_far_distance</code> for NPCs. Optional. <code>npc_damage_near_distance</code> <code>float</code> True The farthest distance at which near damage value is applied for NPCs. Optional. Damage scales linearly between near to far distances. <code>npc_damage_near_value</code> <code>float</code> True Damage dealt to non-heavily armored targets at or below <code>npc_damage_near_distance</code> for NPCs. Optional <code>npc_damage_near_value_titanarmor</code> <code>float</code> True Damage dealt to heavily armored targets at or below <code>npc_damage_near_distance</code> for NPCs. Optional. <code>npc_damage_very_far_distance</code> <code>float</code> True The distance at which the very far damage value is reached for NPCs. Optional. <code>npc_damage_very_far_value</code> <code>float</code> True Damage dealt to non-heavily armored targets at or past <code>npc_damage_ver_far_distance</code> for NPCs. Optional. <code>npc_damage_very_far_value_titanarmor</code> <code>float</code> True Damage dealt to heavily armored targets at or past <code>npc_damage_ver_far_distance</code>. Optional. For each <code>npc_damage</code> value, if it is unused, the corresponding player value is applied instead. <code>npc_dangerous_to_heavy_armor</code> <code>bool</code> True Unknown. <code>npc_dangerous_to_normal_armor</code> <code>bool</code> True Unknown. <code>npc_directed_fire_ang_limit_cos</code> <code>float</code> True Unknown. <code>npc_explosion_damage</code> <code>int</code> True Maximum explosion damage dealt to non-heavily armored targets for NPCs. <code>npc_explosion_damage_heavy_armor</code> <code>int</code> True Maximum explosion damage dealt to heavily armored targets for NPCs. Unlike <code>npc_damage_</code> values, <code>npc_explosion_damage</code> values are set to 0 if unused. <code>npc_fire_at_enemy_defense_time</code> <code>float</code> True The time in seconds that an NPC will fire at a defensive before holding their shots. <code>npc_full_auto_vs_heavy_armor</code> <code>bool</code> True Unknown. <code>npc_lead_time_max_dist</code> <code>float</code> True Unknown. <code>npc_lead_time_min_dist</code> <code>float</code> True Unknown. <code>npc_lead_time_scale</code> <code>float</code> True Unknown. <code>npc_max_burst</code> <code>int</code> True The maximum number of shots an NPC will fire in a burst. Weapon need not be a burst weapon. <code>npc_max_engage_range</code> <code>float</code> True The maximum range within which an NPC will move towards a non-heavily armored target. <code>npc_max_engage_range_heavy_armor</code> <code>float</code> True The maximum range within which an NPC will move towards a heavily armored target. <code>npc_max_range</code> <code>float</code> True The maximum range within which an NPC will attack a target. <code>npc_max_range_secondary</code> <code>float</code> True Unknown. <code>npc_min_burst</code> <code>int</code> True The minimum number of shots an NPC will fire in a burst. Weapon need not be a burst weapon. <code>npc_min_engage_range</code> <code>float</code> True The range within which an NPC will stop moving towards a non-heavily armored target. <code>npc_min_engage_range_heavy_armor</code> <code>float</code> True The range within which an NPC will stop moving towards a heavily armored target. <code>npc_min_range</code> <code>float</code> True The minimum range before an NPC will attack a target. <code>npc_min_range_secondary</code> <code>float</code> True Unknown. <code>npc_miss_fast_player</code> <code>bool</code> True Unknown. <code>npc_pre_fire_delay</code> <code>float</code> True Time in seconds before an NPC can fire the weapon once a target is chosen. <code>npc_pre_fire_delay_interval</code> <code>float</code> True Time in seconds before <code>npc_pre_fire_delay</code> triggers again. <code>npc_reload_enabled</code> <code>bool</code> True Allows NPCs to reload the weapon. Optional. If unused, <code>reload_enabled</code> is applied instead. <code>npc_rest_time_between_bursts_expedite</code> <code>float</code> True Time in seconds before an NPC will fire another burst if staggered during rest time. <code>npc_rest_time_between_bursts_max</code> <code>float</code> True Maximum time in seconds before an NPC will fire another burst. <code>npc_rest_time_between_bursts_min</code> <code>float</code> True Minimum time in seconds before an NPC will fire another burst. <code>npc_rest_time_secondary</code> <code>float</code> True Unknown. <code>npc_self_explosion_safety</code> <code>bool</code> True Unknown. <code>npc_spread_cone_focus_time</code> <code>float</code> True Unknown. <code>npc_spread_defocused_cone_multiplier</code> <code>float</code> True Unknown. <code>npc_spread_pattern_focus_time</code> <code>float</code> True Unknown. <code>npc_spread_pattern_not_in_fov_factor</code> <code>float</code> True Unknown. <code>npc_spread_pattern_not_in_fov_time</code> <code>float</code> True Unknown. <code>npc_suppress_lsp_allowed</code> <code>bool</code> True Unknown. <code>npc_titan_ability</code> <code>string</code> False Unknown. <code>npc_use_ads_move_speed_scale</code> <code>bool</code> True Unknown. <code>npc_use_check_type</code> <code>string</code> False Unknown. <code>npc_use_long_duration</code> <code>float</code> True Unknown. <code>npc_use_max_damage</code> <code>float</code> True Maximum amount of damage taken before an NPC will use this weapon. <code>npc_use_min_damage</code> <code>float</code> True Minimum amount of damage taken before an NPC will use this weapon. <code>npc_use_min_projectile_damage</code> <code>float</code> True Minimum amount of damage taken from projectiles before an NPC will use this weapon. <code>npc_use_normal_duration</code> <code>float</code> False Time in seconds that an NPC will use this weapon. <code>npc_use_short_duration</code> <code>float</code> True Unknown. <code>npc_use_strict_muzzle_dir</code> <code>bool</code> True Unknown. <code>npc_vortex_block</code> <code>bool</code> True Unknown. <code>offhand_blocks_sprint</code> <code>bool</code> True Prevents the user from sprinting while this offhand weapon is in use. <code>offhand_default_inventory_slot</code> <code>int</code> True Determines the inventory slot this offhand is inserted into with the <code>give</code> cheat command. <code>offhand_hold_enabled</code> <code>bool</code> True Enables/disables holding the offhand weapon while it is pressed and attacking on release. <code>offhand_interupts_weapon_anims</code> <code>bool</code> True Enables/disables interrupting any currently active weapon and immediately starting deployment when activating the weapon. <code>offhand_switch_force_draw</code> <code>bool</code> True Unknown. <code>offhand_transition_has_attach_detach_anim_events</code> <code>bool</code> True Unknown. <code>OnClientAnimEvent</code> <code>void functionref( entity weapon, string name )</code> False Unknown. (Client only) <code>OnProjectileCollision</code> <code>void functionref( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )</code> False Callback ran when projectiles collide with terrain or entities. <code>OnProjectileIgnite</code> <code>void functionref( entity projectile )</code> False Callback ran when grenades ignite. <code>OnWeaponActivate</code> <code>void functionref( entity weapon )</code> False Callback ran when the weapon becomes active (e.g. when the crosshair becomes visible). <code>OnWeaponAttemptOffhandSwitch</code> <code>bool functionref( entity weapon )</code> False Callback ran when attempting to switch to an offhand weapon. Returns true if successful or false otherwise. <code>OnWeaponChargeBegin</code> <code>bool functionref( entity weapon )</code> False Callback ran when charging begins. Returns true if successful or returns false otherwise and denies the charge. <code>OnWeaponChargeEnd</code> <code>void functionref( entity weapon )</code> False Callback ran when charging ends. <code>OnWeaponChargeLevelIncreased</code> <code>bool functionref( entity weapon )</code> False Callback ran when charge level increases. Returns true. False conditions unknown. <code>OnWeaponCustomActivityStart</code> <code>void functionref( entity weapon )</code> False Unknown. <code>OnWeaponDeactivate</code> <code>void functionref( entity weapon )</code> False Callback ran when the weapon becomes inactive (e.g. when the crosshair disappears) <code>OnWeaponNpcPreAttack</code> <code>void functionref( entity weapon )</code> False Callback ran when an NPC begins the pre-fire delay. (Server only) <code>OnWeaponNpcPrimaryAttack</code> <code>var functionref( entity weapon, WeaponPrimaryAttackParams attackParams )</code> False Callback ran when the weapon attacks from an NPC. Returns ammo cost if successful or 0 if not. (Server only) <code>OnWeaponOwnerChanged</code> <code>void functionref( entity weapon, WeaponOwnerChangedParams changeParams )</code> False Callback ran when the user changes. <code>OnWeaponPrimaryAttack</code> <code>var functionref( entity weapon, WeaponPrimaryAttackParams attackParams )</code> False Callback ran when the weapon attacks. Returns ammo cost if successful or 0 if not. <code>OnWeaponPrimaryAttackAnimEvent</code> <code>var functionref( entity weapon, WeaponPrimaryAttackParams attackParams )</code> False Callback ran at a specific point in the weapon's attack animation. Returns ammo cost if successful or 0 if not. <code>OnWeaponReadyToFire</code> <code>void functionref( entity weapon )</code> False Callback ran when the weapon is ready to fire. <code>OnWeaponReload</code> <code>void functionref( entity weapon, int milestone )</code> False Callback ran when reload begins. Can have a nonzero milestone if reload was previously interrupted. <code>OnWeaponStartZoomIn</code> <code>void functionref( entity weapon )</code> False Callback ran when the user starts aiming down sights. <code>OnWeaponStartZoomOut</code> <code>void functionref( entity weapon )</code> False Callback ran when the user stops aiming down sights. <code>OnWeaponSustainedDischargeBegin</code> <code>bool functionref( entity weapon )</code> False Callback ran when sustained discharge begins. Returns true if successful or returns false otherwise and denies the sustained discharge. <code>OnWeaponSustainedDischargePulse</code> <code>bool functionref( entity weapon, WeaponPrimaryAttackParams attackParams )</code> False Callback ran when the sustained discharge pulses. Returns true if successful or false otherwise and stops the sustained discharge. Only used when <code>sustained_discharge_want_pulse_callbacks</code> is enabled. <code>OnWeaponSustainedDischargeEnd</code> <code>void functionref( entity weapon )</code> False Callback ran when sustained discharge emds. <code>OnWeaponTossCancelDrop</code> <code>void functionref( entity weapon, WeaponPrimaryAttackParams attackParams )</code> False Callback ran when a toss-able object is dropped by swapping. <code>OnWeaponTossPrep</code> <code>void functionref( entity weapon, WeaponTossPrepParams prepParams )</code> False Callback ran when a toss-able object is pulled out. <code>OnWeaponTossReleaseAnimEvent</code> <code>void functionref( entity weapon, WeaponPrimaryAttackParams attackParams )</code> False Callback ran when a toss-able object is released. <code>OnWeaponVortexHitBullet</code> <code>bool functionref( entity weapon, entity vortexSphere, var damageInfo )</code> False Callback ran when a vortex weapon is hit by a hitscan. Returns true if successful and deletes the bullet or false otherwise. <code>OnWeaponVortexHitProjectile</code> <code>bool functionref( entity weapon, entity vortexSphere, entity attacker, entity projectile, vector contactPos )</code> False Callback ran when a vortex weapon is hit by a projectile. Returns true if successful and deletes the projectile or false otherwise. <code>ordnance_crosshair_always_on_start_index</code> <code>int</code> True The index of a crosshair in the weapon's crosshair list to always have on. Used to show cooldowns as Pilot. <code>pass_through_damage_preserved_scale</code> <code>float</code> True Scalar on damage dealt to following targets after the shot pierces through a target. <code>pass_through_depth</code> <code>float</code> True The total amount of depth a shot can pierce through, inclusive. <code>passive</code> <code>string</code> False Determines what passive to give when the Core weapon starts attacking. Only works for <code>PAS_FUSION_CORE</code>, <code>PAS_SHIELD_BOOST</code>, <code>PAS_BERSERKER</code>, <code>PAS_SHIFT_CORE</code>, and <code>PAS_SMART_CORE</code>. <code>pickup_hold_prompt</code> <code>string</code> False Unknown. <code>pickup_press_prompt</code> <code>string</code> False Unknown. <code>play_offhand_charging_anim</code> <code>bool</code> False Enables/disables the standard charging animation of an offhand weapon for others. <code>play_offhand_fire_anim</code> <code>bool</code> False Unknown. <code>play_offhand_start_end_anim</code> <code>bool</code> False Unknown. <code>playermodel</code> <code>asset</code> True Model of the weapon shown to others when held. <code>pre_ignition_damage</code> <code>int</code> True Damage dealt to non-heavily armored targets before ignition. (Missiles only) <code>pre_ignition_damage_titanarmor</code> <code>int</code> True Damage dealt to heavily armored targets before ignition. (Missiles only) <code>pre_ignition_flight_sound</code> <code>string</code> True Sound effect played on missiles in flight before ignition. (Missiles only) <code>pre_ignition_impact_effect_table</code> <code>asset</code> True The effect table referenced for collisions before ignition. (Missiles only) Includes both visuals and sound effects. <code>pre_ignition_npc_damage</code> <code>int</code> True Damage dealt to non-heavily armored targets before ignition for NPCs. Optional. (Missiles only) If unusued, <code>pre_ignition_damage</code> applies instead. <code>pre_ignition_npc_damage_titanarmor</code> <code>int</code> True Damage dealt to heavily armored targets before ignition for NPCs. Optional. (Missiles only) If unusued, <code>pre_ignition_damage_titanarmor</code> applies instead. <code>pre_ignition_speed</code> <code>float</code> True Speed of the missile before ignition. (Missiles only) <code>pre_ignition_trail_effect</code> <code>string</code> True Trail effect shown on the missile before ignition. (Missiles only) <code>primary_fire_does_not_block_sprint</code> <code>bool</code> True Allows the main weapon to fire while sprinting. <code>printname</code> <code>string</code> True Name displayed on the weapon selection screen in loadout creation. <code>proficiency_average_additional_rest</code> <code>float</code> True Additional rest time between uses for NPCs with average proficiency. <code>proficiency_average_bias</code> <code>float</code> True Unknown. <code>proficiency_average_spreadscale</code> <code>float</code> True Scalar on spread for NPCs with average proficiency. Additional values exist for <code>poor</code>, <code>good</code>, <code>very_good</code>, and <code>perfect</code> proficiencies. <code>projectile_airburst_on_death</code> <code>bool</code> True Unknown. <code>projectile_adjust_to_gun_barrel</code> <code>bool</code> False Adjusts projectiles to visually launch from the weapon's barrel. <code>projectile_chasecamDistanceMax</code> <code>float</code> True Unknown. <code>projectile_chasecamMaxOrbitDepth</code> <code>float</code> True Unknown. <code>projectile_chasecamMaxPitchUp</code> <code>float</code> True Unknown. <code>projectile_chasecamOffsetForward</code> <code>float</code> True Forward vector offset of the camera from the projectile in killcams following it. <code>projectile_chasecamOffsetRight</code> <code>float</code> True Right vector offset of the camera from the projectile in killcams following it. <code>projectile_chasecamOffsetUp</code> <code>float</code> True Up vector offset of the camera from the projectile in killcams following it. <code>projectile_collide_with_owner</code> <code>bool</code> True Unknown. <code>projectile_collide_with_owner_grace_time</code> <code>float</code> True Unknown. <code>projectile_damage_reduction_per_bounce</code> <code>float</code> True Flat damage reduction per bounce. Unaffected by normal damage falloff. <code>projectile_damages_owner</code> <code>bool</code> True Enables/disables direct hit damage to the user from projectiles fired. <code>projectile_death_sound</code> <code>string</code> True Unknown. <code>projectile_do_predict_impact_effects</code> <code>bool</code> True Unknown. <code>projectile_drift_intensity</code> <code>float</code> True Unknown. <code>projectile_drift_windiness</code> <code>float</code> True Unknown. <code>projectile_first_person_offset_fraction</code> <code>float</code> True Adjusts how far projectiles fired travel at an offset angle before straightening in first person. <code>projectile_flight_sound</code> <code>string</code> True Sound effect played on projectiles in flight. <code>projectile_gravity_scale</code> <code>float</code> True Scalar on gravity applied to projectiles. <code>projectile_ignore_owner_damage</code> <code>bool</code> False Enables/disables owner damage to projectiles fired if they can take damage. <code>projectile_ignores_vortex</code> <code>string</code> False Determines the bounce behavior of projectiles upon hitting vortex entities and prevents them from being deleted. Held vortexes (i.e. Vortex and Thermal Shield) only check for <code>fall_vortex</code> and still delete projectiles with other values.<code>mirror</code>: Reverses horizontal velocity. (<code>&lt; -1, -1, 1 &gt;</code>)<code>drop</code>: Reverses and reduces horizontal velocity by 75% and sets vertical velocity to 0. (<code>&lt; -0.25, -0.25, 0 &gt;</code>)<code>fall</code>, <code>fall_vortex</code>: Reverses and reduces all velocity by 75%. (<code>&lt; -0.25, -0.25, -0.25 &gt;</code>) <code>projectile_inherit_owner_velocity_scale</code> <code>float</code> True Scalar on how much of the user's velocity is applied to the projectile when fired. <code>projectile_killreplay_enabled</code> <code>bool</code> True Allows killcams to follow the projectile that dealt the kill. <code>projectile_launch_pitch_offset</code> <code>float</code> True Pitch offset projectiles are fired at (positive = up). <code>projectile_launch_speed</code> <code>float</code> True Base speed of projectiles fired. <code>projectile_lifetime</code> <code>float</code> True The time in seconds projectiles last before disappearing. <code>projectile_max_deployed</code> <code>int</code> True The maximum number of projectiles that this weapon can have existing at once. Only works for weapons with tracked projectiles in script. <code>projectile_ricochet_max_count</code> <code>int</code> True The maximum number of ricochets projectiles can have before disappearing on terrain collision. <code>projectile_speed_reduction_factor</code> <code>float</code> True The fraction of speed lost by projectiles on ricochet. <code>projectile_straight_radius_max</code> <code>float</code> True Unknown. <code>projectile_straight_radius_min</code> <code>float</code> True Unknown. <code>projectile_straight_time_max</code> <code>float</code> True Unknown. <code>projectile_straight_time_min</code> <code>float</code> True Unknown. <code>projectile_trail_effect_0</code> <code>asset</code> True Trail effect shown on projectiles. Additional trail effects exist up to <code>projectile_trail_effect_4</code>. <code>projectile_visible_to_smart_ammo</code> <code>bool</code> True Allows projectiles to be targeted by smart weapons. <code>projectiles_per_shot</code> <code>int</code> True Has no native use. Used in script by some weapons to determine the number of projectiles fired per shot. <code>raise_from_sprint_time</code> <code>float</code> True The time in seconds of the weapon's raise animation after sprinting. Not the time before firing is allowed. Animations can allow firing sooner at various fractions of the full raise time. <code>raise_time</code> <code>float</code> True The time in seconds to raise the weapon when swapping from an offhand weapon. Does not include the time to raise the weapon after melee.Not the time before firing is allowed. Animations can allow firing sooner at various fractions of the full raise time. <code>readyhint</code> <code>string</code> True Usage hint text shown to the user in reminders. Used by Cores and inventory offhands (e.g. e-smoke, boosts). <code>readymessage</code> <code>string</code> True Large text shown to the user in reminders. Used by Cores and inventory offhands (e.g. e-smoke, boosts). <code>rechamber_time</code> <code>float</code> True The time in seconds to rechamber another round. Use by bolt-action weapons. Rechambering only begins after other delays (e.g. <code>fire_rate</code>, <code>burst_fire_delay</code>) are finished. <code>red_crosshair_range</code> <code>float</code> True The range within which the crosshair will turn red when aiming at an enemy. <code>regen_ammo_refill_rate</code> <code>float</code> True The rate in ammo per second at which ammo is regenerated in the magazine. <code>regen_ammo_refill_start_delay</code> <code>float</code> True The time in seconds since last shot fired before ammo regeneration begins. <code>regen_ammo_sound_range_name_1</code> <code>string</code> True Unknown. <code>regen_ammo_sound_range_start_1</code> <code>int</code> True Unknown. Additional values exist up to <code>regen_ammo_sound_range_[x]_3</code>. <code>regen_ammo_stockpile_drain_rate_when_charging</code> <code>float</code> True Unknown. <code>regen_ammo_stockpile_max_fraction</code> <code>float</code> True Unknown. <code>regen_ammo_while_firing</code> <code>bool</code> True Enables/disables incurring <code>regen_ammo_refill_start_delay</code> when firing a shot. <code>reload_alt_anim</code> <code>bool</code> True Enables/disables a flag on certain weapons to use an alternate reload animation. <code>reload_enabled</code> <code>bool</code> True Allows the weapon to be reloaded. <code>reload_is_segmented</code> <code>bool</code> True Enables/disables segmented reloads for the weapon. Segmented reloads do not have reload milestones. <code>reload_no_auto_if_ads_pressed</code> <code>bool</code> True Disables automatic reloads when the magazine is empty while aiming down sights. <code>reload_time</code> <code>float</code> True The time in seconds to complete the reload animation when reloading from a non-empty magazine. For segmented reloads, this includes the time to start the reloading animation and load one segment. <code>reload_time_late1</code> <code>float</code> True The time in seconds to complete the non-empty reload animation from the first reload milestone. Additional values exist for the i-th reload milestone up to <code>reload_time_late5</code>. <code>reloadempty_time</code> <code>float</code> True The time in seconds to complete the reload animation when reloading from an empty magazine. For segmented reloads, this includes the time to start the reloading animation and reload one segment. <code>reloadempty_time_late1</code> <code>float</code> True The time in seconds to complete the empty reload animation from the first reload milestone. Additional values exist for the i-th reload milestone up to <code>reloadempty_time_late5</code>. <code>reloadsegment_time_end</code> <code>float</code> True The time in seconds to complete the end animation of a segmented non-empty reload. The end segment does not prevent any actions and ends on sprint. <code>reloadsegment_time_loop</code> <code>float</code> True The time in seconds to complete one segment reload animation. <code>reloadsegmentempty_time_end</code> <code>float</code> True The time in seconds to complete the end animation of a segmented empty reload. The end segment does not prevent any actions and ends on sprint. <code>rui_crosshair_index</code> <code>int</code> True The index of a crosshair in the weapon's crosshair list to display. <code>rumble</code> <code>int</code> False Unknown. <code>scripted_projectile_max_timestep</code> <code>float</code> False Unknown. <code>shared_energy_charge_cost</code> <code>int</code> True Amount of shared energy consumed per frame (60 times per second) while charging. <code>shared_energy_cost</code> <code>int</code> True Amount of shared energy consumed on attack. <code>shortprintname</code> <code>string</code> True Name displayed for the weapon in most places (e.g. loadout screen, weapon flyouts, pickups). <code>show_grenade_indicator</code> <code>bool</code> False Disables the nearby grenade indicator shown to nearby targets on grenades fired. (Grenades only) <code>show_pre_modded_tracer</code> <code>bool</code> True Unknown. <code>silenced</code> <code>bool</code> True Unknown. <code>smart_ammo_active_shot_damage_multiplier</code> <code>float</code> True Unknown. <code>smart_ammo_active_shot_on_first_lock_only</code> <code>bool</code> True Unknown. <code>smart_ammo_active_shot_time</code> <code>float</code> True Unknown. <code>smart_ammo_alert_npc_fraction</code> <code>float</code> True The fraction of lock on at which NPCs will be alerted of the lock. <code>smart_ammo_allow_ads_lock</code> <code>bool</code> True Enables/disables smart ammo to lock on while aiming down sights. <code>smart_ammo_allow_hip_fire_lock</code> <code>bool</code> True Enables/disables smart ammo to lock on while hipfiring. <code>smart_ammo_allow_search_while_firing</code> <code>bool</code> True Allows smart ammo to lock on while firing. <code>smart_ammo_allow_search_while_inactive</code> <code>bool</code> True Allows smart ammo to lock on while the weapon is not held. <code>smart_ammo_alt_lock_style</code> <code>bool</code> True Enables/disables limiting total locks by charge amount (higher = less locks). <code>smart_ammo_always_do_burst</code> <code>bool</code> True Enables/disables always firing the maximum number of attacks per target. <code>smart_ammo_apply_new_target_delay_to_first_target</code> <code>bool</code> True Unknown. <code>smart_ammo_bounds_search_tick_interval</code> <code>int</code> False Unknown. <code>smart_ammo_draw_acquisition_lines</code> <code>bool</code> True Enables/disables displaying lines to target locks on the HUD. <code>smart_ammo_hold_and_reset_after_all_locks</code> <code>float</code> True Unknown. <code>smart_ammo_hud_lock_style</code> <code>string</code> True Determines the type of lock displayed. <code>smart_ammo_hud_type</code> <code>string</code> True Determines the smart ammo layout displayed on the HUD. <code>smart_ammo_humans_only</code> <code>bool</code> False Enables/disables targeting only humanoids. <code>smart_ammo_lock_effect_1p</code> <code>asset</code> True Visual effect displayed on the weapon to the user while acquiring locks. <code>smart_ammo_lock_effect_3p</code> <code>asset</code> True Visual effect displayed on the weapon to others while acquiring locks. <code>smart_ammo_lock_effect_attachment</code> <code>string</code> True The weapon part to attach the lock visual effect to. <code>smart_ammo_lock_type</code> <code>string</code> True Determines which target types the smart ammo can lock. <code>small</code>: Non-heavily armored targets.<code>large</code>: Heavily armored targets.<code>any</code>: Any target. <code>smart_ammo_looping_sound_acquiring</code> <code>string</code> True Sound effect played while smart ammo is acquiring locks. <code>smart_ammo_looping_sound_locked</code> <code>string</code> True Sound effect played while smart ammo is locked on to a target. <code>smart_ammo_max_targeted_burst</code> <code>int</code> True The maximum burst size fired at any individual target. <code>smart_ammo_max_targets</code> <code>int</code> True The maximum number of targets that can be locked simultaneously. <code>smart_ammo_max_trackers_per_target</code> <code>int</code> True The maximum number of locks per target. <code>smart_ammo_new_target_delay</code> <code>float</code> True Time in seconds before the smart weapon can start acquiring locks. Time starts from the moment the weapon is swapped to, even if it can't acquire locks due to deploy/raise time. <code>smart_ammo_npc_targets_must_be_tracked</code> <code>bool</code> True Requires targets to be locked for NPCs to fire the weapon. <code>smart_ammo_only_search_on_charge</code> <code>bool</code> True Enables/disables limiting lock acquisition to only while the weapon is charging. <code>smart_ammo_other_targets_must_be_tracked</code> <code>bool</code> True Unknown. <code>smart_ammo_player_targets_must_be_tracked</code> <code>bool</code> True Requires targets to be locked for players to fire the weapon. <code>smart_ammo_points_search_tick_interval</code> <code>int</code> False Unknown. <code>smart_ammo_search_angle</code> <code>float</code> True The angle of the smart ammo search cone. <code>smart_ammo_search_distance</code> <code>float</code> True The range of the smart ammo search cone. <code>smart_ammo_search_enemy_team</code> <code>bool</code> True Unknown. <code>smart_ammo_search_friendly_team</code> <code>bool</code> True Unknown. <code>smart_ammo_search_neutral_team</code> <code>bool</code> True Unknown. <code>smart_ammo_search_npcs</code> <code>bool</code> True Enables/disables smart ammo searching for NPC targets. <code>smart_ammo_search_phase_shift</code> <code>bool</code> True Unknown. <code>smart_ammo_search_players</code> <code>bool</code> True Enables/disables smart ammo searching for player targets. <code>smart_ammo_stick_to_fully_locked_targets</code> <code>bool</code> True Unknown. <code>smart_ammo_target_confirmed_sound</code> <code>string</code> True Sound effect played when a target is fully locked. <code>smart_ammo_target_confirming_sound</code> <code>string</code> True Sound effect played when a lock starts to be acquired. <code>smart_ammo_target_found_sound</code> <code>string</code> True Sound effect played when a new target enters the search cone. <code>smart_ammo_target_lost_sound</code> <code>string</code> True Sound effect played when locks on a target are lost. <code>smart_ammo_target_max_locks_heavy</code> <code>int</code> True The maximum number of locks on a heavily armored target. <code>smart_ammo_target_max_locks_normal</code> <code>int</code> True The maximum number of locks on a non-heavily armored target. If unused, acquires locks to deal enough damage to kill the target in a single burst (up to general maximum locks). <code>smart_ammo_target_npc_lock_factor</code> <code>float</code> True Unknown. <code>smart_ammo_targeting_time_max</code> <code>float</code> True The maximum time in seconds it takes to acquire a lock. <code>smart_ammo_targeting_time_max_npc</code> <code>float</code> True The maximum time in seconds it takes to acquire a lock on an NPC. <code>smart_ammo_targeting_time_min</code> <code>float</code> True The minimum time in seconds it takes to acquire a lock. <code>smart_ammo_targeting_time_min_npc</code> <code>float</code> True The minimum time in seconds it takes to acquire a lock on an NPC. <code>smart_ammo_targeting_time_modifier_cloaked</code> <code>float</code> True Scalar on lock on time when locking a cloaked target. <code>smart_ammo_targeting_time_modifier_projectile</code> <code>float</code> True Scalar on lock on time when locking projectiles. <code>smart_ammo_targeting_time_modifier_projectile_owner</code> <code>float</code> True Scalar on lock on time when locking projectiles from the user. <code>smart_ammo_titan_lock_point0</code> <code>string</code> False Unknown. Additional values for lock point exist up to <code>smart_ammo_titan_lock_point7</code>. <code>smart_ammo_titans_block_los</code> <code>bool</code> False Enables/disables titans blocking LoS for acquiring locks on other targets. <code>smart_ammo_track_cloaked_targets</code> <code>bool</code> True Allows smart ammo to lock on to cloaked targets. <code>smart_ammo_tracked_targets_check_visibility</code> <code>bool</code> True Unknown. <code>smart_ammo_tracker_status_effects</code> <code>bool</code> True Unknown. <code>smart_ammo_unlock_debounce_time</code> <code>float</code> True The time in seconds that locks on targets outside the search cone will be retained for before disappearing. Does not prevent locks from being cleared by looking too far away from the target. <code>smart_ammo_weapon_type</code> <code>&lt;special&gt;</code> True Determines the type of smart ammo fired. If unused, defaults to hitscan bullets. The only other class is <code>homing_missile</code>. <code>sound_dryfire</code> <code>string</code> True Sound effect played on offhand weapons when an attempted use or swap fails. <code>sound_pickup</code> <code>string</code> True Sound effect played when picking up the weapon. <code>sound_trigger_pull</code> <code>string</code> False Unknown. <code>sound_weapon_ready</code> <code>string</code> True Sound effect played on offhand weapons when they have reached the next <code>ammo_min_to_fire</code> multiple. <code>special_3p_attack_anim</code> <code>bool</code> False Enables/disables playing a non-standard animation for an offhand weapon on charge. <code>special_3p_attack_anim_after_charge</code> <code>bool</code> False Enables/disables playing a non-standard animation for an offhand weapon after charge ends. <code>spread_air_ads</code> <code>float</code> True The angle of the shot spread cone while aiming down sights in the air (includes wallrunning). <code>spread_air_hip</code> <code>float</code> True The angle of the shot spread cone while hipfiring in the air (includes wallrunning). <code>spread_crouch_ads</code> <code>float</code> True The angle of the shot spread cone while grounded, aiming down sights, and crouching or sliding. <code>spread_crouch_hip</code> <code>float</code> True The angle of the shot spread cone while grounded, hipfiring, and crouching or sliding <code>spread_decay_delay</code> <code>float</code> True The time in seconds since last shot fired before spread kick begins to decay. <code>spread_decay_rate</code> <code>float</code> True The amount of spread kick regressed per second when decaying. <code>spread_kick_on_fire_air_ads</code> <code>float</code> True The amount spread increases by per shot when aiming down sights in the air (includes wallrunning). <code>spread_kick_on_fire_air_hip</code> <code>float</code> True The amount spread increases by per shot when hipfiring in the air (includes wallrunning). <code>spread_kick_on_fire_crouch_ads</code> <code>float</code> True The amount spread increases by per shot when grounded, aiming down sights, and crouching or sliding. <code>spread_kick_on_fire_crouch_hip</code> <code>float</code> True The amount spread increases by per shot when grounded, hipfiring, and crouching or sliding. <code>spread_kick_on_fire_stand_ads</code> <code>float</code> True The amount spread increases by per shot when grounded, aiming down sights, and standing or sprinting. <code>spread_kick_on_fire_stand_hip</code> <code>float</code> True The amount spread increases by per shot when grounded, hipfiring, and standing or sprinting. <code>spread_lerp_speed</code> <code>float</code> True Unknown. <code>spread_max_kick_air_ads</code> <code>float</code> True The maximum amount of additional spread kick while aiming down sights in the air (includes wallrunning). <code>spread_max_kick_air_hip</code> <code>float</code> True The maximum amount of additional spread kick while hipfiring in the air (includes wallrunning). <code>spread_max_kick_crouch_ads</code> <code>float</code> True The maximum amount of additional spread kick while grounded, aiming down sights, and crouching or sliding. <code>spread_max_kick_crouch_hip</code> <code>float</code> True The maximum amount of additional spread kick while grounded, hipfiring, and crouching or sliding. <code>spread_max_kick_stand_ads</code> <code>float</code> True The maximum amount of additional spread kick while grounded, aiming down sights, and standing or sprinting. <code>spread_max_kick_stand_hip</code> <code>float</code> True The maximum amount of additional spread kick while grounded, hipfiring, and standing or sprinting. <code>spread_stand_ads</code> <code>float</code> True The angle of the shot spread cone while grounded, aiming down sights, and standing or walking. <code>spread_stand_hip</code> <code>float</code> True The angle of the shot spread cone while grounded, hipfiring, standing, and not moving. <code>spread_stand_hip_run</code> <code>float</code> True The angle of the shot spread cone while grounded, hipfiring, standing, and walking. <code>spread_stand_hip_sprint</code> <code>float</code> True The angle of the shot spread cone while grounded, hipfiring, and sprinting. <code>spread_time_to_max</code> <code>float</code> True Unknown. <code>spread_wallhanging</code> <code>float</code> True The angle of the shot spread cone while wallhanging. Optional. If unused, <code>spread_stand_hip</code> is applied instead. <code>spread_wallrunning</code> <code>float</code> True The angle of the shot spread cone while wallrunning. Optional. If unused, <code>spread_air</code> values are applied instead. <code>sprint_fractional_anims</code> <code>bool</code> True Unknown. <code>sprintcycle_time</code> <code>float</code> True Unknown. <code>stat_accuracy</code> <code>int</code> True The accuracy rating shown on the weapon selection screen in loadout creation. <code>stat_damage</code> <code>int</code> True The damage rating shown on the weapon selection screen in loadout creation. <code>stat_range</code> <code>int</code> True The range rating shown on the weapon selection screen in loadout creation. <code>stat_rof</code> <code>int</code> True The fire rate rating shown on the weapon selection screen in loadout creation. <code>stick_pilot</code> <code>bool</code> False Enables/disables player entities sticking to projectiles fired. Includes player-manned titans. <code>stick_titan</code> <code>bool</code> False Enables/disables titan entities sticking to projectiles fired. <code>stick_npc</code> <code>bool</code> False Enables/disables npc entities sticking to projectiles fired. Includes npc/auto titans. <code>sustained_discharge_allow_melee</code> <code>bool</code> True Allows the user to melee in the middle of a sustained discharge. <code>sustained_discharge_duration</code> <code>float</code> True The time in seconds that a sustained discharge lasts. <code>sustained_discharge_pulse_frequency</code> <code>float</code> True The number of attacks made per second during a sustained discharge. <code>sustained_discharge_require_input</code> <code>bool</code> True Whether or not to stop the sustained discharge when the attack button is let go. <code>sustained_discharge_want_pulse_callbacks</code> <code>bool</code> True Determines whether to use the <code>OnWeaponSustainedDischargePulse</code> callback or not. <code>sustained_laser_attachment</code> <code>string</code> True The weapon part to attach the sustained laser effect to. <code>sustained_laser_effect_1p</code> <code>asset</code> True The visual effect shown to the user when the sustained laser attacks. <code>sustained_laser_effect_3p</code> <code>asset</code> True The visual effect shown to others when the sustained laser attacks. <code>sustained_laser_effect_loops</code> <code>bool</code> True Enables/disables looping on the sustained laser effects. <code>sustained_laser_enabled</code> <code>bool</code> True Enables/disables firing the sustained laser on sustained discharge. <code>sustained_laser_impact_distance</code> <code>float</code> True The minimum distance for <code>sustained_laser_impact_effect</code> to be applied. <code>sustained_laser_impact_effect</code> <code>asset</code> True The visual effect shown where the sustained laser impacts terrain. <code>sustained_laser_impact_effect_loops</code> <code>bool</code> True Enables/disables looping on <code>sustained_laser_impact_effect</code>. <code>sustained_laser_new_surface_impact_effect_table</code> <code>asset</code> True Unknown. <code>sustained_laser_radial_iterations</code> <code>int</code> True The number of radial iterations the sustained laser is composed of. <code>sustained_laser_radial_step</code> <code>int</code> True Scalar on the number of evenly spaced lasers created per radial iteration. 1 radial iteration is required for the single center beam.Successive iterations generate <code>2 ^ (i - 2) * sustained_laser_radial_step</code> evenly spaced lasers in a circle, where <code>i</code> is the current iteration.E.g. 3 iterations and 3 step makes 1 center beam in the 1<sup>st</sup> iteration, 3 beams in the 2<sup>nd</sup> iteration, and 6 beams in the 3<sup>rd</sup> iteration. <code>sustained_laser_radius</code> <code>float</code> True The radius increase in sustained laser circles as the radial iteration increases. <code>sustained_laser_range</code> <code>float</code> True The maximum range of the sustained laser. <code>sway_</code> Various False A large set of values controlling view model sway when held. <code>threat_scope_bounds_height</code> <code>float</code> True Used instead of tagname to manually specify threat scope height. <code>threat_scope_bounds_tagname1</code> <code>string</code> True Determines one corner of the threat scope. <code>threat_scope_bounds_tagname2</code> <code>string</code> True Determines one corner of the threat scope. <code>threat_scope_bounds_width</code> <code>float</code> True Used instead of tagname to manually specify threat scope width. <code>threat_scope_enabled</code> <code>bool</code> True Enables/disables threat scope. <code>threat_scope_fadeWithDistance</code> <code>bool</code> True Unknown. <code>threat_scope_zoomfrac_end</code> <code>bool</code> True Unknown. <code>threat_scope_zoomfrac_start</code> <code>bool</code> True Unknown. <code>titanarmor_critical_hit_required</code> <code>bool</code> True Enables/disables requiring critical hits to damage titans. <code>toss_overhead_time</code> <code>float</code> True Unknown. <code>toss_pullout_time</code> <code>float</code> True The time in seconds to pull out the toss-able object. <code>toss_time</code> <code>float</code> True The time in seconds to throw the toss-able object. <code>tossholdsprintcycle_time</code> <code>float</code> True Unknown. <code>tracer_effect</code> <code>asset</code> True Tracer effect shown to others when a hitscan shot is fired. <code>tracer_effect_first_person</code> <code>asset</code> True Tracer effect shown to the user when a hitscan shot is fired. <code>trap_warning_enemy_fx</code> <code>asset</code> False Has no native use. The visual effect shown to enemy players when a trap light effect is played on projectiles. <code>trap_warning_friendly_fx</code> <code>asset</code> False Has no native use. The visual effect shown to allied players when a trap light effect is played on projectiles. <code>trigger_snipercam</code> <code>bool</code> False Unknown. <code>ui1_draw_cloaked</code> <code>bool</code> True Enables/disables showing ui element 1 while cloaked. <code>ui1_enable</code> <code>bool</code> True Enables/disables showing ui element 1. Additional values exist for ui elements up to <code>ui8</code>. <code>viewdrift_ads_air_scale_pitch</code> <code>float</code> True The maximum absolute value pitch the user view will drift by when aiming down sights in the air. <code>viewdrift_ads_crouch_scale_pitch</code> <code>float</code> True The maximum absolute value pitch the user view will drift by when grounded, aiming down sights, and crouched or sliding. <code>viewdrift_ads_speed_pitch</code> <code>float</code> True Scalar on how quickly pitch viewdrift shifts while aiming down sights. <code>viewdrift_ads_stand_scale_pitch</code> <code>float</code> True The maximum absolute value pitch the user view will drift by when grounded, aiming down sights, and standing or sprinting. <code>viewdrift_hipfire_air_scale_pitch</code> <code>float</code> True The maximum absolute value pitch the user view will drift by when hipfiring in the air. <code>viewdrift_hipfire_crouch_scale_pitch</code> <code>float</code> True The maximum absolute value pitch the user view will drift by when grounded, hipfiring, and crouched or sliding. <code>viewdrift_hipfire_speed_pitch</code> <code>float</code> True Scalar on how quickly pitch viewdrift shifts while hipfiring. <code>viewdrift_hipfire_stand_scale_pitch</code> <code>float</code> True The maximum absolute value pitch the user view will drift by when grounded, hipfiring, and standing or sprinting. The same values exist for yaw viewdrift. <code>viewkick_ads_weaponFraction</code> <code>float</code> True Scalar on how much the weapon/reticle recoils separate from viewpoint while aiming down sights (i.e. how much your viewpoint counters the recoil). <code>viewkick_ads_weaponFraction_vmScale</code> <code>float</code> True Scalar on how much the weapon viewmodel recoils while aiming down sights. <code>viewkick_air_scale_ads</code> <code>float</code> True Scalar on recoil generated while aiming down sights when the user is not grounded (includes wallrunning). <code>viewkick_duck_scale</code> <code>float</code> True Scalar on recoil generated while crouching. <code>viewkick_hipfire_weaponFraction</code> <code>float</code> True Scalar on how much the weapon/reticle recoils separate from viewpoint while hipfiring (i.e. how much your viewpoint counters the recoil). <code>viewkick_hipfire_weaponFraction_vmScale</code> <code>float</code> True Scalar on how much the weapon viewmodel recoils while hipfiring. <code>viewkick_hover_scale</code> <code>float</code> True Scalar on recoil generated while using pilot Hover. <code>viewkick_move_scale</code> <code>float</code> True Scalar on recoil generated while moving. <code>viewkick_perm_pitch_base</code> <code>float</code> True The base amount of vertical recoil (positive = down). Unaffected by <code>viewkick_spring</code>. <code>viewkick_perm_pitch_random</code> <code>float</code> True The maximum absolute value of randomness added to base vertical recoil. Unaffected by <code>viewkick_spring</code>. <code>viewkick_perm_pitch_random_innerexclude</code> <code>float</code> True Unknown. <code>viewkick_pitch_base</code> <code>float</code> True The base amount of vertical recoil (positive = down). <code>viewkick_pitch_random</code> <code>float</code> True The maximum absolute value of randomness added to base vertical recoil. <code>viewkick_pitch_softScale</code> <code>float</code> True Scalar on soft vertical recoil, which applies recoil over time. <code>viewkick_pitch_hardScale</code> <code>float</code> True Scalar on hard vertical recoil, which applies recoil instantly. The same values exist for yaw (positive = left) <code>viewkick_roll_base</code> <code>float</code> True The absolute value base amount of roll. <code>viewkick_roll_hardScale</code> <code>float</code> True Scalar on hard roll recoil. <code>viewkick_roll_randomMax</code> <code>float</code> True The maximum amount of random roll added to base roll. <code>viewkick_roll_randomMin</code> <code>float</code> True The minimum amount of random roll added to base roll. <code>viewkick_roll_softScale</code> <code>float</code> True Scalar on soft roll recoil. Appears to simply be weaker than hard roll recoil. Roll values are unaffected by other scalars, such as <code>viewkick_scale</code> and <code>weaponFraction</code>. <code>viewkick_scale_min_hipfire</code> <code>float</code> True Scalar on recoil generated when hipfiring at minimum LERP. <code>viewkick_scale_max_hipfire</code> <code>float</code> True Scalar on recoil generated when hipfiring at maximum LERP. <code>viewkick_scale_min_ads</code> <code>float</code> True Scalar on recoil generated when aiming down sights at minimum LERP. <code>viewkick_scale_max_ads</code> <code>float</code> True Scalar on recoil generated when aiming down sights at maximum LERP. <code>viewkick_scale_valuePerShot</code> <code>float</code> True How much each shot advances the LERP. <code>viewkick_scale_valueLerpStart</code> <code>float</code> True The minimum value for the LERP. <code>viewkick_scale_valueLerpEnd</code> <code>float</code> True The maximum value for the LERP. <code>viewkick_scale_valueDecayDelay</code> <code>float</code> True The time in seconds since last shot fired before LERP begins to decay. <code>viewkick_scale_valueDecayRate</code> <code>float</code> True The amount of LERP regressed per second when decaying. <code>viewkick_spring</code> <code>string</code> True Specifies the class of viewkick spring, which dampens recoil above certain values. <code>viewmodel</code> <code>asset</code> True The model of the weapon shown to the user when held. <code>viewmodel_offset_ads</code> <code>vector</code> True The position offset of the viewmodel while aiming down sights. <code>viewmodel_offset_hip</code> <code>vector</code> True The position offset of the viewmodel while hipfiring. <code>viewpunch_multiplier</code> <code>float</code> False Unknown. <code>vortex_absorb_effect</code> <code>asset</code> True Shot model shown to the vortex user when a vortex weapon catches this weapon's shot. <code>vortex_absorb_effect_third_person</code> <code>asset</code> True Shot model shown to others when a vortex weapon catches this weapon's shot. <code>vortex_absorb_sound</code> <code>string</code> False Sound effect played to the vortex user when a vortex weapon catches this weapon's shot. <code>vortex_absorb_sound_1p_vs_3p</code> <code>string</code> False Sound effect played to others when a vortex weapon catches this weapon's shot. <code>vortex_drain</code> <code>float</code> True Fraction of charge taken from vortex weapons that catch a shot from this weapon. If caught by Ion's Vortex, drains a fraction of her energy instead. <code>vortex_impact_effect</code> <code>asset</code> True The impact effect table referenced for vortex collisions. Vortex collisions refers to standard blocking vortex entities, such as Particle Wall and Gun Shield. <code>vortex_refire_behavior</code> <code>string</code> False Defines the behavior for this weapon's projectiles when caught/reflected by Vortex shield. <code>absorb</code>: Disappears when caught.<code>bullet</code>: High speed (12000) and slightly higher than moderate spread.<code>explosive_round</code>: Moderate speed (8000) and moderate spread.<code>rocket</code>: Low speed (1800) and low spread.<code>grenade</code>: Low speed (1500) and high spread with 1.25s fuse time.<code>grenade_long_fuse</code>: Low speed (1500) and high spread with 10s fuse time. <code>wave_max_count</code> <code>int</code> False The number of steps wave attacks should take. <code>wave_step_dist</code> <code>float</code> False The distance each step moves a wave attack forward. <code>weaponClass</code> <code>string</code> False Determines the type of entity that normally uses the weapon. <code>human</code>: Humanoid entities.<code>titan</code>: Titans.<code>other</code>: Anything else (e.g. heavily armored NPCs, turrets) <code>weaponSubClass</code> <code>string</code> False Unknown. Takes <code>rifle</code>, <code>smg</code>, <code>lmg</code>, <code>sidearm</code>, <code>sniper</code>, <code>projectile_shotgun</code>, <code>rocket</code>, <code>shotgun</code>, or <code>autolock</code>. <code>weaponType</code> <code>string</code> False Determines the type of offhand the weapon is. (Offhands/melees only) <code>melee</code>: Melee weapon.<code>shoulder</code>: Offhand pulled from the shoulder used as an offensive ability. (Excluding Energy Siphon)<code>defense</code>: Held or instant offhand used as a defensive ability.<code>tactical</code>: Held or instant offhand used as a utility ability. (Excluding Tether Trap)<code>titan_core</code>: Titan Core weapon.<code>anti_titan</code>: Turret weapon. <code>zoom_angle_shift_pitch</code> <code>float</code> True Unknown. <code>zoom_angle_shift_yaw</code> <code>float</code> True Unknown. <code>zoom_effects</code> <code>bool</code> True Unknown. <code>zoom_fov</code> <code>float</code> True The FoV the weapon will zoom to when aiming down sights. Affected by custom player FoV scale. Effectively zooms to <code>( zoom FoV / base FoV * player FoV scale )</code>Base FoV is 70 for pilots and 75 for titans. <code>zoom_fov_viewmodel</code> <code>float</code> True Unknown. <code>zoom_scope_frac_end</code> <code>float</code> True Unknown. <code>zoom_scope_frac_start</code> <code>float</code> True Unknown. <code>zoom_time_in</code> <code>float</code> True The time in seconds to fully zoom in from hipfire. <code>zoom_time_out</code> <code>float</code> True The time in seconds to fully zoom out from aiming down sights. <code>zoom_toggle_fov</code> <code>float</code> True The FoV the weapon will zoom to when aiming down sights with a zoom toggle on. <code>zoom_toggle_lerp_time</code> <code>float</code> True The time in seconds for toggleable zoom to change zoom FoV. <code>zoomfrac_autoattack</code> <code>float</code> True The fraction of zoom above which the weapon will continually attack"},{"location":"Modding/guides/reversing/","title":"Reverse Engineering Guides","text":"<p>Guides to explain the process of reverse engineering of the game.</p>"},{"location":"Modding/guides/reversing/squirrelreversing/","title":"Pushing Values to the SQVM Stack","text":"<p>Before starting to reverse engineer how to push values to the Squirrel stack, it's recommended to read the Squirrel documentation, especially the Embedding- and API Reference.</p> <p>A lot of Respawn's fork of Squirrel is very similar to Squirrel3, especially the Squirrel API functions.</p>"},{"location":"Modding/guides/reversing/squirrelreversing/#setup","title":"Setup","text":"<p>Before you can start reverse engineering you need to install software to disassemble and decompile the binaries. This guide will use Ghidra, an open source reverse engineering tool developed by the NSA.</p> <p>Since code decompiled by Ghidra is often closer to the raw assembly than the original code, you might want to use IDA for decompilation. Keep in mind that IDA is not open source and the free version is lacking a lot of features and only offers a cloud decompiler.</p> <ol> <li> <p>Download the latest Ghidra archive from the Github releases page. Usually the archive is called like <code>ghidra_[version]_PUBLIC_[date]</code>.</p> </li> <li> <p>Unzip the archive in a new folder.</p> </li> <li> <p>Run <code>ghidraRun.bat</code> on windows or if you're on Linux make <code>ghidraRun</code> executable and run it. On Linux, there's a Flatpak image available as well.</p> </li> <li> <p>Create a new project under <code>File &gt; New Project</code> and select <code>Non-Shared Project</code>, then hit next. Afterwards select a location for the project and a name like <code>Titanfall2</code>.</p> </li> <li> <p>Import the binary you want to reverse with <code>File &gt; Import File</code>. This guide will use <code>server.dll</code>, found in your Titanfall2 install directory. Don't change the settings ghidra auto detects when importing the file.</p> </li> <li> <p>Open <code>server.dll</code> in the Ghidra project overview. When Ghidra asks you if you want to analyse the file now, click yes. You do not need to change any analysis settings.</p> </li> <li> <p>Wait for Ghidra to finish the analysis.</p> </li> </ol>"},{"location":"Modding/guides/reversing/squirrelreversing/#understanding-native-squirrel-closures","title":"Understanding native Squirrel Closures","text":"<p>In vanilla Squirrel you can push values with functions like <code>sq_pushbool</code>. Since Respawn changed a lot in the SQVM, you should expect these API functions to be different as well.</p> <p>To start you'll need a simple Squirrel function that is executing native code without any calculations or similar, like <code>IsServer</code>, or <code>IsClient</code>. These Squirrel functions are registered in native code and return <code>true</code> / <code>false</code> if the script VM is being ran in the <code>SERVER</code> or <code>CLIENT</code>.</p> <p>You can search for a string in memory with <code>Search &gt; Memory</code>. Select <code>String</code> as the format you're searching for and enter <code>IsServer</code> as the search value.</p> <p>The first occurence is at <code>server.dll+0x2b44f3</code>. If you wait for the function to be decompiled, you'll see the string in this code:</p> <pre><code>    _DAT_181055f60 = \"IsServer\";\n    _DAT_181055f68 = \"IsServer\";\n    _DAT_181055fb8 = 0;\n    _DAT_181055f90 = 0;\n    _DAT_181055f98 = 0;\n    _DAT_181055fc0 = FUN_18029a630;\n    _DAT_181055f88 = _DAT_181055f88 &amp; 0xff;\n    _DAT_181055f70 = ZEXT816(0x1808fa7f8);\n    _DAT_181055f80 = 0;\n    _DAT_181055f8c = 0;\n    _DAT_181055f9c = 6;\n</code></pre> <p>Because the squirrel function executes native code, the callback <code>FUN_18029a630</code> is probably where it's located. You can double click the reference to decompile the function.</p> <pre><code>    undefined4 FUN_18029a630(undefined8 param_1)\n    {\n        char cVar1;\n        undefined4 uVar2;\n\n        uVar2 = 1;\n        FUN_180003710(param_1,1);\n        cVar1 = FUN_18001d840(param_1);\n        if (cVar1 != '\\0') {\n            uVar2 = 0xffffffff;\n        }\n        return uVar2;\n    }\n</code></pre> <p>From this you can assume that native closures in squirrel_re still use the <code>SQRESULT</code> convention, because the closure returns <code>-1</code> if <code>FUN_18001d840</code> returns <code>NULL</code>, which is typically an error and <code>1</code> if nothing happens. It's also obvious that either <code>FUN_180003710</code> or <code>FUN_18001d840</code> pushes a boolean to the stack. It's probably <code>FUN_180003710</code> because it takes an extra parameter but you can check <code>IsClient</code> at <code>server.dll+0x29a4d0</code> as a reference.</p> <pre><code>    undefined4 FUN_18029a4d0(undefined8 param_1)\n    {\n        char cVar1;\n        undefined4 uVar2;\n\n        FUN_180003710(param_1,0);\n        cVar1 = FUN_18001d840(param_1);\n        uVar2 = 1;\n        if (cVar1 != '\\0') {\n            uVar2 = 0xffffffff;\n        }\n        return uVar2;\n    }\n</code></pre> <p>This is virtually the same, except that <code>FUN_180003710</code> is being called with a <code>0</code>. This makes it pretty obvious that <code>FUN_180003710</code> is the equivalent of <code>sq_pushbool</code>. Decompile the function, then right click the function and select <code>Edit Function Signature</code>. Right now the signature looks like this:</p> <pre><code>    void FUN_180003710(longlong param_1, int param_2)\n</code></pre> <p><code>param_1</code> has to be a pointer to the Squirrel VM, because a pointer on 64x systems is 8 bytes long (the same as <code>longlong</code>) and the <code>HSquirrelVM</code> struct is larger than 8 bytes.</p> <p>The second parameter has to be the value that will be pushed to the VM as a boolean, since it was <code>1</code> in <code>IsServer</code> (which always returns <code>true</code>) and <code>0</code> in <code>IsClient</code> which always returns <code>false</code>.</p> <p>You can change the signature now to this, to make code using the function more readable. Because <code>HSquirrelVM</code> isn't defined yet, the type needs to stay <code>longlong</code> for now.</p> <pre><code>    void sq_pushbool(longlong sqvm, int value)\n</code></pre>"},{"location":"Modding/guides/scripting/","title":"Scripting tutorials","text":"<p>In depth tutorials</p>"},{"location":"Modding/guides/scripting/custommenus/","title":"Creating a custom Menu","text":"<p>This tutorial will explain how to create a mod that adds a new menu that's viewable by a footer in the main menu.</p>"},{"location":"Modding/guides/scripting/custommenus/#setup","title":"Setup","text":"<p>First, create a new folder with this <code>mod.json</code>:</p> <pre><code>    {\n        \"Name\": \"CustomMenuTutorial\",\n        \"Description\": \"Custom menu tutorial\",\n        \"LoadPriority\": 1,\n        \"Scripts\": [\n            {\n                \"Path\": \"ui/custom_menu.nut\",\n                \"RunOn\": \"UI\",\n                \"UICallback\": {\n                    \"Before\": \"AddCustomMenu\"\n                }\n            }\n        ]\n    }\n</code></pre> <p>Then create <code>custom_menu.nut</code> in <code>./mod/scripts/vscripts/ui</code>.</p>"},{"location":"Modding/guides/scripting/custommenus/#minimal-example","title":"Minimal Example","text":"<p>Create <code>AddCustomMenu</code> in <code>custom_menu.nut</code> like this and make it global:</p> <pre><code>    global function AddCustomMenu\n\n    void function AddCustomMenu()\n    {\n        AddMenu( \"CustomMenu\", $\"resource/ui/menus/custommenu.menu\", CustomMenu_Init )\n    }\n</code></pre> <p><code>AddCustomMenu</code> will get called when the UI vm is initializing and instantiate your menu. You can access your menu with <code>GetMenu( \"CustomMenu\" )</code> after it has been initialized.</p> <p>Next, create the file that defines the layout of your menu. It's already referenced in the above code at <code>$\"resource/ui/menus/custommenu.menu\"</code>. Create the file <code>./mod/resource/ui/menus/custommenu.menu</code> and paste this code in it.</p> .menu configuration <pre><code>    resource/ui/menus/custommenu.menu\n    {\n        menu\n        {\n            ControlName Frame\n            xpos 0\n            ypos 0\n            zpos 3\n            wide f0\n            tall f0\n            autoResize 0\n            visible 1\n            enabled 1\n            pinCorner 0\n            PaintBackgroundType 0\n            infocus_bgcolor_override \"0 0 0 0\"\n            outoffocus_bgcolor_override \"0 0 0 0\"\n\n            Vignette // Darkened frame edges\n            {\n                ControlName ImagePanel\n                InheritProperties MenuVignette\n            }\n\n            Title // The title of this menu\n            {\n                ControlName Label\n                InheritProperties MenuTitle\n                labelText \"#CUSTOM_MENU_TITLE\"\n            }\n\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    /// Content\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n            SomeLabel // A label that is placed in the middle of the screen\n            {\n                ControlName Label\n\n                labelText \"Some Label\"\n\n                auto_wide_tocontents 1 // Set width automatically relative to the label content\n\n                xpos %50\n                ypos %50\n            }\n\n            SomeButton // A button that is placed directly beneath the label\n            {\n                ControlName RuiButton\n                InheritProperties RuiSmallButton\n\n                tall 50\n                wide 250\n\n                labelText \"Some Button\"\n                textAlignment center\n\n                pin_to_sibling SomeLabel\n                pin_corner_to_sibling TOP\n                pin_to_sibling_corner BOTTOM\n            }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    /// Footer\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n            FooterButtons // Allow adding footers to this menu\n            {\n                ControlName   CNestedPanel\n                InheritProperties FooterButtons\n            }\n        }\n    }\n</code></pre> <p>Now you'll need to define <code>CustomMenu_Init</code>. This is the function previously defined that contains all initializations needed for this menu.</p> <p>First, create an instantiated struct for variables that should be available in the scope of your custom menu script.</p> <pre><code>    struct {\n        var menu\n    } file\n</code></pre> <p>At the moment, this struct can only contain your menu. To set it, edit <code>AddCustomMenu</code> like this:</p> <pre><code>     void function AddCustomMenu()\n     {\n        AddMenu( \"CustomMenu\", $\"resource/ui/menus/custommenu.menu\", CustomMenu_Init )\n+       file.menu = GetMenu( \"CustomMenu\" )\n     }\n</code></pre> <p>Now, define <code>CustomMenu_Init</code>. It doesn't need to be global.</p> <pre><code>    void function CustomMenu_Init()\n    {\n        AddMenuFooterOption( file.menu, BUTTON_B, \"#B_BUTTON_BACK\", \"#BACK\" )\n    }\n</code></pre> <p>This adds a footer to your menu, that allows the user to navigate back.</p>"},{"location":"Modding/guides/scripting/custommenus/#adding-a-footer-to-the-main-menu","title":"Adding a footer to the Main menu","text":"<p>Currently, there is no way to access your menu. You can open your (or any other menu) with <code>AdvanceMenu</code>.</p> <pre><code>    AdvanceMenu( GetMenu( \"CustomMenu\" ) )\n</code></pre> <p>This is useful for callbacks triggered by button presses like from footers. To add a footer to the Main menu, first edit your <code>mod.json</code> code callbacks:</p> <pre><code>     \"Scripts\": [\n        {\n            \"Path\": \"ui/custom_menu.nut\",\n            \"RunOn\": \"UI\",\n            \"UICallback\": {\n+               \"Before\": \"AddCustomMenu\", // &lt;- Notice the added comma\n+               \"After\": \"AddCustomMenuFooter\"\n            }\n        }\n     ]\n</code></pre> <p>We need a new callback that's run after all menus are initialized to add any footers to them. Create the global function <code>AddCustomMenuFooter</code> in <code>custom_menu.nut</code> like this:</p> <pre><code>    void function AddCustomMenuFooter()\n    {\n        AddMenuFooterOption(\n            GetMenu( \"MainMenu\" ), // Get the main menu. We want to add a footer to this one. Change this if you want to add a footer to another menu\n            BUTTON_X, // This sets the gamepad button that will trigger the click callback defined later\n            PrependControllerPrompts( BUTTON_X, \" Custom Menu\" ), // This is the text that will show as the label of the footer if a gamepad is used\n            \"Custom Menu\", // This is the label text of the footer if no gamepad is used\n            void function( var button ) // This is the click callback.\n            {\n                /*\n                    This is an anonymous function.\n                    It will be run every time the footer is pressed.\n                */\n                AdvanceMenu( file.menu )\n            }\n        )\n    }\n</code></pre>"},{"location":"Modding/guides/scripting/custommenus/#scripting-menu-logic","title":"Scripting Menu Logic","text":""},{"location":"Modding/guides/scripting/custommenus/#adding-a-counter","title":"Adding a Counter","text":"<p>We'll use the button we defined earlier in the <code>.menu</code> file to increase a number of clicks and the label to show how often the user has clicked that button.</p> <p>first, add <code>someLabel</code> and <code>clicks</code> to the <code>file</code> struct. Then define the label in the <code>AddCustomMenu</code> and add a callback to the button.</p> <pre><code>     struct {\n        var menu\n+           var someLabel\n+           int clicks\n     } file\n\n     void function AddCustomMenu()\n     {\n        AddMenu( \"CustomMenu\", $\"resource/ui/menus/custommenu.menu\", CustomMenu_Init )\n        file.menu = GetMenu( \"CustomMenu\" )\n+       file.someLabel = Hud_GetChild( file.menu, \"SomeLabel\" )\n\n+       var someButton = Hud_GetChild( file.menu, \"SomeButton\" )\n+       Hud_AddEventHandler( someButton, UIE_CLICK, OnSomeButtonClick )\n     }\n</code></pre> <p>Now you need to define the <code>OnSomeButtonClick</code> callback that's triggered when the button is activated.</p> <pre><code>    void function OnSomeButtonClick( var button )\n    {\n        file.clicks++\n        Hud_SetText( file.someLabel, format( \"clicked the button %i times\", file.clicks ) )\n    }\n</code></pre>"},{"location":"Modding/guides/scripting/custommenus/#adding-a-reset-button","title":"Adding a Reset Button","text":"<p>First you need to add a definition in your <code>custommenu.menu</code> file:</p> <pre><code>    ResetButton\n    {\n        ControlName RuiButton\n        InheritProperties RuiSmallButton\n\n        tall 50\n        wide 250\n\n        labelText \"Reset Counter\"\n        textAlignment center\n\n        pin_to_sibling SomeButton\n        pin_corner_to_sibling TOP\n        pin_to_sibling_corner BOTTOM\n    }\n</code></pre> <p>Then add a <code>UIE_CLICK</code> callback for the button. It also makes sense to move the code that updates the label text to it's own function so it can be reused by the reset button.</p> <pre><code>     void function AddCustomMenu()\n     {\n        AddMenu( \"CustomMenu\", $\"resource/ui/menus/custommenu.menu\", CustomMenu_Init )\n        file.menu = GetMenu( \"CustomMenu\" )\n        file.someLabel = Hud_GetChild( file.menu, \"SomeLabel\" )\n\n        var someButton = Hud_GetChild( file.menu, \"SomeButton\" )\n+       var resetButton = Hud_GetChild( file.menu, \"ResetButton\" )\n\n        Hud_AddEventHandler( someButton, UIE_CLICK, OnSomeButtonClick )\n+       Hud_AddEventHandler( resetButton, UIE_CLICK, OnResetButtonClick )\n     }\n\n     void function OnSomeButtonClick( var button )\n     {\n        file.clicks++\n    -   Hud_SetText( file.someLabel, format( \"clicked the button %i times\", file.clicks ) )\n+       UpdateClickLabel()\n     }\n\n     void function OnResetButtonClick( var button )\n     {\n        file.clicks = 0\n+       UpdateClickLabel()\n     }\n\n+   void function UpdateClickLabel()\n+   {\n+       Hud_SetText( file.someLabel, format( \"clicked the button %i times\", file.clicks ) )\n+   }\n</code></pre>"},{"location":"Modding/guides/scripting/custommenus/#resetting-the-counter-when-the-menu-is-closed","title":"Resetting the Counter when the Menu is closed","text":"<p>You can add callbacks for menu events, for example when a menu is closed or opened.</p> <p>If you want to reset the counter if the menu is closed, edit <code>AddCustomMenu</code> like this:</p> <pre><code>     void function AddCustomMenu()\n     {\n        AddMenu( \"CustomMenu\", $\"resource/ui/menus/custommenu.menu\", CustomMenu_Init )\n        file.menu = GetMenu( \"CustomMenu\" )\n        file.someLabel = Hud_GetChild( file.menu, \"SomeLabel\" )\n\n        var someButton = Hud_GetChild( file.menu, \"SomeButton\" )\n        var resetButton = Hud_GetChild( file.menu, \"ResetButton\" )\n\n        Hud_AddEventHandler( someButton, UIE_CLICK, OnSomeButtonClick )\n        Hud_AddEventHandler( resetButton, UIE_CLICK, OnResetButtonClick )\n\n+       AddMenuEventHandler( file.menu, eUIEvent.MENU_CLOSE, OnCloseCustomMenu )\n     }\n</code></pre> <p>And define the callback <code>OnCloseCustomMenu</code> to simply call <code>OnResetButtonClick</code>.</p> <pre><code>    void function OnCloseCustomMenu()\n    {\n        OnResetButtonClick( null )\n    }\n</code></pre>"},{"location":"Modding/guides/scripting/gamemodemods/","title":"Creating gamemodes","text":"<p>Creating a gamemode is significantly more complex than making mutators. The main differences are the number of things you must define in order to create a functioning gamemode.</p> <p>For example, the client localisation, the way the gamemode is defined (FFA, TDM, etc), the scoring system, respawn system (FFA or TDM spawnpoints) and team mechanics must all be considered.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#the-modjson","title":"The <code>mod.json</code>","text":"<p>The <code>mod.json</code> is responsible for governing when, and where your mod is loaded, and follows a layout that is fairly complicated at first glance. However, once you get the hang of it, it should be fairly easy to use.</p> <pre><code>    {\n        \"Name\" : \"SimpleRandomiser\",\n        \"Description\" : \"A randomiser gamemode that randomizes your loadouts!\",\n        \"Version\": \"0.1.0\",\n        \"LoadPriority\": 1,\n</code></pre> <p>The script above defines the pubic and listed details of the mod.</p> <pre><code>    \"Scripts\": [\n        {\n            \"Path\": \"gamemodes/_gamemode_simplerandomiser.nut\",\n        \"RunOn\": \"SERVER &amp;&amp; MP\"\n        },\n        {\n            \"Path\": \"gamemodes/cl_gamemode_simplerandomiser.nut\",\n            \"RunOn\": \"CLIENT &amp;&amp; MP\"\n        },\n        {\n            \"Path\": \"sh_gamemode_simplerandomiser.nut\",\n            \"RunOn\": \"MP\",\n            \"ClientCallback\": {\n                \"Before\": \"simplerandomiser_init\"\n            },\n            \"ServerCallback\": {\n                \"Before\": \"simplerandomiser_init\"\n            }\n        }\n    ],\n</code></pre> <p>The script above defines both what functions to run, when to run them and WHERE to run them, </p> <p>The first one being <code>_gamemode_simplerandomiser.nut</code> runs the server scripts, which handles the portion of everything related to the player, such as taking their weapons and replacing it with a different one.</p> <p>Second one being <code>cl_gamemode_simplerandomiser.nut</code> is where the client scripts run to perform stuff locally on the player's game, such as playing music, receiving announcement texts from the server and so on.</p> <p>Lastly, <code>sh_gamemode_simplerandomiser.nut</code> is a shared script between server and client, in this case it runs your <code>simplerandomiser_init</code> in order to assign many variables for the server and client to \"know\" about this gamemode. </p> <p>For example, both server and client needs to know whether if this gamemode exists in the private match settings, the scoring HUD and system, the spawnpoints configuration and many more.</p> <pre><code>        \"Localisation\": [\n            \"resource/simplerandomiser_localisation_%language%.txt\"\n        ]\n    }\n</code></pre> <p>This defines the path to the language file, and its main use is to localize strings such as the announcement texts, gamemode and so on.</p> <p>Name this file <code>mod.json</code>, and it should go in the mods root folder, that being /yourmodname.</p> <p>Here's what the end result would look like:</p> <pre><code>    {\n        \"Name\" : \"SimpleRandomiser\",\n        \"Description\" : \"SimpleRandomiser\",\n        \"Version\": \"0.1.0\",\n        \"LoadPriority\": 1,\n        \"Scripts\": [\n        {\n            \"Path\": \"gamemodes/_gamemode_simplerandomiser.nut\",\n        \"RunOn\": \"SERVER &amp;&amp; MP\"\n        },\n        {\n            \"Path\": \"gamemodes/cl_gamemode_simplerandomiser.nut\",\n            \"RunOn\": \"CLIENT &amp;&amp; MP\"\n        },\n        {\n            \"Path\": \"sh_gamemode_simplerandomiser.nut\",\n            \"RunOn\": \"MP\",\n            \"ClientCallback\": {\n                \"Before\": \"simplerandomiser_init\"\n            },\n            \"ServerCallback\": {\n                \"Before\": \"simplerandomiser_init\"\n            }\n        }\n    ],\n        \"Localisation\": [\n            \"resource/simplerandomiser_localisation_%language%.txt\"\n        ]\n    }\n</code></pre>"},{"location":"Modding/guides/scripting/gamemodemods/#language-file","title":"Language file","text":"<p>This follows a fairly simple template, the only thing of note is that you often get strange behaviour using <code>UTF-8</code> when saving the file instead of using <code>UTF-16 LE</code>.</p> <pre><code>    \"lang\"\n    {\n        \"Language\" \"english\"\n        \"Tokens\"\n        {\n            \"MODE_SETTING_CATEGORY_SIMPLERANDOMISER\" \"Simple Randomiser\"\n            \"SIMPLERANDOMISER\" \"Randomise\"\n        }\n    }\n</code></pre> <p>Name this file <code>simplerandomiser_localisation_english.txt</code> and place it in the <code>yourmodsname/mod/resource/</code> folder.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#shared-functions","title":"Shared functions","text":"<p>Let's begin the process by first creating the file <code>sh_gamemode_simplerandomiser.nut</code> and making the core components of the gamemode, which is to define the gamemode properties.</p> <pre><code>    global function simplerandomiser_init // initializing functions\n    global const string GAMEMODE_SIMPLERANDOMISER = \"rand\" \n    // we want a short term to use which allows server owners to \n    // select our gamemode without typing the entire name\n    // also makes it easier for us lol\n\n    void function simplerandomiser_init()\n    {\n        // start defining what to do before the map loads on this gamemode\n    AddCallback_OnCustomGamemodesInit( CreateGamemodeRand ) // define various properties such as name, desc, so on\n    AddCallback_OnRegisteringCustomNetworkVars( RandRegisterNetworkVars ) // server callbacks stuff\n    }\n\n    void function CreateGamemodeRand()\n    {\n    GameMode_Create( GAMEMODE_SIMPLERANDOMISER )\n    GameMode_SetName( GAMEMODE_SIMPLERANDOMISER, \"#GAMEMODE_SIMPLERANDOMISER\" ) // localizations will be handled later\n    GameMode_SetDesc( GAMEMODE_SIMPLERANDOMISER, \"#PL_rand_desc\" )\n    GameMode_SetGameModeAnnouncement( GAMEMODE_SIMPLERANDOMISER, \"grnc_modeDesc\" )\n    GameMode_SetDefaultTimeLimits( GAMEMODE_SIMPLERANDOMISER, 10, 0.0 ) // a time limit of 10 minutes\n    GameMode_AddScoreboardColumnData( GAMEMODE_SIMPLERANDOMISER, \"#SCOREBOARD_SCORE\", PGS_ASSAULT_SCORE, 2 ) // dont fuck with it\n    GameMode_AddScoreboardColumnData( GAMEMODE_SIMPLERANDOMISER, \"#SCOREBOARD_PILOT_KILLS\", PGS_PILOT_KILLS, 2 ) // dont fuck with it\n    GameMode_SetColor( GAMEMODE_SIMPLERANDOMISER, [147, 204, 57, 255] ) // dont fuck with it\n\n    AddPrivateMatchMode( GAMEMODE_SIMPLERANDOMISER ) // add to private lobby modes\n\n    AddPrivateMatchModeSettingEnum(\"#PL_rand\", \"rand_enableannouncements\", [\"#SETTING_DISABLED\", \"#SETTING_ENABLED\"], \"1\")\n    // creates a togglable riff whether or not we want to announce a text to the client\n    AddPrivateMatchModeSettingArbitrary(\"#PL_rand\", \"rand_announcementduration\", \"3\")\n    // Creates a riff with an arbitrary numerical value for how long the announcement text remains on screen\n    // These riffs can be accessed from server configs or from the private match settings screen, under the \"Simple Randomiser\" category\n\n\n    // set this to 25 score limit default\n    GameMode_SetDefaultScoreLimits( GAMEMODE_SIMPLERANDOMISER, 25, 0 )\n\n    #if SERVER\n        GameMode_AddServerInit( GAMEMODE_SIMPLERANDOMISER, GamemodeRand_Init ) // server side initalizing function\n        GameMode_SetPilotSpawnpointsRatingFunc( GAMEMODE_SIMPLERANDOMISER, RateSpawnpoints_Generic )\n        GameMode_SetTitanSpawnpointsRatingFunc( GAMEMODE_SIMPLERANDOMISER, RateSpawnpoints_Generic )\n                // until northstar adds more spawnpoints algorithm, we are using the default.\n    #elseif CLIENT\n        GameMode_AddClientInit( GAMEMODE_SIMPLERANDOMISER, ClGamemodeRand_Init ) // client side initializing function\n    #endif\n    #if !UI\n        GameMode_SetScoreCompareFunc( GAMEMODE_SIMPLERANDOMISER, CompareAssaultScore ) \n                // usually compares which team's score is higher and places the winning team on top of the losing team in the scoreboard\n    #endif\n    }\n\n    void function RandRegisterNetworkVars()\n    {\n    if ( GAMETYPE != GAMEMODE_SIMPLERANDOMISER )\n        return\n\n    Remote_RegisterFunction( \"ServerCallback_Randomiser\" )\n        // will come in useful later when we want the server to communicate to the client\n        // for example, making an announcement appear on the client\n    }\n</code></pre> <p>The comments should hopefully explain what most of everything does, but just to summarize:</p> <ul> <li>we defined the gamemode's name and description using a string that we will localize ourselves later.</li> <li>we set the default scoring method, what spawnpoint algorithm to use, as well as the scoreboard size.</li> <li>we defined server callbacks, which we will use later on in the server scripts portion of this gamemode.</li> </ul> <p>Now that we're done, name this file <code>sh_gamemode_simplerandomiser.nut</code> and place it in the <code>yourmodsname/mod/scripts/vscripts/gamemodes</code> folder.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#server-side-function","title":"Server-side function","text":"<p>Now that we're down with defining the gamemode, its time to focus on the component on that makes the gamemode function in-game. For this, it will be mostly handled by the server scripts, so head into <code>_gamemode_simplerandomiser.nut</code> to begin writing the randomizing script.</p> <pre><code>    global function GamemodeRand_Init\n\n    void function GamemodeRand_Init()\n    {\n        #if SERVER\n    SetLoadoutGracePeriodEnabled( false ) // prevent modifying loadouts with grace period\n    SetWeaponDropsEnabled( false ) // prevents picking up weapons on the ground\n        AddCallback_OnPlayerRespawned( GiveRandomGun )\n        #endif\n    }\n</code></pre> <p>As you may have noticed, checking if it is a server is a special case, so we use <code>#if SERVER</code> and <code>#endif</code> instead of the usual <code>if(thing){stuff}</code></p> <p>Now that our initial function is created, we now have the game triggering <code>GiveRandomGun</code> when a player spawns, but we don't have any such function, so let's begin creating one. </p> <p>Firstly, we need to know what weapons we can equip.  For this we define an array:</p> <pre><code>    array&lt;string&gt; pilotWeapons = [\"mp_weapon_alternator_smg\",\n                                  \"mp_weapon_autopistol\",\n                                  \"mp_weapon_car\",\n                                  \"mp_weapon_dmr\"]\n</code></pre> <p>Here we have defined an array with only 4 weapons in it, you can make this list however you like but remember to separate all but the last item with a <code>,</code></p>"},{"location":"Modding/guides/scripting/gamemodemods/#randomise-function","title":"Randomise function","text":"<p>As we already know its going to call the function <code>GiveRandomGun</code> when a player respawns, let's define that now. First we strip any existing weapons:</p> <pre><code>    void function GiveRandomGun(entity player)\n    {\n        foreach ( entity weapon in player.GetMainWeapons() )\n            player.TakeWeaponNow( weapon.GetWeaponClassName() )\n</code></pre> <p>This iterates through each weapon (that being the primary, secondary and anti-titan weapons) and removes them individually. </p> <p>Then lets give them a new, random weapon by selecting a random item from our previous array:</p> <pre><code>    player.GiveWeapon( pilotWeapons[ RandomInt( pilotWeapons.len() ) ] )\n</code></pre> <p>Now, remember the server callback that we defined earlier in <code>sh_gamemode_simplerandomiser.nut</code>? Let's put that to use. We are going to make it so the player receives an announcement whenever they have their weapons randomized.</p> <pre><code>    // checks if the toggle option is set to enabled\n    if ( GetCurrentPlaylistVarInt( \"rand_enableannouncements\", 1 ) == 1 )\n        Remote_CallFunction_NonReplay( player, \"ServerCallback_Randomiser\" ) // call the function that will be used client-side\n</code></pre> <p>Overall, the server script should look like this.</p> <pre><code>    global function GamemodeRand_Init\n\n    void function GamemodeRand_Init()\n    {\n        #if SERVER\n    SetLoadoutGracePeriodEnabled( false ) // prevent modifying loadouts with grace period\n    SetWeaponDropsEnabled( false ) // prevents picking up weapons on the ground\n        AddCallback_OnPlayerRespawned( GiveRandomGun )\n        #endif\n    }\n\n    array&lt;string&gt; pilotWeapons = [\"mp_weapon_alternator_smg\",\n                                  \"mp_weapon_autopistol\",\n                                  \"mp_weapon_car\",\n                                  \"mp_weapon_dmr\"]\n\n    void function GiveRandomGun(entity player)\n    {\n        foreach ( entity weapon in player.GetMainWeapons() )\n            player.TakeWeaponNow( weapon.GetWeaponClassName() )\n\n        player.GiveWeapon( pilotWeapons[ RandomInt( pilotWeapons.len() ) ] )\n\n        // checks if the toggle option is set to enabled\n        if ( GetCurrentPlaylistVarInt( \"rand_enableannouncements\", 1 ) == 1 )\n            Remote_CallFunction_NonReplay( player, \"ServerCallback_Randomiser\", GetCurrentPlaylistVarFloat( \"rand_announcementduration\", 3 ) ) // call the function that will be used client-side\n    }\n</code></pre> <p>Name this file <code>_gamemode_simplerandomiser.nut</code> and place it in the <code>yourmodsname/mod/scripts/vscripts/gamemodes</code> folder as well. Make sure to double check that all spellings are correct in your mod as everything is case-sensitive.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#client-side-functions","title":"Client-side functions","text":"<p>Lastly, for your <code>cl_gamemode_simplerandomiser.nut</code>, we are going to utilize the callback functions from earlier, as well as add some music to play during the gamemode.</p> <pre><code>    global function ClGamemodeRand_Init\n    global function ServerCallback_Randomiser\n\n    void function ClGamemodeRand_Init()\n    {\n        RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_INTRO, \"music_mp_freeagents_intro\", TEAM_IMC )\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_INTRO, \"music_mp_freeagents_intro\", TEAM_MILITIA )\n\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_WIN, \"music_mp_freeagents_outro_win\", TEAM_IMC )\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_WIN, \"music_mp_freeagents_outro_win\", TEAM_MILITIA )\n\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_DRAW, \"music_mp_freeagents_outro_lose\", TEAM_IMC )\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_DRAW, \"music_mp_freeagents_outro_lose\", TEAM_MILITIA )\n\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LOSS, \"music_mp_freeagents_outro_lose\", TEAM_IMC )\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LOSS, \"music_mp_freeagents_outro_lose\", TEAM_MILITIA )\n\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_THREE_MINUTE, \"music_mp_freeagents_almostdone\", TEAM_IMC )\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_THREE_MINUTE, \"music_mp_freeagents_almostdone\", TEAM_MILITIA )\n\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LAST_MINUTE, \"music_mp_freeagents_lastminute\", TEAM_IMC )\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LAST_MINUTE, \"music_mp_freeagents_lastminute\", TEAM_MILITIA )\n    }\n\n    void function ServerCallback_Randomiser( float duration )\n    {\n        AnnouncementData announcement = Announcement_Create( \"#RAND_RANDOMIZED\" )\n    Announcement_SetSubText( announcement, \"#RAND_RANDOMIZED_DESC\" )\n    Announcement_SetTitleColor( announcement, &lt;0,0,1&gt; )\n    Announcement_SetPurge( announcement, true )\n    Announcement_SetPriority( announcement, 200 ) //Be higher priority than Titanfall ready indicator etc\n    Announcement_SetSoundAlias( announcement, SFX_HUD_ANNOUNCE_QUICK )\n    Announcement_SetDuration( announcement, duration )\n    Announcement_SetStyle( announcement, ANNOUNCEMENT_STYLE_QUICK )\n    AnnouncementFromClass( GetLocalViewPlayer(), announcement )\n    }\n</code></pre> <p>What this script does is quite simple. It registers default music to play during the intro portion, when winning, drawing or losing, as well as the event when the timelimit reaches 3 minutes or 1 minute left.</p> <p>Also, it also displays an announcement towards the player when they have their weapons randomized.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#localization","title":"Localization","text":"<p>\"So we're all done with the scripting stuff, right? That means we can finally run the gamemode itself!\"</p> <p>Technically, yes, you could. But it wouldn't look pretty. Remember all those strings with the # symbol in front of them? We have to localize them first so it displays correctly.</p> <p>Hence, open your <code>simplerandomiser_localisation_english.txt</code> which is located in the <code>yourmodsname/mod/resource/</code> folder.</p> <pre><code>    \"lang\"\n    {\n    \"Language\" \"english\"\n    \"Tokens\"\n    {\n        \"PL_rand\" \"Simple Randomiser\" // displays in the lobby settings\n                \"rand_enableannouncements\" \"Toggle announcements\" // describe the togglable setting\n        \"rand_announcementduration\" \"Announcement duration\" // describe the numerical setting\n        \"PL_rand_lobby\" \"Simple Randomiser Lobby\" // displays in lobby\n        \"PL_rand_desc\" \"Your weapons are randomised! Fight and win!\" // displays in the description of the gamemode in the lobby\n        \"PL_rand_hint\" \"Your weapons are randomised! Fight and win!\" // displays in the scoreboard of the gamemode ingame\n        \"PL_rand_abbr\" \"RAND\"\n        \"GAMEMODE_TBAG\" \"Simple Randomiser\" // displays in the loading screen\n                \"RAND_RANDOMIZED\" \"Weapons Randomized\" // displays in the announcement text\n                \"RAND_RANDOMIZED_DESC\" \"Fight and win!\" // displays below the announcement text, as a description\n    }\n    }\n</code></pre> <p>Alright, we're finally done! However, there's just one thing missing, which is to let the game know what maps are available for this gamemode to play on.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#maps","title":"Maps","text":"<p>We will need to create a file called <code>playlists_v2.txt</code> and place it in <code>yourmodsname/keyvalues</code> folder.</p> <p>Yes, you will need to create a folder called <code>keyvalues</code> which is separate from the <code>mod</code> folder that we placed all our scripts and localization inside.</p> <p>Next, inside this <code>playlists_v2.txt</code>, we will need to allow/disallow what maps can the gamemode be played on.</p> <pre><code>    playlists\n    {\n    Gamemodes\n    {\n        rand\n        {\n            inherit defaults\n            vars\n            {\n                name #PL_rand\n                lobbytitle #PL_rand_lobby\n                description #PL_rand_desc\n                hint #PL_rand_hint\n                abbreviation #PL_rand_abbr\n                max_players 12\n                max_teams 2\n                classic_mp 1\n\n                gamemode_score_hint #GAMEMODE_SCORE_HINT_TDM\n            }\n        }\n        }\n        Playlists\n    {\n        rand\n        {\n            inherit defaults\n            vars\n            {\n                name #PL_rand\n                lobbytitle #PL_rand_lobby\n                description #PL_rand_desc\n                abbreviation #PL_rand_abbr\n                image ps\n                //mixtape_slot 7\n                mixtape_timeout 120\n                visible 0\n            }\n            gamemodes\n            {\n                rand\n                {\n                        maps\n                    {\n                            mp_forwardbase_kodai 1\n                                                mp_grave 1\n                                                mp_homestead 1\n                                                mp_thaw 1\n                                                mp_black_water_canal 1\n                                                mp_eden 1\n                                                mp_drydock 1\n                                                mp_crashsite3 1\n                                                mp_complex3 1\n                                                mp_angel_city 1\n                                                mp_colony02 1\n                                                mp_glitch 1\n                        mp_lf_stacks 1\n                        mp_lf_deck 1\n                        mp_lf_meadow 1\n                        mp_lf_traffic 1\n                        mp_lf_township 1\n                        mp_lf_uma 1\n                        mp_relic02 1\n                        mp_wargames 1\n                        mp_rise 1\n                                                mp_coliseum 1\n                                                mp_coliseum_column 1\n                    }\n                }\n            }\n        }\n        }\n    }\n</code></pre> <p>There isn't much to say here except that we enabled this gamemode to played on all maps. So if this gamemode is set to auto-rotate maps in a server, it will go from one map to the next in order. You could disable certain maps by changing the <code>1</code> to a <code>0</code>.</p> <p>Another thing to note is that under the <code>Playlists</code> tab, there is an <code>image</code> slot. You could change the image that displays when selecting a gamemode in the private match lobby. You can find out what the keyvalues for the other images by checking out other gamemodes in <code>Northstar.Custom/keyvalues/playlists_v2.txt</code>.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#closing-words","title":"Closing words","text":"<p>And that should be all you need in order to create a gamemode. Thanks for reading all the way to this point, and I hope you have learnt a thing or two.</p> <p>If you ever have a question or two, feel free to head into the Northstar Discord and ask about in #modding-chat.</p> <ul> <li>Revised by <code>x3Karma#6984</code></li> </ul>"},{"location":"Modding/guides/tools/","title":"Modding Tools","text":""},{"location":"Modding/guides/tools/BIKVideoModding/","title":"BIK Video Modding","text":""},{"location":"Modding/guides/tools/BIKVideoModding/#prequisites-to-video-modding","title":"Prequisites to Video Modding","text":"<ul> <li>The RAD Video Tools installed on your PC</li> </ul> <p>Note</p> <p>The ZIP file containing the installer is password protected, you can find it on the download page</p>"},{"location":"Modding/guides/tools/BIKVideoModding/#converting-the-video","title":"Converting the Video","text":"<ol> <li>Open RAD Video Tools</li> <li>Browse to your Video in the File Browser and select it</li> <li>Press \"Bink it!\"</li> <li>In the newly opened window press \"Bink\"</li> <li>Wait for the Conversion to finish, then press done</li> </ol> <p>The Video will now be in the same folder as the original one and converted to a .bik file</p>"},{"location":"Modding/guides/tools/BIKVideoModding/#making-a-main-menu-video-mod","title":"Making a Main Menu Video Mod","text":"<ol> <li>Convert a Video to .bik</li> <li>Rename the newly converted .bik to <code>menu_act01.bik</code></li> <li>Make a mod according to Getting Started</li> <li>Copy the .bik to the following path in your mod folder:     <pre><code>    author.mod/\n    \u251c\u2500 mod.json\n    \u251c\u2500 media/\n    \u2502  \u251c\u2500 menu_act01.bik\n</code></pre></li> <li>Your mod should now load a custom Main Menu Video</li> </ol>"},{"location":"Modding/guides/tools/BIKVideoModding/#playing-a-custom-bik-video","title":"Playing a Custom BIK Video","text":"<p>Not only can you replace the pre-existing BIK files Respawn uses, you can also make your own custom ones and play them whenever you like with console commands.</p> <p><code>playvideo [video name] [horizontal resolution] [vertical resolution]</code> will play the named BIK file within the specified resolution.</p> <p>EX. <code>playvideo mycoolvideo 100 100</code> will play the BIK file named \"mycoolvideo\" within a 100x100 resolution square in the top-left corner.</p> <p>The <code>stopvideos</code> command will end any currently playing BIK videos.</p> <p>With these commands, BIK files can be used as a substitute for custom audio outside of audio overrides, though they of course can only be played directly on the client and have no directional audio. Videos running in a 1x1 resolution in the top-left corner will be nearly unnoticeable outside of whatever audio they're playing.</p> <p>Some things to note while using custom BIK videos:</p> <ul> <li>BIKs will always play anchored to the top-left corner of the screen.</li> <li>BIK sound is only affected by the Master volume slider.</li> <li>If a resolution within the playvideo command is not entered or is invalid, it will be auto-filled by whatever the current window's resolution is. Any number from 1 to 32767 is valid. Anything higher will cause the video to not play.</li> <li>Videos will NOT stretch based on resolution, any extra space is just black.</li> <li>You can also convert files like .mp3 and .wav into .bik. However, the audio quality in-game diminishes considerably.</li> <li>While BIKs are allowed to have transparency, Titanfall 2 does not process it appropriately.</li> <li>BIK videos will layer on top of each other based on when their command is run. There is no way to change how they are layered.</li> <li>When a BIK video ends, if there are any other videos currently running above it, they will be forced to disappear for a single frame right before that video ends. This causes a noticeable flicker for any BIKs that are being used for actual video rather than just sound.</li> <li>While the resolution used in the playvideo command does not affect performance, the actual video's resolution can. It's recommended your actual video's resolution is lowered only to what is needed. In the case of only using BIKs for sound, it's recommended you lower resolution and framerate as much as possible with whatever video editor you use.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/","title":"MDL Modding","text":""},{"location":"Modding/guides/tools/MDLModding/#mdl-overview","title":"MDL Overview","text":"<p>Model (MDL) is the extension for Source's proprietary model format. It defines the structure of the model along with animation, bounding box, hit box, materials, mesh and LOD information. Unlike other Source games in Titanfall 2 files like the .phy, .vtx, .vvd etc. are not separate files and are instead included in the .mdl file.</p> <p>VALVe developer docs \"Model\"</p>"},{"location":"Modding/guides/tools/MDLModding/#editing-an-existing-model","title":"Editing an existing Model","text":"<p>While creating an entire Model from scratch is possible it would be an extremely long and tedious task. Instead its recommended to use an existing Model as your base.</p>"},{"location":"Modding/guides/tools/MDLModding/#prequisites","title":"Prequisites","text":"<ul> <li>Blender (min. 2.92)</li> <li>Blender Source Tools     (refer to Download page for install instructions)</li> <li>Crowbar (min 0.74)<pre><code>- One of the following on Steam:\n- [Portal 2](https://store.steampowered.com/app/620/Portal_2/) (and its Authoring Tools [Portal 2 SDK](https://developer.valvesoftware.com/wiki/Authoring_Tools/SDK_(Portal_2)))\n- [SourceFilmMaker](https://store.steampowered.com/app/1840/Source_Filmmaker/) (FREE)\n</code></pre> <ul> <li>mdlshit</li> <li>Harmony VPK (optional if you want to extract the model yourself)</li> </ul> </li> </ul> <p>Note</p> <p>This Guide is tailored towards users with atleast some experience with Blender. If you are new to Blender I recommend you to first familiarize yourself with the basics of Blender. There are many tutorials on the Internet that can help you with that. Especially the following topics are important for modifying or creating game assets:</p> <p>\u2022   Modeling \u2022   UV Mapping  \u2022   Texturing  \u2022   Rigging </p> <p>These things work in conjunction with each other and are all important for creating a game ready model. An understanding of these topics is very helpful for proper usage of Blender.</p>"},{"location":"Modding/guides/tools/MDLModding/#workflow","title":"Workflow","text":"<p>The workflow for editing a model is as follows:</p> <ul> <li>Extract the model using HARMONY VPK or Downloading the model from the Titanfall 2 Skin Modding Repo</li> <li>Decompile the model using CROWBAR</li> <li>Importing the model in BLENDER</li> <li>Editing the model to our liking</li> <li>Assigning a material to parts of our model</li> <li>Exporting the model from BLENDER</li> <li>Compiling using CROWBAR</li> <li>Converting the MDL file with other output files using MDLSHIT</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#short-video-guide","title":"Short Video Guide","text":"<p>This is a short video guide on MDL Editing, there are some discrepancies between the video and this guide but the general workflow is the same. Its relatively quick but shows the process quite well.</p>"},{"location":"Modding/guides/tools/MDLModding/#blender","title":"Blender","text":"<p>Blender will be used to edit the model. It is a free and open-source 3D computer graphics software toolset with many features. It is widely used for animation, modeling, scene creation, and game development.</p> <p>The Source Tools add-on for Blender allows us to import and export Source Engine assets. It is a community-driven project that aims to provide users with a convenient way to import and export Source Engine assets from and to Blender, for a wide range of applications, including animation, modeling, scene creation, and game development.</p> <p>We will use both in conjunction to edit the model.</p>"},{"location":"Modding/guides/tools/MDLModding/#crowbar","title":"Crowbar","text":"<p>Crowbar is a tool written by ZeqMacaw. It is used to decompile and compile Source Engine assets, such as models, textures, and sounds.</p> <p>We will use it to decompile and compile the model.</p>"},{"location":"Modding/guides/tools/MDLModding/#mdlshit","title":"MDLShit","text":"<p>MDLShit is a tool written by headassbtw. It is used to combine the MDL file with the other output files from Crowbar.</p> <p>We will use it to combine the MDL file with the other output files from Crowbar.</p>"},{"location":"Modding/guides/tools/MDLModding/#harmony-vpk","title":"Harmony VPK","text":"<p>Harmony VPK is a tool written by the Harmony Team. It's an electron-based GUI for VPKTool, and is used to extract files from VPK files.</p> <p>We will use it to extract the model from the game files.</p>"},{"location":"Modding/guides/tools/MDLModding/#workflow-in-detail","title":"Workflow in Detail","text":"<p>In this section we will go through the workflow in detail by using the Flatline as an example. We will add a cube to the side of the Flatline and assign a custom material to it.</p>"},{"location":"Modding/guides/tools/MDLModding/#step-1-extracting","title":"Step 1: Extracting","text":"<p>Note</p> <p>Can be skipped if you downloaded the model from the Titanfall 2 Skin Modding Repo.</p> <ul> <li>Open HARMONY VPK.</li> <li>On the top right click on the <code>Open VPK</code> button.</li> <li>Navigate to the location of your Titanfall 2 installions <code>/vpk/</code> folder.</li> <li>Open the <code>.vpk</code> file you want to extract (most multiplayer weapons are in <code>client_mp_common.bsp.pak000_000.vpk</code> since you most likely want one of those).</li> <li>You will now see a list of all files in the <code>.vpk</code> file on the left side looking something like this:</li> </ul> <pre><code>    RootDir\n    \u251c\u2500\u2500 materials\n    \u251c\u2500\u2500 resource\n    \u251c\u2500\u2500 cfg\n    \u251c\u2500\u2500 scripts\n    \u251c\u2500\u2500 models\n    \u251c\u2500\u2500 maps\n    \u2514\u2500\u2500 depot\n</code></pre> <ul> <li>Navigate to the <code>models</code> folder (this is where all models in this file are located).</li> <li>Navigate to the folder of the model you want to extract (for example <code>weapons/vinson</code> which is the internal name for the Flatline).</li> <li>Select the <code>.mdl</code> file you want to extract (for example <code>ptpov_vinson.mdl</code>).</li> </ul> <p>Note</p> <p>Weapons are mostly split into two models, one for the first person view(<code>ptpov_</code> and the world model <code>w_</code>.</p> <p><code>ptpov</code> is used when you are in first person.</p> <p><code>w_</code> is used when the weapon is viewed in the world (for example when its dropped on the ground).</p> <ul> <li>Click on the <code>Unpack</code> button on the top right.</li> <li>You are now prompted to select a folder to extract the model to, select a folder of your choice and click on <code>Select Folder</code>.</li> <li>Your model is now extracted and you can close Harmony VPK.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-2-decompiling-the-model","title":"Step 2: Decompiling the model","text":"<p>Note</p> <p>In order to use Crowbar the way we will we need to setup a few things first.</p> <p>This step only needs to be done once</p>"},{"location":"Modding/guides/tools/MDLModding/#setup-crowbar-one-time-only","title":"Setup Crowbar (one time only)","text":"<ul> <li>Uppon first launch select the <code>Set Up Games</code> tab on the top left.</li> <li>Select either <code>Portal 2</code> or <code>Source Filmmaker</code> in the dropdown menu on the top.</li> <li>Make sure your Library Path is set to the location of the Steam library you have the game installed in on the bottom.</li> <li> <p>The <code>Game Setup</code> section should now be filled with the correct paths.</p> </li> <li> <p>Select the <code>Decompile</code> tab on the top.</p> </li> <li> <p>In this tab make sure the following settings are set:</p> </li> <li> <p><code>MDL input</code>: <code>File</code></p> </li> <li><code>Output to</code>: <code>Subfolder (of MDL input)</code> (change the text in the box to the right of that to <code>decompiled</code>)</li> </ul> <p>Check the following boxes:</p> <ul> <li><code>QC file</code></li> <li><code>Each $texturegroup skin-familiy on single line</code></li> <li><code>Include $definebones lines (typical for view models)</code></li> <li><code>Use MixedCase for keywords</code></li> <li><code>Reference mesh SMD file</code></li> <li><code>Physics mesh SMD file</code></li> <li><code>Vertex animation VTA file (flexes)</code></li> <li><code>Procedural bones VRD file</code></li> <li><code>Bone animation SMD files</code></li> <li><code>Place in \"anims\" subfolder</code></li> <li> <p><code>Prefix mesh file names with model name</code></p> </li> <li> <p>Select the <code>Compile</code> tab on the top.</p> </li> <li> <p>In this tab make sure the following settings are set:</p> </li> <li> <p><code>QC input</code>: <code>File</code> </p> </li> <li> <p><code>Output to</code>: <code>Subfolder (of QC input)</code> (change the text in the box to the right of that to <code>compiled</code>)   Check the following boxes:</p> </li> <li> <p><code>No P4</code></p> </li> <li><code>Verbose</code></li> </ul> <p>Set <code>Game that has the model compiler</code> to the game you selected in the <code>Set Up Games</code> tab on the top left.</p> <ul> <li>This concludes the setup for crowbar these settings will be saved and you will not need to do this again.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#decompiling-the-model","title":"Decompiling the model","text":"<ul> <li>Click on the <code>Browse</code> button on the top right.</li> <li>Navigate to the folder you extracted the model to in the previous step.</li> <li>Select the <code>.mdl</code> file you want to decompile (for example <code>ptpov_vinson.mdl</code>).</li> <li>Press the <code>Decompile</code> button.</li> <li>Crowbar now decompiles the model and outputs the files to the <code>decompiled</code> folder in the same folder as the <code>.mdl</code> file.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-3-importing-to-blender","title":"Step 3: Importing to Blender","text":"<ul> <li>Open Blender.</li> <li>In the top left corner select <code>File</code> -&gt; <code>Import</code> -&gt; <code>Source Engine</code>.</li> <li>Navigate to the folder you extracted the model to in the previous step and select the <code>.qc</code> file (for example <code>ptpov_vinson.qc</code>) and uncheck the <code>Import Animations</code> box and check the <code>Create Collections</code> box.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-4-editing-the-model","title":"Step 4: Editing the model","text":"<p>Note</p> <p>This step is entirely up to you and depends on what you want to do with the model. In this example we will add a cube to the side of the Flatline and assign a custom material to it.</p> <p>Before editing let me explain how the model is structured in Blender. By selecting a qc file in the import menu we told Blender to import all SMD files referenced in that qc file. This means that the model is split into multiple collections based on the SMD files referenced in the qc file. For example the <code>ptpov_vinson.qc</code> file references the <code>ptpov_vinson_v_vinson.smd</code> file which contains the model for the Flatline. For now the smd file will be imported into blender when you import the qc file, later we will change this to be an dmx file instead.</p> <ul> <li>Select the <code>ptpov_vinson_v_vinson.smd</code> mesh in the outliner.</li> <li>Enter <code>EDIT Mode</code>.</li> <li>In <code>EDIT Mode</code> add a cube to the side of the Flatline.</li> <li>Exit <code>EDIT Mode</code>.</li> <li>This cube should now be part of the <code>ptpov_vinson_v_vinson</code> mesh.</li> <li>Make sure that you now weight paint the cube to the correct bones.</li> <li> <p>Note</p> On Weapons the most safe bone to weight paint to is <code>def_c_base</code> since it is the root bone of the weapon. This means that the cube will always move with the weapon. If you want the cube to move with a specific part of the weapon you can also weight paint it to the bone that moves that part of the weapon. Again, remember to somewhat learn how rigging works in Blender to properly understand this process. </li> <li> <p>Now that we have our cube we want to assign a material to it.</p> </li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-5-assigning-materials","title":"Step 5: Assigning Materials","text":"<p>This step has two ways of being done, using a <code>qc</code> file that references <code>smd</code> files or references <code>dmx</code> files. Usually the <code>smd</code> way is what you will want todo when first importing and editing a model, however if you want to reimport a EDITED model you will need to use the <code>dmx</code> way.</p>"},{"location":"Modding/guides/tools/MDLModding/#assigning-materials-smd","title":"Assigning Materials (smd)","text":"<p>This is the way you will usually do it when first importing a vanilla model that you have not edited yet.</p> <ul> <li>Enter <code>EDIT Mode</code>.</li> <li>Select the cube.</li> <li>In the <code>Material Properties</code> tab on the right click on the <code>New</code> button.</li> <li>Set the name of the material to its path in the game files, to learn more about materials and how to make them see RPak Modding or VTF Modding. (for example <code>models\\weapons_r2\\coolmaterial\\cool_material</code>)</li> <li>Exit <code>EDIT Mode</code>.</li> <li>Your cube should now have the material assigned to it ingame after compiling.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#assigning-materials-dmx","title":"Assigning Materials (dmx)","text":"<p>This is the way you will usually do it when reimporting a model that you have edited.</p> <ul> <li>Enter <code>EDIT Mode</code>.</li> <li>Select the cube.</li> <li>In the <code>Material Properties</code> tab on the right click on the <code>New</code> button.</li> <li> <p>Set the name of the material to its NAME in the game files</p> <p>Note</p> <p>with dmx files you can set the material path later on in the export menu. If you have multiple needed paths we will talk about that in the next step Multiple Material Paths. This is why we set the name of the material to its name in the game files instead of its path.</p> </li> <li> <p>Exit <code>EDIT Mode</code>.</p> </li> <li> <p>Your cube should now have the material assigned to it ingame after compiling.</p> <p>Note</p> <p>To clearify: the material of a mesh or individual faces in the game will be associated using the name of the assigned material in Blender.</p> </li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-55-multiple-material-paths-dmx","title":"Step 5.5: Multiple Material Paths (dmx)","text":"<p>If you have materials with multiple paths (different folders in the game files) you will want to use the <code>$renamematerial</code> command in the qc file. Usage:</p> <pre><code>        $renamematerial &lt;current material&gt; &lt;new material&gt;\n</code></pre> <p>Example:</p> <pre><code>        $renamematerial \"models\\weapons_r2\\coolmaterial\\cool_material\" \"models\\amazing\\uncoolmaterial\\cool_material2\"\n</code></pre> <p>Command docs: VALVe developer docs $renamematerial</p>"},{"location":"Modding/guides/tools/MDLModding/#step-6-exporting-from-blender","title":"Step 6: Exporting from Blender","text":"<ul> <li>In the <code>Source Engine Export</code> Menu in the <code>Scene Properties</code> select an <code>Export Path</code> usually the same folder as the original qc file.</li> <li> <p>Set the <code>Export Format</code> to <code>DMX</code>.</p> <p>Note</p> <p>This is important since we want to export the model as a dmx file instead of an smd file, this is because of limitation in the smd format that we want to avoid. dmx by default will, uppon importing set a \"material path\" which is the path to the material in the game files, if you reimport this model later on you will need to </p> </li> <li> <p>Press the <code>Export</code> button and select <code>Scene Export</code> (this will export all meshes in the scene to DMX files, you can also individually export meshes by selecting them in the outliner and then pressing the <code>Export</code> button and selecting the mesh in the Export Menu).</p> </li> <li>Your DMX files are now exported and you can close Blender.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-7-compiling-the-model","title":"Step 7: Compiling the model","text":"<ul> <li>Open your <code>.qc</code> file in a text editor of your choice.</li> <li> <p>On the top of the file you will see so called \"bodygroup\" lines, these are used to define the bodygroups of the model. They look a bit like this:     <pre><code>        $bodygroup \"body\"\n        {\n            studio \"ptpov_vinson_v_vinson.smd\"\n            blank\n        }\n</code></pre></p> </li> <li> <p>For each bodygroup you will want to change the files to be the dmx files you exported in the previous step. (in most cases its gonna be just renaming all the files to <code>.dmx</code> instead of <code>.smd</code>).</p> <p>Note</p> <p>If you have multiple bodygroups you will need to do this for each bodygroup, if you have multiple meshes in a bodygroup you will need to do this for each mesh in the bodygroup. We do this so Crowbar uses the dmx files instead of the smd files when compiling the model.</p> </li> <li> <p>Open Crowbar.</p> </li> <li>Select the <code>Compile</code> tab on the top.</li> <li>Click on the <code>Browse</code> button on the top right.</li> <li>Select the <code>.qc</code> file you want to compile (for example <code>ptpov_vinson.qc</code>).</li> <li>Choose your game from the dropdown labeled <code>Games that has the model compiler</code> (for example <code>Portal 2</code>)</li> <li>Press the <code>Compile</code> button.</li> <li> <p>Crowbar now compiles the model and outputs the files to the <code>compiled</code> folder in the same folder as the <code>.qc</code> file, inside the <code>compiled</code> folder you will find the full folder path of the model (for example <code>models\\weapons\\vinson\\</code>).</p> <p>Note</p> <p>Usually the error is self explainatory and you can fix it by yourself.  By default Crowbar will not output a compiled file if any errors occur during the compilation process.</p> <p>If you have Visual Studio Code installed you can also use the <code>Valve KeyValue Files Support</code> extension to have a better overview of the qc file, extension id: <code>GEEKiDoS.vdf</code></p> </li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-8-combining-model-files","title":"Step 8: Combining model files","text":"<ul> <li>Open MDLShit.</li> <li>In a file explorer navigate to the compiled folder of your model (for example <code>compiled\\models\\weapons\\vinson\\</code>).</li> <li>In this folder you will find the <code>.mdl</code> file and multiple other files, in our case there will be 3 files <code>.mdl</code>, <code>.vvd</code> and <code>.vtx</code>) all with the same name.</li> <li>In MDLShit drag these into their respective boxes.</li> <li>Make sure they are checked and the boxes you dont have files for are unchecked.</li> <li>Press the <code>Check</code> button.</li> <li>Press the <code>Convert</code> button.</li> <li>MDLShit will now combine the files into a single <code>_conv.mdl</code> file, this is our final exported and working model you can now close MDLShit and use that model in a mod.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#common-errors","title":"Common errors","text":"<p>In this list the word <code>&lt;filename&gt;</code> will be used to refer to the name of the file that is causing the error and X will refer to a number depending on your file, <code>line</code> will refer to the line in the qc file that is causing the error. The following words correspond to the following:</p> <ul> <li><code>&lt;filename&gt;</code>: The name of the file that is causing the error.</li> <li><code>&lt;line&gt;</code>: The line in the qc file that is causing the error.</li> </ul> <p><code>modelpath.qc(&lt;line&gt;): - could not load file '&lt;&lt;filename&gt;.smd'</code>:     This error means that the qc file is trying to reference a file that does not exist, make sure that the file is in the same folder as the qc file and that the name of the file is correct.     If the above solution does not work think about if you need said file actually, if not you can remove it from the qc file. Or if you need it you can create it yourself.     You can also see if a Physics or LOD file is the missing file, if it is make sure you have the correct settings in Crowbar for the file to be generated.</p> <p><code>Crowbar ERROR: The model compiler, \"&lt;filename&gt;\", does not exist.</code></p> <p><code>Crowbar ERROR: The game's \"&lt;filename&gt;\" file does not exist.</code>     Mostly happens if you did not properly set up Crowbar, make sure you set the <code>Game that has the model compiler</code> to your prerequisite game.</p>"},{"location":"Modding/guides/tools/VTFModding/","title":"VTF Modding","text":""},{"location":"Modding/guides/tools/VTFModding/#vtf-overview","title":"VTF Overview","text":"<p>VTF, short for \"Valve Texture Format\", is a texture type used by Valve in the source engine and is occasionally in Titanfall. vtf's are used for fx, animation, and other textures. </p>"},{"location":"Modding/guides/tools/VTFModding/#vmt-overview","title":"VMT Overview","text":"<p>VMT, short for \"Valve Material Type\", is a text material system that dictates how the game perceives a vtf outside of how it looks. It uses parameters and proxies to dictate how shaders will show the game. We will go into greater detail later.</p>"},{"location":"Modding/guides/tools/VTFModding/#editing-fx-that-use-vtfs","title":"Editing FX that use VTFs","text":"<p>A lot of fx in Titanfall use vtf's as textures. Therefore, if the corresponding vtf can be found, we can do almost anything with the fx's appearence. Example Mod: Exrill's Blue L-Star. Since the L-Star has a physical bullet that is counted as fx, we can edit how it looks.</p>"},{"location":"Modding/guides/tools/VTFModding/#vtf-skins","title":"VTF Skins","text":"<p>Since vtf modding was originally for introducing custom weapon skins, most of the development on it was focused on that. The same concepts apply to modding other textures though.</p> <p>Most textures in the game use .dds but we can make them use .vtf. </p> <p>What we'll be doing is:</p> <ul> <li>Extracting the model.</li> <li>Replacing the texture path in the mdl to point to our texture.</li> <li>Creating our directory.</li> <li>Setting up a .vmt file.</li> </ul> <p>VPK Tool</p>"},{"location":"Modding/guides/tools/VTFModding/#vpk-tool","title":"VPK Tool","text":"<p>You have 2 options for a VPK tool. Pick either the older VPK tool: cra0 VPKTool or the Newer VPK tool: Harmony VPKTool (better).</p> <p>With your VPK tool opened. 'Open' <code>englishclient_mp_common.pak000_dir.vpk</code> which is located in <code>Titanfall2/vpk</code>. </p> <p>Inside of the VPK, not all guns filenames match their ingame names. Here is list of weapon names to help you out. </p> <p>Navigate to <code>models/weapons/car101</code>. Extract all the viewmodel versions (ptpov) and normal model (w) mdl's.</p>"},{"location":"Modding/guides/tools/VTFModding/#hex-editor","title":"Hex Editor","text":"<p>To change the path in the .mdl to the custom .vmt.  We need a hex editor. Before editing with hex editors, you need to be aware that hex editors cannot add or delete data, only replace it. I will use HxD, but you can also use ida, or anything else as its personal preference. </p> <p>Open your .mdl in your hex editor. </p> <p>We want to get closer to the path we need or else you'll be scrolling and searching for hours. Search:(CTRL+F) for skin_31. If you don't get any matches, try skn_31, skin31, elite, or prime. The path should look something like <code>.models\\Weapons_R2\\weaponname\\weaponname_skin_31</code>.  Don't change this unless you want to effect skin31 textures.</p> <p>The path we do need to change is <code>.models\\Weapons_R2\\weaponname\\weaponname</code>. This comes before the <code>skin_31</code> path.  I recommend only changing the last section of the path. We'll change <code>.models\\Weapons_r2\\car_smg\\CAR_smg</code> to <code>.models\\weapons_r2\\car_smg\\car_ctm</code>. Note the capitalization, as some vpk repacking tools cannot repack properly if the changed path contains capitals. </p> <p>Now copy these changes for <code>ptpov_</code> and/or <code>w_</code> model(s). As these are the stow (On your back) and main menu models. If don't change these. Your texture will only work when in a match.</p>"},{"location":"Modding/guides/tools/VTFModding/#creating-vmt","title":"Creating VMT","text":"<p>In the same folder you extracted your mdl's. Make a <code>materials</code> folder next to the <code>models</code> folder. </p> <p>Example: <pre><code>    models\n    materials\n</code></pre></p> <p>Recreate the path you changed in the <code>materials</code> folder, such that the last section is a .vmt file:</p> <pre><code>    materials\n    \u2514\u2500 models\n          \u2514\u2500 weapons_r2\n                \u2514\u2500 car_smg\n                     \u2514\u2500 car_ctm.vmt\n</code></pre> <p>Inside your .vmt paste:</p> <pre><code>    \"UnlitTwoTexture\"\n    {\n\n        \"$surfaceprop\" \"metal\"\n        \"$basetexture\" \"\"\n        \"$texture2\" \"\"\n        \"$bumpmap\" \"\"   \n        \"$allowoverbright\" \"1\"\n        \"$vertexcolor\" 1\n        \"$vertexalpha\" 1 \n        \"$decal\" \"1\"\n        \"$model\" 1\n        \"$nocull\" \"1\"\n    }\n</code></pre> <p>When we use vtf textures, we can only use the albedo and normal. Learn more about texture maps here.</p>"},{"location":"Modding/guides/tools/VTFModding/#vtfedit","title":"VTFEdit","text":"<p>VTFEdit is a tool to edit, view, and create .vtf files.</p> <p>Launch VTFEdit. Top left, click <code>File</code>, <code>Import</code>, find and Import your custom texture(s).</p> <p>When importing your normal map. Choose to import as a <code>Volume Map</code> When importing your diffuse map. Choose to import as a <code>Animated Map</code></p> <p>More info about .vtf format possibilities here, or the official source docs here.</p> <p>After that, save your new .vtf's into the same folder as your custom .vmt with a simple name.</p>"},{"location":"Modding/guides/tools/VTFModding/#configuring-your-vmt","title":"Configuring your .vmt","text":"<p>In the <code>\"$basetexture\"</code> argument enter your .vtf texture directory. We'll use <code>models\\weapons_r2\\car_smg\\car_ctm\\NAMEOFVTF</code>. This should point to your custom diffuse .vtf with the simple name. The game expects these paths to be without the <code>.vtf</code> file extension - don't add it.</p> <p>Do the same for adding your normal map with the <code>\"$bumpmap\"</code> argument.</p> <p>In some cases you might have to create another vtf with literally any image. Put its path in the <code>\"$texture2\"</code> argument. As far as i know, this is sometimes necessary even though the texture isn't used.</p>"},{"location":"Modding/guides/tools/VTFModding/#final-vpk-folder","title":"Final VPK folder","text":"<p>Your root folder should look somewhat like this</p> <pre><code>    root\n    \u251c\u2500 materials\n    \u2502  \u2514\u2500 models\n    \u2502     \u2514\u2500 weapons_r2\n    \u2502        \u2514\u2500 car_smg\n    \u2502           \u251c\u2500 YOURTEXTURE.vtf\n    \u2502           \u251c\u2500 YOURTEXTURE.vtf\n    \u2502           \u2514\u2500 car_ctm.vmt\n    \u2514\u2500 models\n       \u2514\u2500 weapons\n          \u2514\u2500car101\n            \u251c\u2500 ptpov_car101.mdl\n            \u2514\u2500 w_car101.mdl\n</code></pre>"},{"location":"Modding/guides/tools/VTFModding/#finished","title":"Finished.","text":"<p>You're done! You just need to pack it into a vpk with a vpk tool (for our gun mod, we'd repack to <code>englishclient_mp_common.pak000_dir.vpk</code>), and put the vpk into a Northstar mod inside a <code>vpk</code> folder. </p> <p>Help with repacking here, and help with Northstar mods here.</p>"},{"location":"Modding/guides/tools/VTFModding/#making-your-skin-animated","title":"Making your Skin Animated","text":"<p>To add animation functionality, all we need to do is add a Proxie; which is just a modifier inside a <code>.vmt</code>, and change our albedo vtf texture. </p> <p>You need to create a .vtf texture with multiple frames imported to a single .vtf texture, that's your animated texture. You can do this with VTFEdit. Then assign the texture in <code>$basetexture</code>.</p> <p>At the bottom of your vmt but before the <code>}</code>, add this:</p> <pre><code>    \"Proxies\"\n    {\n            AnimatedTexture\n            {\n                animatedTextureVar $basetexture\n                animatedTextureFrameNumVar $frame\n                animatedTextureFrameRate 30\n            }\n    }\n</code></pre> <p>To change the fps of the texture, change the value after <code>animatedTextureFrameRate</code>, and you'll be done making your texture animated!</p>"},{"location":"Modding/guides/tools/rpakmodding/","title":"RPak Modding","text":""},{"location":"Modding/guides/tools/rpakmodding/#what-are-rpaksstarpaks","title":"What Are RPaks/Starpaks?","text":"<p>.rpak files are a file format created by Respawn as the main way to store and load in-game assets, such as textures, materials, datatables, animation recordings, etc. The assets in the .rpak file are kept stored in memory as long as the .rpak file is loaded.</p> <p>.starpak files are another file format created by Respawn to complement the .rpak file format. They contain streamed asset data, saving hardware resources by only loading the data when needed. The most common example of streamed asset data is high resolution textures. The low resolution versions are kept permanently loaded in a .rpak file, whilst the higher resolution versions are loaded as needed.</p>"},{"location":"Modding/guides/tools/rpakmodding/#what-can-rpak-mods-do","title":"What can RPak mods do?","text":"<p>RPak mods can be used for the following:</p> <ul> <li>Custom UI</li> <li>Skins</li> <li>World Materials</li> <li>Texture replacements</li> </ul>"},{"location":"Modding/guides/tools/rpakmodding/#repak-first-time-setup","title":"RePak First-Time Setup","text":"<p>The lastest RePak release can be downloaded from here. Once it has been downloaded, it is recommended to set up your file structure as follows:</p> <p>Note</p> <p>Depending on the version of RePak, some of these folders and files might be already there for you</p> <pre><code>    RePak\n    \u251c\u2500\u2500 RePak.exe\n    \u251c\u2500\u2500 pack_all.bat\n    \u251c\u2500\u2500 rpaks\n    \u251c\u2500\u2500 maps\n    \u2514\u2500\u2500 assets\n</code></pre> <ul> <li><code>RePak</code>: the base folder where your RePak/RPak related files go</li> <li><code>RePak.exe</code>: the <code>unzipped</code> file you downloaded from GitHub</li> <li><code>pack_all.bat</code>: a .bat file that will pack all of your RPaks when opened (outlined below)</li> <li><code>rpaks</code>: the folder where RePak.exe will put your RPaks when they have been created</li> <li><code>maps</code>: the folder where you will write your \"map\" files, these define the contents of your RPaks</li> <li><code>assets</code>: the folder where you will put your various different images and folders, used to create your RPaks</li> </ul>"},{"location":"Modding/guides/tools/rpakmodding/#making-pack_allbat","title":"Making pack_all.bat","text":"<p><code>pack_all.bat</code> is recommended for using RePak, as it allows for quick and easy packing of all of your RPaks. Below is the script that should be copied into the file.</p> <pre><code>    for %%i in (\"%~dp0maps\\*\") do \"%~dp0RePak.exe\" \"%%i\"\n    pause\n</code></pre>"},{"location":"Modding/guides/tools/rpakmodding/#making-rpaks","title":"Making RPaks","text":"<p>This section will walk you through the process of making an RPak that replaces a camo. For information on making other types of RPaks, check the RePak Docs:</p> <ul> <li><code>../repak/map</code></li> <li><code>../repak/index</code></li> </ul>"},{"location":"Modding/guides/tools/rpakmodding/#finding-the-camo","title":"Finding the camo","text":"<p>Before you can make your RPak, you need to know which assets you want to replace. Camos in Titanfall 2 tend to have their own RPaks, with the naming scheme <code>camo_skin&lt;number&gt;_col.rpak</code></p> <p>Firstly, make sure you have LegionPlus downloaded, if you don't, it can be downloaded from here.</p> <p>Then use LegionPlus to open one of the <code>camo_skin&lt;number&gt;_col.rpak</code> RPaks, it should look like this:</p> <p></p> <p>Note</p> <p>If your LegionPlus doesn't show the \"Name\" as a full path, go into \"Settings\" and make sure that \"Show Full Asset Paths\" is ticked, then click \"Refresh\"</p> <p>Extract the asset by double clicking on it, or by selecting it and clicking \"Export Selected\"</p> <p>Make a note of the Name of the asset, in this example it's <code>models\\camo_skins\\camo_skin04_col</code></p>"},{"location":"Modding/guides/tools/rpakmodding/#editing-the-texture","title":"Editing the texture","text":"<p>Find the extracted file that LegionPlus created, and open it in some image editing software</p> <p>Warning</p> <p>The image editing software you choose must be able to export images as .dds files</p> <p>Examples of image editing software that supports .dds files:</p> <ul> <li>GIMP (No SRGB support)</li> <li>paint.net</li> <li>Adobe Photoshop</li> </ul> <p>After you have made the desired changes to the image, export it as a .dds file with DXT1 (BC1) compression and the same name as it had originally.</p> <p></p> <p>Warning</p> <p>Try to make your textures have dimensions that are powers of two, so that mipmaps can be used.  For example <code>256x256</code> <code>512x512</code> <code>1024x512</code> <code>4096x1024</code> are all fine, but <code>350x700</code> might cause issues.</p> <p></p> <p>Place your newly created .dds file in the <code>assets\\texture</code> folder, following the path in the Name you noted down above. In this example the .dds file would go in <code>RePak\\assets\\texture\\models\\camo_skins</code>, with the path of the image being <code>..\\RePak\\assets\\texture\\models\\camo_skins\\camo_skin04_col.dds</code></p>"},{"location":"Modding/guides/tools/rpakmodding/#making-a-map-file","title":"Making a map file","text":"<p>Once you have edited your texture image and placed it in the right folder, you are ready to make your map file.</p> <p>Map files are what RePak uses to create the .rpak file (and .starpak files if needed) and are in the .json file format. They can be named anything you want, but should be put in the <code>RePak\\maps</code> folder.</p> <p>Below is an example of a map file that creates an RPak called <code>example.rpak</code> which contains 1 texture asset.</p> <pre><code>    {\n        \"name\":\"example\",\n        \"assetsDir\":\"../assets\",\n        \"outputDir\":\"../rpaks\",\n        \"starpakPath\": \"example.starpak\",\n        \"version\": 7,\n        \"files\":[\n            {\n                \"$type\":\"txtr\",\n                \"path\":\"texture/models/camo_skins/camo_skin04_col\"\n            }\n        ]\n    }\n</code></pre> <ul> <li><code>name</code>: the name of the file that gets created by RePak.</li> <li><code>assetsDir</code>: the folder that RePak bases the file path on when looking for textures.</li> <li><code>outputDir</code>: the folder that RePak will put the files that it creates in.</li> <li><code>starpakPath</code>: the path of the starpak file for streaming textures.</li> <li><code>version</code>: the RPak version RePak will use when creating the RPaks. Version 7 is Titanfall 2, version 8 is Apex Legends.</li> <li><code>files</code>: an array of all of the assets that RePak will create in the RPak.</li> <li><code>$type</code>: the type of asset that this asset is, use <code>txtr</code> for textures.</li> <li><code>path</code>: the path of the asset, used in texture assets for finding the image. This should start with <code>texture/</code> and the rest should match the Name given by LegionPlus.</li> </ul> <p>Warning</p> <p>If the <code>path</code> doesn't match up with the location of your file, RePak will throw an error</p> <p>Warning</p> <p>If the <code>path</code> contains any <code>\\</code> characters, make sure that you either replace them with <code>/</code> or you duplicate them (<code>\\\\</code>)</p> <p>This is because <code>\\</code> is the escape character in JSON, and will therefore break the <code>path</code></p>"},{"location":"Modding/guides/tools/rpakmodding/#creating-the-rpak","title":"Creating the RPak","text":"<p>To create your RPak file, simply open <code>pack_all.bat</code>.</p> <p>Alternatively, click and drag your map file over <code>RePak.exe</code>. (I don't recommend this, it's a pain)</p> <p>Look at the console for any errors. If there are no errors, a .rpak file should have been created in the <code>rpaks</code> folder.</p>"},{"location":"Modding/guides/tools/rpakmodding/#using-the-rpak-in-a-mod","title":"Using the RPak in a mod","text":"<p>Create the basis of the mod using the <code>gettingstarted</code> guide.</p> <p>Inside the mod's folder, create a new folder, called <code>paks</code>. Move your .rpak file (and .starpak files if you have any) into the folder.</p> <p></p> <p>Inside the <code>paks</code> folder that you created, make a new .json file called <code>rpak.json</code>. In this example, the <code>camo_skin04_col.rpak</code> rpak is completely replaced by <code>example.rpak</code>. This is fine for camo RPaks, but isn't suitable for more complex RPaks</p> <pre><code>    {\n        \"Preload\":\n        {\n            \"example.rpak\": false\n        },\n        \"Aliases\":\n        {\n            \"camo_skin04_col.rpak\": \"example.rpak\"\n        },\n        \"Postload\":\n        {\n\n        }\n    }\n</code></pre> <ul> <li><code>Preload</code>: if set to <code>true</code> this makes RPaks get loaded as soon as possible.</li> <li><code>Aliases</code>: this completely replaces the RPak with the specified RPak. In this example <code>camo_skin04_col.rpak</code> is replaced by <code>example.rpak</code>.</li> <li><code>Postload</code>: this makes RPaks get loaded directly after the specified RPak.</li> </ul>"},{"location":"Modding/guides/tools/rpakmodding/#preload","title":"Preload","text":"<p>This field tells Northstar whether or not to load a specific RPak as soon as RPak loading starts.</p> <p>The field is a boolean. (<code>true</code> or <code>false</code>) and should be formatted like <code>\"&lt;target_rpak&gt;\": true</code> or <code>\"&lt;target_rpak&gt;\": false</code></p> <p>Example: <code>\"my_new.rpak\": true</code></p>"},{"location":"Modding/guides/tools/rpakmodding/#aliases","title":"Aliases","text":"<p>This field tells Northstar that a specific RPak should never be loaded, and a different RPak should be loaded instead.</p> <p>The field should be formatted like <code>\"&lt;target_rpak&gt;\": \"&lt;replacement_rpak&gt;\"</code></p> <p>Example: <code>\"common.rpak\": \"my_new.rpak\"</code></p>"},{"location":"Modding/guides/tools/rpakmodding/#postload","title":"Postload","text":"<p>This field tells Northstar that a specific RPak must be loaded directly after another specified RPak has finished loading.</p> <p>The field should be formatted like <code>\"&lt;target_rpak&gt;\": \"&lt;rpak_to_load_after&gt;\"</code></p> <p>Example: <code>\"my_new.rpak\": \"common.rpak\"</code></p> <p>Warning</p> <p>If an asset in your RPak references another asset, it must be loaded after the asset that it references, or the game will infinitely loop when launched. This is mostly a problem for <code>matl</code> assets, <code>txtr</code> assets don't reference other assets.</p> <p>The file structure of your <code>paks</code> folder should be similar to this:</p> <p></p> <pre><code>    paks\n    \u251c\u2500\u2500 example.rpak\n    \u251c\u2500\u2500 example.starpak\n    \u2514\u2500\u2500 rpak.json\n</code></pre> <ul> <li><code>example.rpak</code>: this is the RPak file that you made.</li> <li><code>rpak.json</code>: this controls how the game loads your RPak files</li> </ul> <p>After <code>rpak.json</code> is set up correctly, your RPak mod should be complete and functional!</p> <p>Note</p> <p>If when you test the rpak the colour looks weird, use SRGB in the .dds compression, or use non-SRGB if you were already using SRGB</p>"},{"location":"Modding/guides/tools/soundmodding/","title":"Sound Modding","text":""},{"location":"Modding/guides/tools/soundmodding/#audio-type","title":"Audio Type","text":"<ul> <li>You will need to use <code>WAV</code> format and either <code>48000hz</code> or <code>44100hz</code> sample rate.</li> <li>More details below in creating_your_sound</li> </ul>"},{"location":"Modding/guides/tools/soundmodding/#step-1-identifying-the-sound","title":"Step 1 - Identifying the Sound","text":"<p>First you need to identify the exact sound. There's a command for this: <code>ns_print_played_sounds 1</code> It will show all the audio events that are happening at that moment on the console.</p> <p>For example, use your Grapple and open the console the event ID will be <code>pilot_grapple_fire</code></p> <p>How it looks in the console: </p> <p>All weapons, boosts, tacticals have different events IDs on different surfaces (concrete, solidmetal, wood, dirt etc.) That's why you must identify the exact event/s. Examples based on Grapple:</p> <ul> <li>Concrete impact: <code>concrete_grapple_impact_1p_vs_3p</code></li> <li>Solidmetal impact: <code>solidmetal_grapple_extract_1p_vs_3p</code> etc.</li> </ul> <p>NOTE: <code>ns_print_played_sounds 1</code> will show you every event ID. Not just in-match ones. For example:</p> <ul> <li>The sound when you move the cursor to an option it will be <code>menu_focus</code>, and clicking sound will be <code>menu_accept</code> or menu music <code>mainmenu_music</code></li> </ul> <p>Check the console often, as it's easy to miss your sound - there can be a lot of sounds playing.</p> <p>There's also a list of all EvenIDs (audio).</p> <p>Sounds can be played in-game from the console via <code>script_ui EmitUISound(soundname)</code>.</p> <p>Additionally subtitles in the form of plain text can also be useful.</p> <p>You can also export sounds with LegionPlus instead of playing them in-game.</p> <p>Open LegionPlus.exe -&gt; Load File -&gt; Titanfall 2/r2/sound pick general.mbnk</p> <p>If you want to export only a specific sound use search. It's possible to export selected sounds and all (after a search it exports only the found assets).</p>"},{"location":"Modding/guides/tools/soundmodding/#step-2-creating-folders","title":"Step 2 - Creating Folders","text":"<p>When you successfully identified your event and have the audio file/s ready it's time to set up the folder structure. Assuming the event name is <code>pilot_grapple_fire</code>, the folder structure of your mod should look like this:</p> <pre><code>   author.mod/\n   \u251c\u2500\u2500 audio/\n   \u2502   \u251c\u2500\u2500 pilot_grapple_fire/\n   \u2502   \u2502   \u2514\u2500\u2500 my_audio.wav\n   \u2502   \u2514\u2500\u2500 pilot_grapple_fire.json\n   \u2514\u2500\u2500 mod.json\n</code></pre> <p>Example of a <code>mod.json</code> (documented here: Getting Started)</p> <pre><code>   {\n     \"Name\": \"MOD_NAME_HERE\",\n     \"Description\": \"DESCRIPTION_HERE\",\n     \"Version\": \"0.1.0\",\n     \"LoadPriority\": 2\n   }\n</code></pre> <p>Inside the <code>audio/</code> folder:</p> <ul> <li><code>pilot_grapple_fire/</code> folder which needs to contain your .wav file(s)</li> <li><code>pilot_grapple_fire.json</code> json used to configure the sound override, dont forget to edit.</li> </ul> <p>You will have to add that folder with your sound and the json for each event you want to override. The event JSON files must contain both <code>EventId</code> and <code>AudioSelectionStrategy</code> like this:</p> <pre><code>   {\n       \"EventId\": [ \"pilot_grapple_fire\" ],\n       \"AudioSelectionStrategy\": \"sequential\"\n   }\n</code></pre> <p>The <code>AudioSelectionStrategy</code> can be either:</p> <ul> <li><code>sequential</code>: If you have one sound or you want to play them in alphabetical order.</li> <li><code>random</code>: If you have more than one sound and you want to randomize them.</li> </ul>"},{"location":"Modding/guides/tools/soundmodding/#creating_your_sound","title":"Creating Your Sound","text":"<ul> <li>Recommended tool: Audacity</li> </ul> <p>Open/Add your audio as a track to Audacity and set the project rate accordingly. Either <code>48000hz</code> or <code>44100hz</code> can work well in most cases, but a few sounds don't use either. Which sampling rate you should use depends on the original sound's sampling rate.</p> <p>For example: if you use <code>44100khz</code> and the sound is slightly too high pitched in game, use <code>48000khz</code>. If you use <code>48000khz</code> and it's slightly low pitched in game, use <code>44100khz</code>.</p> <p>If you're unsure which to use, or the sound still seems too high, or low pitched, you can use LegionPlus to determine the original rate.</p> <p>After that, export your track as a 16-bit <code>wav</code> file (any other bit-depth will cause Northstar to crash). Make sure you don't add any metadata as this will cause white noise to be at the end of the sound.</p>"},{"location":"Modding/guides/tools/soundmodding/#issues_with_sounds","title":"Issues With Sounds","text":"<ul> <li>White noise after the sound ends.</li> </ul> <p>This is usually because there's some metadata left in the audio. Remove it to fix this issue.</p> WindowsLinux <p>You can bulk remove it with Mp3tag or individually with Audacity.</p> <p>You can bulk remove it with Metadata Cleaner or a shell script (requires ffmpeg to be installed) and also individually with Audacity.</p> <p><code>metadata_remover.sh</code> (WAV only)</p> Script <pre><code>    shopt -s globstar nullglob\n    for f in *.wav **/*.wav\n    do\n    ffmpeg -i \"$f\" -map 0 -map_metadata -1 -c:v copy -c:a copy \"${f%.wav}.new.wav\"\n    mv -f \"${f%.wav}.new.wav\" \"$f\"\n    done\n</code></pre> <ul> <li>Sound is slightly higher/lower pitched in game. This is usually because the sampling rate of your sound doesn't match the original sound's sampling rate. You can use a tool like Audacity to resample your sound to match the original rate. Consult <code>_creating_your_sound</code> for more information.</li> </ul>"},{"location":"Modding/guides/tools/soundmodding/#sound_tools","title":"Sound Tools","text":"<ul> <li>Converters</li> </ul> WindowsLinux <p># todo</p> <p>On Linux you can use shell scripts that convert all WAV or MP3 audio files from the current directory (including folders) to WAV 48000Hz 16-bit. They require ffmpeg to be installed.</p> <p>MP3 and other formats scripts don't delete previous files, so just search for them (.format) and delete after conversion. WAV script automatically replaces old files.</p> WAV scriptMP3 ScriptScript for other formats <pre><code>       #WAV to WAV 16-bit 48000 Hz.\n       #wav_converter.sh\n\n       shopt -s globstar nullglob\n       for f in *.wav **/*.wav\n       do\n       ffmpeg -i \"$f\" -acodec pcm_s16le -ar 48000 \"${f%.wav}.new.wav\"\n       mv -f \"${f%.wav}.new.wav\" \"$f\"\n       done\n</code></pre> <pre><code>       #MP3 to WAV 16-bit 48000 Hz.\n       #mp3-wav_converter.sh\n\n       shopt -s globstar nullglob\n       for f in *.mp3\n       do\n       ffmpeg -i \"${f}\" -vn -c:a pcm_s16le  -ar 48000 \"${f%.*}.wav\"\n       done\n</code></pre> <pre><code>       #Replace .format with the one you want to convert.\n       #format-wav_converter.sh\n\n       shopt -s globstar nullglob\n       for f in *.format\n       do\n       ffmpeg -i \"${f}\" -vn -c:a pcm_s16le  -ar 48000 \"${f%.*}.wav\"\n       done\n</code></pre>"},{"location":"Modding/guides/tools/soundmodding/#installation","title":"Installation","text":"<ul> <li>As with any mod, the folder which contains your <code>mod.json</code> needs to be inside <code>Titanfall 2/r2Northstar/Mods/</code>.</li> </ul>"},{"location":"Modding/guides/tools/tools/","title":"Modding Tools","text":""},{"location":"Modding/guides/tools/tools/#source-engine","title":"Source engine","text":""},{"location":"Modding/guides/tools/tools/#titanfall","title":"Titanfall","text":"<ul> <li>Titanfall VPK Tool</li> <li>Harmony VPK Tool</li> <li>Legion+</li> </ul>"},{"location":"Modding/guides/tools/tools/#rpsnvpks","title":"RPSNVPK's","text":"<ul> <li>squidgyberries RSPNVPK</li> <li>taskinoz RSPNVPK</li> <li>Provoxin RSPNVPK</li> </ul>"},{"location":"Modding/guides/tools/tools/#vtf-vmt","title":"VTF &amp; VMT","text":"<ul> <li>VTFEdit</li> <li>VTF Shell Extensions - Info</li> <li>VMT Editor</li> </ul>"},{"location":"Modding/guides/tools/tools/#other-utilities","title":"Other utilities","text":""},{"location":"Modding/guides/tools/tools/#file-editors","title":"File editors","text":"<ul> <li> <p>Atom Text</p> <ul> <li>Syntax color KeyValue</li> <li>Syntax color Squirrel</li> <li>Color picker</li> </ul> </li> <li> <p>TextCrawler 3</p> </li> <li>Visual Studio Code</li> <li>VSCodium</li> <li>Notepad++</li> <li> <p>Kate</p> <ul> <li>Kate syntax highlighting for Squirrel</li> </ul> </li> </ul>"},{"location":"Modding/guides/tools/tools/#graphics-animation-color-editors","title":"Graphics / animation / color editors","text":"<ul> <li> <p>Paint.net</p> <ul> <li>Gradient Mapping plug-in</li> <li>Animation Helper</li> </ul> </li> <li> <p>Source VMT Color</p> </li> <li> <p>GIMP</p> <ul> <li>VTF plug-in</li> </ul> </li> <li> <p>RGB Tool converter</p> </li> <li>Color Pick Windows</li> <li>GIF splitter</li> <li>Rad Tools Bik (needs Quicktime 7.6)</li> <li>TexFactory easy DDS conversion</li> <li> <p>Substance Painter to TF2</p> </li> <li> <p>Tacent View - DDS viewer.</p> </li> </ul>"},{"location":"Modding/guides/tools/tools/#archives","title":"Archives","text":"<ul> <li>7zip</li> </ul>"},{"location":"Modding/guides/tools/tools/#driver-editors","title":"Driver editors","text":"<ul> <li>NVidia Profile Inspector</li> <li>ATI Radeon Tray Tools</li> </ul>"},{"location":"Modding/guides/tools/tools/#3d-models","title":"3D Models","text":"<ul> <li> <p>Blender</p> <ul> <li>Blender Source Tool</li> <li>Blender VMT</li> <li>IO import VMF &amp; VMT</li> </ul> </li> <li> <p>Crowbar</p> </li> <li>Ninja Ripper v1.7.1</li> </ul> <p>Highly recommended to check the NoSkill Gitbook modding section for more tools.</p>"},{"location":"Modding/mapping/info-dump/","title":"Info-Dump","text":"<p>Loosely structured dump of information to be sorted in the future:</p>"},{"location":"Modding/mapping/info-dump/#tools","title":"Tools:","text":""},{"location":"Modding/mapping/info-dump/#mrvn-radiant","title":"MRVN-Radiant:","text":"<p>Level editor for Respawn Entertainment Source based games.</p> <p>https://github.com/F1F7Y/MRVN-radiant</p>"},{"location":"Modding/mapping/info-dump/#bsp-tool","title":"BSP Tool:","text":"<p>Python library for analysing .bsp files</p> <p>https://github.com/snake-biscuits/bsp_tool</p> <p>Docs: https://github.com/snake-biscuits/bsp_tool/blob/master/docs/supported/titanfall.md</p>"},{"location":"Modding/mapping/info-dump/#other","title":"Other:","text":"<p>Netradiant Custom Tutorial - Part 2:</p> <p>How titanfall custom map:</p>"},{"location":"Modding/mapping/info-dump/#how-to-make-corners-correctly","title":"How to make corners correctly","text":"<p>Improper corners can cause the player to get stuck</p> <p>Sample clip: </p> <p>Sample map: https://cdn.discordapp.com/attachments/925435799057604709/1041813222547791953/corner_test_map.map</p>"},{"location":"Modding/plugins/interfacesapi/","title":"Interface API","text":"<p>the plugins system now use source interfaces.</p> <p>The launcher exposes almost everything required by plugins in interfaces that allow for backwards compatibility. The only thing that's passed to a plugin directly is the northstar dll HWND and a struct of data that's different for each plugin.</p> <p>Plugins are required to expose a <code>void* CreateInterface(const char* name, int* status)</code> function to share their own interfaces. The launcher loads the <code>PluginId</code> interface from the plugin to query info such as it's name.</p> <p>Plugins can use the <code>CreateInterface</code> function exposed by the northstarDll to use northstar interfaces such as for logging. An interface is just an abstract class to force all functions into a vftable.</p>"},{"location":"Modding/plugins/interfacesapi/#northstar-interfaces","title":"Northstar Interfaces","text":""},{"location":"Modding/plugins/interfacesapi/#nssys001","title":"NSSys001","text":"<p>Exposes some system functionality to plugins</p> <pre><code>    // 32 bit\n    enum LogLevel {\n      INFO,\n      WARN,\n      ERR,\n    };\n\n    // handle: handle of the plugin. Passed to the plugin on init.\n    void Log(HMODULE handle, LogLevel level, char* msg); // logs a message with the plugin's log name\n    void Unload(HMODULE handle); // unloads the plugin\n    void Reload(HMODULE handle);\n</code></pre>"},{"location":"Modding/plugins/interfacesapi/#required-plugin-interfaces","title":"Required Plugin Interfaces","text":"<p>Interfaces that have to be exposed for the plugin to be loaded.</p>"},{"location":"Modding/plugins/interfacesapi/#pluginid001","title":"PluginId001","text":"<pre><code>    // strings of data about the plugin itself. may be extended in the future\n    // 32 bit\n    enum PluginString {\n      NAME, // the name of the plugin\n      LOG_NAME, // the name used for logging\n      DEPENDENCY_NAME, // the name used for squirrel dependency constants created. The value returned for this has to be a valid squirrel identifier or the plugin will fail to load\n    }\n\n    // bitfields about the plugin\n    // 32 bit\n    enum PluginField {\n      CONTEXT // 0x1 if the plugin is allowed to run on dedicated servers and 0x2 if the plugin is allowed to run on clients (is this even needed seems useless to me)\n    }\n\n    char* GetString(PluginString prop);\n    i64 GetField(PluginField prop);\n</code></pre>"},{"location":"Modding/plugins/interfacesapi/#plugincallbacks001","title":"PluginCallbacks001","text":"<pre><code>    struct PluginNorthstarData { HMODULE handle; };\n\n    // COPY THE initData IT MAY BE MOVED AT RUNTIME\n    void Init(HMODULE nsModule, const PluginNorthstarData* initData, bool reloaded); // called after the plugin has been validated. The nsmodule allows northstar plugins to work for the ronin client as well (assuming they update their fork lmao)\n    void Finalize(); // called after all plugins have been loaded. Useful for dependencies\n    void Unload(); // called just before the plugin is getting unloaded\n    void OnSqvmCreated(CSquirrelVM* sqvm); // the context of the sqvm is contained in the instance\n    void OnSqvmDestroying(CSquirrelVM* sqvm); // callback with the sqvm instance that's about to be destroyed (for UI, CLIENT is destroyed for some reason??)\n    void OnLibraryLoaded(HMODULE module, const char* libraryName); // called for any library loaded by the game (for example engine.dll)\n    void RunFrame(); // just runs on every frame of the game I think\n</code></pre>"},{"location":"Modding/plugins/interfacesapi/#whats-an-interface-anyways","title":"What's an interface anyways?","text":"<p>Interfaces are just abstract classes. So make sure the first parameter is always a pointer to the instance of the interface you're using.</p> <p>an example what NSSys001 looks like in C:</p> <pre><code>    typedef enum {\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERR,\n    };\n\n    typedef struct CSys {\n      struct {\n        void (*log)(struct CSys* self, HMODULE handle, LogLevel level, char* msg);\n        void (*unload)(struct CSys* self, HMODULE handle);\n      }* vftable;\n    } CSys;\n\n    // use like this\n    g_c_sys-&gt;vftable-&gt;log(g_c_sys, g_handle, LOG_INFO, \"my balls are itching\");\n</code></pre> <p>Interfaces are created with CreateInterface that's exposed in another dll.</p>"},{"location":"Modding/plugins/resources/","title":"Resources","text":""},{"location":"Modding/plugins/resources/#templates","title":"Templates","text":"<ul> <li>NSPluginTemplate: https://github.com/uniboi/NSPluginTemplate/</li> </ul>"},{"location":"Modding/plugins/resources/#libs","title":"Libs","text":"<ul> <li>rrplug: https://crates.io/crates/rrplug</li> </ul>"},{"location":"Modding/reference/","title":"Northstar API","text":""},{"location":"Modding/reference/#respawn-api","title":"Respawn API","text":""},{"location":"Modding/reference/#hud","title":"HUD","text":""},{"location":"Modding/reference/northstar/callbacks/","title":"Custom Northstar Callbacks","text":"<p>Callbacks added by Northstar</p> <p>Callbacks within squirrel trigger functions when certain events occur. </p> <p>They will also often pass arguments to those functions based on the callbacks used.</p>"},{"location":"Modding/reference/northstar/callbacks/#list-of-callbacks","title":"List of callbacks","text":"<p>Please refer to Respawn Callbacks  for the list of callbacks defined in respawn code.</p>"},{"location":"Modding/reference/northstar/callbacks/#_codecallbacks_commongnut","title":"_codecallbacks_common.gnut:","text":"<p>void AddClientCommandNotifyCallback( string commandString, void functionref( entity player, array args ) callbackFunc )"},{"location":"Modding/reference/northstar/callbacks/#_custom_codecallbacksgnut","title":"_custom_codecallbacks.gnut:","text":"<p>void CServerGameDLL_OnReceivedSayTextMessageCallback()</p> <p>void AddCallback_OnReceivedSayTextMessage( ClServer_MessageStruct functionref (ClServer_MessageStruct) callbackFunc )</p>"},{"location":"Modding/reference/northstar/callbacks/#_itemsnut","title":"_items.nut:","text":"<p>void AddCallback_OnRegisterCustomItems( void functionref() callback )</p>"},{"location":"Modding/reference/northstar/callbacks/#_loadouts_mpgnut","title":"_loadouts_mp.gnut:","text":"<p>bool ClientCommandCallback_RequestPilotLoadout( entity player, array args ) <p>bool ClientCommandCallback_RequestTitanLoadout( entity player, array args ) <p>bool ClientCommandCallback_SetPersistentLoadoutValue( entity player, array args ) <p>bool ClientCommandCallback_SwapSecondaryAndWeapon3PersistentLoadoutData( entity player, array args ) <p>bool ClientCommandCallback_SetBurnCardPersistenceSlot( entity player, array args ) <p>bool ClientCommandCallback_SetCallsignIcon( entity player, array args ) <p>bool ClientCommandCallback_SetCallsignCard( entity player, array args ) <p>bool ClientCommandCallback_SetFactionChoicePersistenceSlot( entity player, array args ) <p>bool ClientCommandCallback_LoadoutMenuClosed( entity player, array args ) <p>bool ClientCommandCallback_InGameMPMenuClosed( entity player, array args )"},{"location":"Modding/reference/northstar/callbacks/#_menu_callbacksgnut","title":"_menu_callbacks.gnut:","text":"<p>void MenuCallbacks_Init()</p> <p>bool ClientCommandCallback_LeaveMatch( entity player, array args ) <p>bool ClientCommandCallback_GenUp( entity player, array args )"},{"location":"Modding/reference/northstar/callbacks/#sh_remote_functions_mp_customgnut","title":"sh_remote_functions_mp_custom.gnut:","text":"<p>void AddCallback_OnRegisteringCustomNetworkVars( void functionref() callback )</p>"},{"location":"Modding/reference/northstar/callbacks/#evac_evacgnut","title":"evac\\_evac.gnut:","text":"<p>void Evac( int evacTeam, float initialWait, float arrivalTime, float waitTime, bool functionref( entity, entity ) canBoardCallback, bool functionref( entity ) shouldLeaveEarlyCallback, void functionref( entity ) completionCallback, entity customEvacNode = null )</p>"},{"location":"Modding/reference/northstar/callbacks/#gamemodes_gamemode_franut","title":"gamemodes_gamemode_fra.nut:","text":"<p>void GamemodeFRA_AddAdditionalInitCallback()</p>"},{"location":"Modding/reference/northstar/callbacks/#gamemodessh_gamemodes_customgnut","title":"gamemodes\\sh_gamemodes_custom.gnut:","text":"<p>void AddCallback_OnCustomGamemodesInit( void functionref() callback )</p>"},{"location":"Modding/reference/northstar/callbacks/#lobby_lobbygnut","title":"lobby\\_lobby.gnut:","text":"<p>bool ClientCommandCallback_StartPrivateMatchSearch( entity player, array args )"},{"location":"Modding/reference/northstar/callbacks/#lobby_private_lobbygnut","title":"lobby\\_private_lobby.gnut:","text":"<p>bool ClientCommandCallback_PrivateMatchLaunch( entity player, array args ) <p>bool ClientCommandCallback_PrivateMatchSetMode( entity player, array args ) <p>bool ClientCommandCallback_SetCustomMap( entity player, array args ) <p>bool ClientCommandCallback_PrivateMatchSwitchTeams( entity player, array args ) <p>bool ClientCommandCallback_PrivateMatchToggleSpectate( entity player, array args ) <p>bool ClientCommandCallback_PrivateMatchSetPlaylistVarOverride( entity player, array args ) <p>bool ClientCommandCallback_ResetMatchSettingsToDefault( entity player, array args )"},{"location":"Modding/reference/northstar/callbacks/#meleesh_meleegnut","title":"melee\\sh_melee.gnut:","text":"<p>void AddCallback_IsValidMeleeExecutionTarget( bool functionref( entity attacker, entity target ) callbackFunc )</p> <p>This callback gets triggered after the melee button is pressed to check if the action to execute the target is still valid.     If one of the added callbacks return false the target won't be executed and will just be meleed.</p> <p>Note</p> <p>The execution prompt still pops up.</p>"},{"location":"Modding/reference/northstar/callbacks/#mp_ai_mpgnut","title":"mp\\_ai_mp.gnut:","text":"<p>bool SPMP_Callback_ForceAIMissPlayer( entity npc, entity player )</p>"},{"location":"Modding/reference/northstar/callbacks/#mp_base_gametype_mpgnut","title":"mp\\_base_gametype_mp.gnut:","text":"<p>bool ClientCommandCallback_spec_next( entity player, array args ) <p>bool ClientCommandCallback_spec_prev( entity player, array args ) <p>bool ClientCommandCallback_spec_mode( entity player, array args )"},{"location":"Modding/reference/northstar/callbacks/#mp_gamestate_mpnut","title":"mp\\_gamestate_mp.nut:","text":"<p>void AddCallback_OnRoundEndCleanup( void functionref() callback )</p> <p>void SetTimeoutWinnerDecisionFunc( int functionref() callback )</p>"},{"location":"Modding/reference/northstar/callbacks/#uiui_mouse_capturenut","title":"ui\\ui_mouse_capture.nut:","text":"<p>void AddMouseMovementCaptureHandler( var capturePanelOrMenu, void functionref( int deltaX, int deltaY ) func )</p>"},{"location":"Modding/reference/northstar/chathooks/","title":"Chathooks","text":"<p>This document provides usage of the Chathook API added in Northstar <code>v1.6.0</code>. For an example of chathooks in use, check out EmmaM's OwOfier mod.</p> <p>Warning</p> <p>Your mod needs to be load priority 1 or above to use the structs and callbacks in your script.</p>"},{"location":"Modding/reference/northstar/chathooks/#client-chat-api","title":"Client chat API","text":""},{"location":"Modding/reference/northstar/chathooks/#callbacks","title":"Callbacks","text":"<p>The client chat callbacks allow you to intercept chat messages and modify or block them.</p> <p>struct ClClient_MessageStruct</p> <p>Contains details on a chat message to be displayed. You can receive one of these by adding a chat callback with <code>AddCallback_OnReceivedSayTextMessage</code>.</p> <p>string message</p> <p>the text sent by the player.</p> <p>entity player</p> <p>the player who sent the chat.</p> <p>string playerName</p> <p>the display name of the player who sent the chat.</p> <p>bool isTeam</p> <p>whether this chat has a <code>[TEAM]</code> tag.</p> <p>bool isDead</p> <p>whether this chat has a <code>[DEAD]</code> tag.</p> <p>bool isWhisper</p> <p>whether this chat has a <code>[WHISPER]</code> tag.</p> <p>bool shouldBlock</p> <p>if true, this chat will not be displayed.</p> <p>void AddCallback_OnReceivedSayTextMessage(callbackFunc)</p> <p>Adds a callback that will be run when a chat message is received from the server. This will only be triggered for messages from players, not server messages.</p> <p>The provided function should accept a <code>ClClient_MessageStruct</code> and return an optionally modified copy of it. When a chat message is received, each registered callback is run in sequence to modify or block the message.</p> <p>Example:</p> <pre><code>    ClClient_MessageStruct function MyChatFilter(ClClient_MessageStruct message)\n    {\n        if (message.message.find(\"nft\") != null)\n        {\n            message.shouldBlock = true\n        }\n\n        message.message = StringReplace(message.message, \"yes\", \"no\", true, true)\n\n        return message\n    }\n\n    void function MyModInit()\n    {\n        AddCallback_OnReceivedSayTextMessage(MyChatFilter)\n    }\n</code></pre>"},{"location":"Modding/reference/northstar/chathooks/#writing-to-chat","title":"Writing to Chat","text":"<p>A handful of functions are provided to write messages in local chat windows. These do not send messages to other players, they only display them locally.</p> <p>void Chat_GameWriteLine(string text)</p> <p>Writes a line of text in local game chat panels. Supports ANSI escape codes.</p> <p>Example:</p> <pre><code>    void function OnGameStarted()\n    {\n        Chat_GameWriteLine(\"You got this, \" + GetLocalClientPlayer().GetPlayerName() + \"!\")\n    }\n</code></pre> <p>void Chat_GameWrite(string text)</p> <p>Appends text to local game chat panels. Supports ANSI escape codes.</p> <p>Example:</p> <pre><code>    void function InitialiseHEVSuit()\n    {\n        Chat_GameWriteLine(\"SENSOR ARRAYS-\")\n        ActivateSensorArrays()\n        Chat_GameWrite(\"ACTIVATED\")\n        wait 1\n        Chat_GameWriteLine(\"BIOMETRIC MONITORING SYSTEMS-\")\n        ActivateBiometricMonitoringSystems()\n        Chat_GameWrite(\"ACTIVATED\")\n        wait 1\n        Chat_GameWriteLine(\"HAVE A VERY SAFE DAY.\")\n    }\n</code></pre> <p>void Chat_NetworkWriteLine(string text)</p> <p>Writes a line of text in local network chat panels. Supports ANSI escape codes.</p> <p>Example:</p> <pre><code>    void function MyModInit()\n    {\n        Chat_NetworkWriteLine(\"MyMod v1.0.0 is good to go!\")\n    }\n</code></pre> <p>void Chat_NetworkWrite(string text)</p> <p>Appends text to local network chat panels. Supports ANSI escape codes.</p> <p>Example:</p> <pre><code>    void function OnButtonPressed()\n    {\n        Chat_NetworkWrite(\"Connecting in 3...\")\n        wait 1\n        Chat_NetworkWrite(\"2...\")\n        wait 1\n        Chat_NetworkWrite(\"1...\")\n        wait 1\n        Chat_NetworkWrite(\"0\")\n        Connect()\n    }\n</code></pre>"},{"location":"Modding/reference/northstar/chathooks/#server-chat-api","title":"Server Chat API","text":""},{"location":"Modding/reference/northstar/chathooks/#callbacks_1","title":"Callbacks","text":"<p>The server chat callbacks allow you to intercept incoming chat messages and modify or block them.</p> <p>ClServer_MessageStruct</p> <p>Contains details on an incoming chat message. You can receive one of these by adding a chat callback with <code>AddCallback_OnReceivedSayTextMessage</code>.</p> <p>string message</p> <p>the text sent by the player.</p> <p>entity player</p> <p>the player who sent the chat.</p> <p>bool isTeam</p> <p>whether this chat is only sent to the player's team.</p> <p>bool shouldBlock</p> <p>if true, this chat will not be sent.</p> <p>void AddCallback_OnReceivedSayTextMessage(callbackFunc)</p> <p>Adds a callback that will be run when a chat message is received from a player. This will not be fired for custom messages sent by server mods.</p> <p>The provided function should accept a <code>ClServer_MessageStruct</code> and return an optionally modified copy of it. When a chat message is received, each registered callback is run in sequence to modify or block the message.</p> <p>Example:</p> <pre><code>    ClServer_MessageStruct function MyChatFilter(ClServer_MessageStruct message)\n    {\n        if (message.message.find(\"nft\") != null)\n        {\n            message.shouldBlock = true\n        }\n\n        message.message = StringReplace(message.message, \"yes\", \"no\", true, true)\n\n        return message\n    }\n    void function MyModInit()\n    {\n        AddCallback_OnReceivedSayTextMessage(MyChatFilter)\n    }\n</code></pre>"},{"location":"Modding/reference/northstar/chathooks/#custom-messages","title":"Custom Messages","text":"<p>With custom messages you can send chat messages at any time, to all players or to specific players.</p> <p>void Chat_Impersonate(entity player, string text, bool isTeamChat)</p> <p>Displays a chat message as if the player sent it. Only use this when the player has performed a clear action to send a chat message.</p> <p>Parameters:</p> <ul> <li><code>entity player</code> - the player that the chat message will appear to be from.</li> <li><code>string text</code> - the contents of the chat message. Supports ANSI escape codes  for colors.</li> <li><code>bool isTeamChat</code> - whether this chat is only sent to the player's team.</li> </ul> <p>Example:</p> <pre><code>    void function OnSayRedCommand(entity player, string text)\n    {\n        Chat_Impersonate(player, \"red text -&gt; \\x1b[31m\" + text)\n    }\n</code></pre> <p>void Chat_PrivateMessage(entity fromPlayer, entity toPlayer, string text, bool whisper)</p> <p>Sends a private chat message from a player that is only displayed to one other player. Only use this when the player has performed a clear action to send a chat message.</p> <p>Parameters:</p> <ul> <li><code>entity fromPlayer</code> - the player the message will be from.</li> <li><code>entity toPlayer</code> - the player that the message will be shown to.</li> <li><code>string text</code> - the contents of the chat message. Supports ANSI escape codes for colors.</li> <li><code>bool whisper</code> - if true, <code>[WHISPER]</code> will be displayed before the message to indicate the message is private.</li> </ul> <p>Example:</p> <pre><code>    void function OnSendToFriendsCommand(entity fromPlayer, string text)\n    {\n        array&lt;entity&gt; friends = GetPlayerFriends(fromPlayer)\n        foreach (friend in friends)\n        {\n            Chat_PrivateMessage(fromPlayer, friend, text, true)\n        }\n    }\n</code></pre> <p>void Chat_ServerBroadcast(string text, bool withServerTag = true)</p> <p>Displays a server message to all players in the chat.</p> <p>Parameters:</p> <ul> <li><code>string text</code> - the contents of the chat message. Supports ANSI escape codes for colors.</li> <li><code>bool withServerTag</code> - if true, <code>[SERVER]</code> will appear before the message in chat. Defaults to true.</li> </ul> <p>Example:</p> <pre><code>    void function RestartServerThread()\n    {\n        // wait one hour\n        wait 3600\n        Chat_ServerBroadcast(\"Server will be shut down in \\x1b[93m5 seconds\")\n        wait 1\n        Chat_ServerBroadcast(\"Server will be shut down in \\x1b[93m4 seconds\")\n        wait 1\n        Chat_ServerBroadcast(\"Server will be shut down in \\x1b[93m3 seconds\")\n        wait 1\n        Chat_ServerBroadcast(\"Server will be shut down in \\x1b[93m2 seconds\")\n        wait 1\n        Chat_ServerBroadcast(\"Server will be shut down in \\x1b[93m1 second\")\n        wait 1\n        StopServer()\n    }\n</code></pre> <p>void Chat_ServerPrivateMessage(entity toPlayer, string text, bool whisper, bool withServerTag = true)</p> <p>Sends a server message to a specific player in the chat.</p> <p>Parameters:</p> <ul> <li><code>entity toPlayer</code> - the player that the message will be shown to.</li> <li><code>string text</code> - the contents of the chat message. Supports ANSI escape codes for colors.</li> <li><code>bool whisper</code> - if true, <code>[WHISPER]</code> will be displayed before the message to indicate the message is private.</li> <li><code>bool withServerTag</code> - if true, <code>[SERVER]</code> will appear before the message in chat. Defaults to true.</li> </ul> <p>Example:</p> <pre><code>    void function OnBanCommand(entity player, array&lt;string&gt; args)\n    {\n        if (!PlayerIsModerator(player))\n        {\n            Chat_ServerPrivateMessage(player, \"You do not have the permissions to perform this command.\", true, false)\n            return\n        }\n\n        BanPlayerByName(args[0])\n    }\n</code></pre>"},{"location":"Modding/reference/northstar/chathooks/#ansi_escape","title":"ANSI Escape Codes","text":"<p>All messages support ANSI escape codes for customising text color. These are commands in strings that have special meaning. For example, the string:</p> <pre><code>    Hello world, \\x1b[31mthis text is red\\x1b[0m. And \\x1b[34mthis text is blue\\x1b[0m.\n</code></pre> <p><code>\\x1b</code> is a special character that Squirrel (and other languages) replace with a reserved ASCII character. For future reference this will be referred to with <code>ESC</code> (e.g. setting red text is <code>ESC[31m</code>).</p> <p>The following commands are available:</p> Codes Description <code>ESC[0m</code> and <code>ESC[39m</code> Reset text formatting. <code>ESC[30-37m</code>, <code>ESC[90-97m</code> Set to one of the available color presets. <code>ESC[38;5;Xm</code> Set to one of the available 8-bit colors. <code>ESC[38;2;R;G;Bm</code> Set to an RGB color, with <code>R</code>, <code>G</code> and <code>B</code> in the range 0-255. <code>ESC[110m</code> Set to chat text color. <code>ESC[111m</code> Set to friendly player name color. <code>ESC[112m</code> Set to enemy player name color. <code>ESC[113m</code> Set to network name color."},{"location":"Modding/reference/northstar/customdamagesources/","title":"Custom Damage Source IDs","text":"<p>Custom damage source IDs can be used to create new damage source IDs for modded weapons, abilities, damage, etc. </p> <p>They can only be registered server-side and cannot modify existing damage source IDs. Clients pre-1.9.4 will not see the custom damage sources in the obituary.</p> <p>To add a single damage source ID, use:</p> <p>void RegisterWeaponDamageSource( string weaponRef, string damageSourceName )</p> <p>To add multiple damage source IDs, use  </p> <p>void RegisterWeaponDamageSources( table&lt; string, string &gt; newValueTable )</p> <p>The first string parameter is the in-code weapon name while the latter is the name displayed in the obituary.</p> <p>Damage source IDs should be added in <code>\"After\"</code> server callbacks.</p> <p>For example, we can call the methods from a function in <code>damage_source_example.nut</code>:</p> <pre><code>    global function SimpleSourceInit\n\n    void function SimpleSourceInit()\n    {\n        // Server-side code\n\n        // Register a single damage source ID\n        RegisterWeaponDamageSource( \"mp_weapon_minigun\", \"Minigun\" )\n\n        // Register multiple damage source IDs\n        RegisterWeaponDamageSources(\n            {\n                mp_titanweapon_barrage_core_launcher = \"Barrage Core\",\n                mp_titanweapon_grenade_launcher = \"Grenade Launcher\"\n            }\n        )\n    }\n</code></pre> <p>Then call the function as an <code>\"After\"</code> server callback in the <code>mod.json</code>:</p> <pre><code>    {\n        \"Scripts\": [\n            {\n                \"Path\": \"damage_source_example.nut\",\n                \"RunOn\": \"SERVER &amp;&amp; MP\",\n                \"ServerCallback\": {\n                    \"After\": \"SimpleSourceInit\"\n                }\n            },\n        ]\n    }\n</code></pre> <p>Now, these damage source IDs can be referenced in script like so:</p> <pre><code>    eDamageSourceId.mp_weapon_minigun\n    eDamageSourceId.mp_titanweapon_barrage_core_launcher\n    eDamageSourceId.mp_titanweapon_grenade_launcher\n</code></pre> <p>and their corresponding precached weapons (if applicable) will automatically use their custom damage source IDs.</p>"},{"location":"Modding/reference/northstar/dependencyconstants/","title":"Dependency Constants and Compiler Directives","text":""},{"location":"Modding/reference/northstar/dependencyconstants/#compiler-directives","title":"Compiler Directives","text":"<p>Compiler directives are a way to compile code only if a specific condition is met. To use this you have the <code>#if</code>, <code>#endif</code>, <code>#else</code> and <code>#elseif</code> keyword.</p> <p>Contditons you can check for are</p> <ul> <li><code>SERVER</code> Checks if the code is compiled on the server VM.</li> <li><code>CLIENT</code> Checks if the code is compiled on the client VM.</li> <li><code>UI</code> Checks if the code is compiled on the UI VM.</li> <li><code>MP</code> Checks if the code is compiled in a multiplayer match.</li> <li><code>SP</code> Checks if the code is compiled in a singeplayer match.</li> <li><code>DEV</code> Checks if the code is compiled with the <code>-dev</code> keyword in the startup     arguments.</li> </ul> <p>These conditions can also be combined with the regular squirrel boolean expressions</p> <pre><code>    #if SERVER\n    Chat_ServerBroadcast(\"Message from the server VM\")\n    #endif\n</code></pre> <pre><code>    #if (CLIENT &amp;&amp; MP) || DEV\n    ...\n    #elseif SP\n    ...\n    #endif\n</code></pre>"},{"location":"Modding/reference/northstar/dependencyconstants/#dependency-constants","title":"Dependency Constants","text":"<p>Dependency constants are used to only compile code if a dependency your mod requires is loaded, these use the Compiler directives syntax.</p> <p>Inside your <code>mod.json</code> define a constant as:</p> <pre><code>    {\n        // mod.json stuff\n        \"Dependencies\": {\n            // sets the constant to 0 or 1, depending if the mod with the name \"Mod Name\" exists and is enabled\n            \"CONSTANT_NAME\": \"Mod Name\"\n        }\n    }\n</code></pre> <p>For Example:</p> <pre><code>    \"PLAYER_HAS_ROGUELIKE_MOD\": \"TF|Roguelike\"\n</code></pre> <p>Will define a constant <code>PLAYER_HAS_ROGUELIKE_MOD</code> that is set to <code>0</code> or <code>1</code> depending if the mod is enabled. It then can be used as a constant/compiler flag.</p> <pre><code>    #if PLAYER_HAS_ROGUELIKE_MOD\n    print(\"player has roguelike mod\")\n    Roguelike_Function();\n    #else\n    print(\"Can't use the function because the mod is off :'(\")\n    #endif\n</code></pre>"},{"location":"Modding/reference/northstar/httprequests/","title":"HTTP and JSON","text":"<p>As of v1.12.0, you can now make HTTP requests from Squirrel scripts. HTTP requests allow you to query online APIs, send, retrieve data and much more. </p> <p>This is particularly useful for custom APIs you might want to build for your servers, for instance if you want to wrap  a database with an API so that your servers can save player stats.</p> <p>Warning</p> <p>For security reasons, private network hosts, such as <code>localhost</code> or <code>192.168.1.106</code> are blocked by default, meaning you cannot make HTTP requests to them. This includes a blanket ban on IPv6 hosts.</p> <p>You are also limited to <code>HTTP</code> and <code>HTTPS</code> for protocols. Any other protocols will prevent the request from being made.</p>"},{"location":"Modding/reference/northstar/httprequests/#launch-arguments","title":"Launch Arguments","text":"<p>There are a few launch arguments you may use to bypass some of the limitations, or outright disable HTTP requests.</p> <p>These should be applied to your client or server's launch commandline.</p> Name Description <code>-allowlocalhttp</code> Disables private network checks for HTTP requests, allowing any IPv4 and IPv6 host to be used. <code>-disablehttprequests</code> Disables HTTP requests. Any attempts at making requests will fail. <code>-disablehttpssl</code> Disables SSL verifications, useful when the host's SSL certificate is invalid, and insecure HTTP cannot be used."},{"location":"Modding/reference/northstar/httprequests/#http-api","title":"HTTP API","text":"<p>This section documents all the available functions, structs and enums used to make HTTP request in Squirrel scripts.</p> <p>Warning</p> <p>HTTP requests are multithreaded, as such they will run in the background until completion, whether successful or failed. Be mindful of how many requests you make at a time, as you may potentially get ratelimited or blacklisted by the remote host. Use the callbacks to execute code when a request has completed.</p>"},{"location":"Modding/reference/northstar/httprequests/#data","title":"Data","text":"<p>The HTTP system uses a few enums and structs for requests and their callbacks.</p> <p>enum HttpRequestMethod</p> <p>Contains the different allowed methods for a HTTP request. Please work.</p> <p>GET = 0</p> <p>Uses the <code>GET</code> HTTP method for the request.</p> <p>POST = 1</p> <p>Uses the <code>POST</code> HTTP method for the request.</p> <p>HEAD = 2</p> <p>Uses the <code>HEAD</code> HTTP method for the request.</p> <p>PUT = 3</p> <p>Uses the <code>PUT</code> HTTP method for the request.</p> <p>DELETE = 4</p> <p>Uses the <code>DELETE</code> HTTP method for the request.</p> <p>PATCH = 5</p> <p>Uses the <code>PATCH</code> HTTP method for the request.</p> <p>OPTIONS = 6</p> <p>Uses the <code>OPTIONS</code> HTTP method for the request.</p> <p>struct HttpRequest</p> <p>Contains the settings for a HTTP request. This is used for the more flexible <code>NSHttpRequest</code> function.</p> <p>(HttpRequestMethod) int method</p> <p>HTTP method used for this HTTP request.</p> <p>string url</p> <p>Base URL of this HTTP request.</p> <p>table&lt; string, array&lt; string &gt; &gt; headers</p> <p>Headers used for this HTTP request. Some may get overridden or ignored.</p> <p>table&lt; string, array&lt; string &gt; &gt; queryParameters</p> <p>Query parameters for this HTTP request.</p> <p>string contentType = \"application/json; charset=utf-8\"</p> <p>The content type of this HTTP request. Defaults to application/json &amp; UTF-8 charset.</p> <p>string body</p> <p>The body of this HTTP request. If set, will override queryParameters.</p> <p>int timeout = 60</p> <p>The timeout for this HTTP request in seconds. Clamped between 1 and 60.</p> <p>string userAgent</p> <p>If set, the override to use for the User-Agent header.</p> <p>Warning</p> <p>Only <code>POST</code> requests can send a body to the remote end. You may only choose to send a body, or query parameters.  Having both will give priority to the body and clear the parameters.</p> <p>struct HttpRequestResponse</p> <p>Contains the response from the remote host for a successful HTTP request.</p> <p>int statusCode</p> <p>The status code returned by the remote the call was made to.</p> <p>string body</p> <p>The body of the response.</p> <p>string rawHeaders</p> <p>The raw headers returned by the remote.</p> <p>table&lt; string, array&lt; string &gt; &gt; headers</p> <p>A key -&gt; values table of headers returned by the remote.</p> <p>struct HttpRequestFailure</p> <p>Contains the failure code and message when Northstar fails to make a HTTP request.</p> <p>int errorCode</p> <p>The status code returned by the remote the call was made to.</p> <p>string errorMessage</p> <p>The reason why this HTTP request failed.</p>"},{"location":"Modding/reference/northstar/httprequests/#functions","title":"Functions","text":"<p>Warning</p> <p>Your mod needs to be load priority 1 or above to use <code>HttpRequest</code> and <code>HttpRequestResponse</code> in your script.</p> <p>bool NSHttpRequest( HttpRequest requestParameters, void functionref( HttpRequestResponse ) onSuccess = null, void functionref( HttpRequestFailure ) onFailure = null )</p> <p>Launches a HTTP request with the given request data. This function is async, and the provided callbacks will be called when it is completed, if any.</p> <p>Parameters:</p> <ul> <li><code>HttpRequest requestParameters</code> - The parameters to use for this request.</li> <li><code>[OPTIONAL] void functionref( HttpRequestResponse ) onSuccess</code> - The callback to execute if the request is successful.</li> <li><code>[OPTIONAL] void functionref( HttpRequestFailure ) onFailure</code> - The callback to execute if the request has failed.</li> </ul> <p>Returns: </p> <ul> <li>Whether or not the request has been successfully started.</li> </ul> <p>Example:</p> <p>Below is a working example of an HTTP request for a mod.</p> <p>As you can see, you can either use named functions for the callbacks, or create lambdas. Lambdas are particularly useful as they let you capture local variables of the functions to re-use later such as <code>callback</code> in this example. </p> <pre><code>    HttpRequest request\n    request.method = HttpRequestMethod.GET\n    request.url = \"https://my.spyglass.api/sanctions/get_by_id\"\n    request.queryParameters[ \"id\" ] &lt;- [ id.tostring() ]\n\n    void functionref( HttpRequestResponse ) onSuccess = void function ( HttpRequestResponse response ) : ( callback )\n    {\n        SpyglassApi_OnQuerySanctionByIdSuccessful( response, callback )\n    }\n\n    void functionref( HttpRequestFailure ) onFailure = void function ( HttpRequestFailure failure ) : ( callback )\n    {\n        SpyglassApi_OnQuerySanctionByIdFailed( failure, callback )\n    }\n\n    return NSHttpRequest( request, onSuccess, onFailure )\n</code></pre> <p>bool NSHttpGet( string url, table&lt; string, array&lt; string &gt; &gt; queryParameters = {}, void functionref( HttpRequestResponse ) onSuccess = null, void functionref( HttpRequestFailure ) onFailure = null  )</p> <p>Launches an HTTP GET request at the specified URL with the given query parameters. Shortcut wrapper of NSHttpRequest(). This function is async, and the provided callbacks will be called when it is completed, if any.</p> <p>Parameters:</p> <ul> <li><code>string url</code> - The url to make the HTTP request at.</li> <li><code>[OPTIONAL] table&lt; string, array&lt; string &gt; &gt; queryParameters</code> - A table of key value parameters to insert in the url. </li> <li><code>[OPTIONAL] void functionref( HttpRequestResponse ) onSuccess</code> - The callback to execute if the request is successful.</li> <li><code>[OPTIONAL] void functionref( HttpRequestFailure ) onFailure</code> - The callback to execute if the request has failed.</li> </ul> <p>Returns: </p> <ul> <li>Whether or not the request has been successfully started.</li> </ul> <p>Example:</p> <p>This is the same example as NSHttpRequest()'s example. However, it uses this function instead.</p> <pre><code>    table&lt;string, array&lt;string&gt; &gt; params\n    params[ \"id\" ] &lt;- [ id.tostring() ]\n\n    void functionref( HttpRequestResponse ) onSuccess = void function ( HttpRequestResponse response ) : ( callback )\n    {\n        SpyglassApi_OnQuerySanctionByIdSuccessful( response, callback )\n    }\n\n    void functionref( HttpRequestFailure ) onFailure = void function ( HttpRequestFailure failure ) : ( callback )\n    {\n        SpyglassApi_OnQuerySanctionByIdFailed( failure, callback )\n    }\n\n    return NSHttpGet( \"https://my.spyglass.api/sanctions/get_by_id\", params, onSuccess, onFailure )\n</code></pre> <p>bool NSHttpPostQuery( string url, table&lt; string, array&lt; string &gt; &gt; queryParameters, void functionref( HttpRequestResponse ) onSuccess = null, void functionref( HttpRequestFailure ) onFailure = null )</p> <p>Launches an HTTP POST request at the specified URL with the given query parameters. Shortcut wrapper of NSHttpRequest(). This function is async, and the provided callbacks will be called when it is completed, if any.</p> <p>Parameters:</p> <ul> <li><code>string url</code> - The url to make the HTTP request at.</li> <li><code>[OPTIONAL] table&lt; string, array&lt; string &gt; &gt; queryParameters</code> - A table of key value parameters to insert in the url. </li> <li><code>[OPTIONAL] void functionref( HttpRequestResponse ) onSuccess</code> - The callback to execute if the request is successful.</li> <li><code>[OPTIONAL] void functionref( HttpRequestFailure ) onFailure</code> - The callback to execute if the request has failed.</li> </ul> <p>Returns: </p> <ul> <li>Whether or not the request has been successfully started.</li> </ul> <p>bool NSHttpPostBody( string url, string body, void functionref( HttpRequestResponse ) onSuccess = null, void functionref( HttpRequestFailure ) onFailure = null )</p> <p>Launches an HTTP POST request at the specified URL with the given body. Shortcut wrapper of NSHttpRequest(). This function is async, and the provided callbacks will be called when it is completed, if any.</p> <p>This is the more interesting POST function, as you can use it to convert a table into JSON and \"POST\" it to the remote server.</p> <p>Parameters:</p> <ul> <li><code>string url</code> - The url to make the HTTP request at.</li> <li><code>string body</code> - The body to send with the request. Expects JSON by default. </li> <li><code>[OPTIONAL] void functionref( HttpRequestResponse ) onSuccess</code> - The callback to execute if the request is successful.</li> <li><code>[OPTIONAL] void functionref( HttpRequestFailure ) onFailure</code> - The callback to execute if the request has failed.</li> </ul> <p>Returns: </p> <ul> <li>Whether or not the request has been successfully started.</li> </ul> <p>Example:</p> <p>In this example, we'll convert a table to JSON, and send it over to a web API.</p> <pre><code>    table myData = {}\n    myData[ \"uid\" ] &lt;- player.GetUID()\n    myData[ \"username\" ] &lt;- player.GetPlayerName()\n    myData[ \"isBot\" ] &lt;- player.IsBot().tostring()\n\n    string json = EncodeJSON( myData )\n    if ( NSHttpPostBody( \"https://api.stats.tf/player/connect\", json ) )\n    {\n        printt( \"Successfully attempted to upload player connection stats to API.\" )\n    } \n</code></pre> <p>bool NSIsSuccessHttpCode( int statusCode )</p> <p>Checks whether or not the given HTTP status code is considered a \"success\" code.</p> <p>This is true for status codes between 200 and 299.</p> <p>Parameters:</p> <ul> <li><code>int statusCode</code> - The status code to verify.</li> </ul> <p>Returns:</p> <ul> <li>Whether or not the given status code is considered successful.</li> </ul>"},{"location":"Modding/reference/northstar/httprequests/#json_overview","title":"JSON API","text":"<p>Warning</p> <p>The JSON parser currently supports the following types for values: <code>string</code>, <code>integer</code>, <code>float</code>, <code>bool</code>, <code>table</code>, and <code>array</code>.</p> <p>Tables and arrays can only hold supported types. Unsupported types will be ignored. Keys can only be strings.</p> <p>The JSON parser currently does not support keys holding <code>null</code> values, and simply won't include them in decoded tables or encoded JSON strings.</p> <p>table DecodeJSON( string json, bool fatalParseErrors = false )</p> <p>Converts a JSON string to a Squirrel table.</p> <p>Parameters:</p> <ul> <li><code>string json</code> - The JSON string to decode into a table.</li> <li><code>[OPTIONAL] bool fatalParseErrors</code> - Whether or not parsing errors should throw a fatal script error. Default to false.</li> </ul> <p>Returns: </p> <ul> <li>The table decoded from the JSON string on success, or an empty table <code>{}</code> on parse failure (if fatalParseErrors is false).</li> </ul> <p>string EncodeJSON( table data )</p> <p>Converts a Squirrel table to a JSON string.</p> <p>Parameters:</p> <ul> <li><code>table data</code> - The table to encode to a JSON string.</li> </ul> <p>Returns: </p> <ul> <li>The JSON string parsed from the Squirrel table.</li> </ul> <p>Paired with HTTP and JSON , this allows you to send and retrieve JSON data from external sources.</p>"},{"location":"Modding/reference/northstar/modsettings/","title":"Mod Settings","text":""},{"location":"Modding/reference/northstar/modsettings/#setup","title":"Setup","text":"<p>ConVars are the easiest way to implement settings for your mod using the Mod Settings API.</p> <p>Your mod needs to register itself and all ConVars that are a part of your mod that should be accessible in the Mod Settings menu. To do this, simply add a new script to your mod that runs only in the UI VM like this:</p> <pre><code>  \"Path\": \"ui/ms_example_mod.nut\",\n  \"RunOn\": \"UI\",\n  \"UICallback\": {\n    \"Before\": \"ExampleMod_AddModSettings\"\n  }\n</code></pre> <p>Inside of the callback specified here, you can add your settings.</p>"},{"location":"Modding/reference/northstar/modsettings/#api","title":"API","text":"<p>Warning</p> <p>ConVar values will only persist if the ConVar has an ARCHIVE flag. For Clients, use <code>FCVAR_ARCHIVE_PLAYERPROFILE</code>.</p> <p>All Mod Settings functions have a <code>stackPos</code> paramter. This parameter should only be changed if you're writing custom wrappers for the settings.</p> <p>void ModSettings_AddModTitle( string modName, int stackPos = 2 )</p> <p>Adds a new category in the settings for your mod</p> <p>Note</p> <p>It's mandatory to register a mod before you can add any settings</p> <p>void ModSettings_AddModCategory( string categoryName )</p> <p>Adds a new category to your mod</p> <p>Note</p> <p>It's mandatory to register a category for your mod. A mod may have multiple categories</p> <p>void ModSettings_AddSetting( string conVar, string displayName, string type = \"\", int stackPos = 2 )</p> <p>Adds a basic setting to the last declared category.</p> <p>Parameters:</p> <ul> <li><code>string conVar</code> - the ConVar this setting modifies</li> <li><code>string displayName</code> - The display string of this setting. This can be a localization token.</li> <li><code>string type = \"\"</code> - Optional type of this ConVar. This guards against users inserting invalid values.</li> <li><code>int stackPos = 2</code></li> </ul> <p>Types:</p> <ul> <li><code>int</code></li> <li><code>bool</code></li> <li><code>float</code></li> <li><code>float2</code></li> <li><code>float3</code> / <code>vector</code></li> </ul> <p>other types will default to setting a string for the ConVar.</p> <p>void ModSettings_AddEnumSetting( string conVar, string displayName, array values, int stackPos = 2 ) <p>Adds a setting to the menu that uses an enum. Users can navigate with buttons next to the input between possible values.</p> <p>Parameters:</p> <ul> <li><code>string conVar</code> - the ConVar this setting modifies</li> <li><code>string displayName</code> - The display string of this setting. This can be a localization token.</li> <li><code>array&lt;string&gt; values</code> - all possible values of this enum. The ConVar value will be set to the index of the selected value.</li> <li><code>int stackPos = 2</code></li> </ul> <p>void ModSettings_AddSliderSetting( string conVar, string displayName, float min = 0.0, float max = 1.0, float stepSize = 0.1, bool forceClamp = false )</p> <p>Adds a ConVar setting to the menu that has a slider.</p> <p>Parameters:</p> <ul> <li><code>string conVar</code> - the conVar this setting modifies</li> <li><code>string displayName</code> - The display string of this setting. This can be a localization token.</li> <li><code>float min = 0.0</code> - the minimum value of the ConVar</li> <li><code>float max = 0.0</code> - the maximum value of the ConVar</li> <li><code>float stepSize = 0.1</code> - the distance between each possible value.</li> <li><code>bool forceClamp = false</code> - wether to force the value to round to the nearest interval of <code>stepValue</code>.</li> </ul> <p>Note</p> <p>Whenever Mod Settings is used, the value will be clamped to the nearest value available in the slider.</p> <p>void ModSettings_AddButton( string buttonLabel, void functionref() onPress, int stackPos = 2 )</p> <p>Adds a button to the menu that has a custom click callback.</p> <p>Parameters:</p> <ul> <li><code>string conVar</code> - the conVar this setting modifies</li> <li><code>void functionref() onPress</code> - callback that gets triggered when this button is pressed.</li> <li><code>int stackPos</code></li> </ul>"},{"location":"Modding/reference/northstar/modsettings/#examples","title":"Examples","text":""},{"location":"Modding/reference/northstar/modsettings/#settings-declaration","title":"Settings Declaration","text":"<pre><code>  AddModTitle( \"#MY_LOCALIZED_MOD_TITLE\" )\n\n  AddModCategory( \"Gameplay\" )\n  AddConVarSetting( \"my_mod_gamer_setting\", \"Gamer Setting\", \"string\" )\n  AddConVarSettingEnum( \"my_mod_enum_setting_whatever\", \"Cool Feature\", [ \"Disabled\", \"Enabled\" ] )\n\n  AddModCategory( \"Visuals\" )\n  AddConVarSetting( \"my_mod_display_color\", \"Display Color\", \"vector\" )\n  AddModSettingsButton( \"Preview\", void function(){ AdvanceMenu( \"MyModMenu\" ) } )  // Assumes you have \"MyModMenu\" set up etc.\n</code></pre>"},{"location":"Modding/reference/northstar/modsettings/#wrapper","title":"Wrapper","text":"<p>To create custom wrapper functions you need to specify the stack position where the root of your Mod Setting declarations take place.</p> <pre><code>  void function AddModSettingsDropDown( string displayName, array&lt;string&gt; options )\n  {\n    NSModSettingsAddButton( displayName, void function() { OpenDropDown( options ) }, 3 )\n  }\n</code></pre> <p>Note that in this example the stack position is <code>3</code>, since <code>AddModSettingsButton</code> needs to walk one additional step to the callback function.</p>"},{"location":"Modding/reference/northstar/msinterface/","title":"Server Authentification","text":"<p>Note</p> <p>All of these functions are only exposed to the <code>UI</code> VM.</p> <p>These are functions required for the ingame server browser and the authorization process for the Masterserver and game servers.</p>"},{"location":"Modding/reference/northstar/msinterface/#masterserver-authentification","title":"Masterserver Authentification","text":"<p>bool NSIsMasterServerAuthenticated()</p> <p>Returns <code>true</code> if the client is authenticated with the Masterserver</p> <p>bool NSMasterServerConnectionSuccessful()</p> <p>Returns <code>true</code> if a successful connection has been established</p>"},{"location":"Modding/reference/northstar/msinterface/#game-server-authentification","title":"Game Server Authentification","text":"<p>void NSTryAuthWithServer( int serverIndex, string password = \"\" )</p> <p>Tries authing with the fetched server at <code>serverIndex</code> and the provided password</p> <p>bool NSIsAuthenticatingWithServer()</p> <p>Returns <code>true</code> if the client is currently authing with a game server</p> <p>bool NSWasAuthSuccessful()</p> <p>Returns <code>true</code> if the client successfully authed with a game server</p> <p>void NSConnectToAuthedServer()</p> <p>Tries to connect to the game server that has previously been authenticated with</p> <p>string NSGetAuthFailReason()</p> <p>Returns the API reason why the last authentification failed</p> <p>void NSTryAuthWithLocalServer()</p> <p>Tries to authenticate with the local game server</p> <p>void NSCompleteAuthWithLocalServer()</p> <p>Call this after <code>NSWasAuthSuccessful</code> returns <code>true</code> to complete the local authorization process. </p>"},{"location":"Modding/reference/northstar/msinterface/#server-information","title":"Server Information","text":"<p>void NSRequestServerList()</p> <p>Start fetching all available game servers from the Masterserver</p> <p>bool NSIsRequestingServerList()</p> <p>Returns <code>true</code> if the last request by </p> <p>int NSGetServerCount()</p> <p>Returns the total amount of fetched game servers</p> <p>void NSClearRecievedServerList()</p> <p>Clears all fetched game servers</p> <p>array NSGetGameServers() <p>Returns an array of all available Servers fetched from the Masterserver.</p>"},{"location":"Modding/reference/northstar/msinterface/#connection-callbacks","title":"Connection Callbacks","text":"<p>void AddConnectToServerCallback( void functionref( ServerInfo ) callback )</p> <p>Add a callback to be executed right before connecting to a game server via the Server Browser</p> <p>void RemoveConnectToServerCallback( void functionref( ServerInfo ) callback )</p> <p>Remove a function object from the list of callbacks</p> <p>void TriggerConnectToServerCallbacks()</p> <p>Runs all callbacks that have been registered with <code>AddConnectToServerCallback</code></p>"},{"location":"Modding/reference/northstar/msinterface/#script-structs","title":"Script Structs","text":"<p>ServerInfo</p> <p>Contains all info about a game server.</p> <p>int index</p> <p>Index of the native Object equivalent</p> <p>string id</p> <p>ID assigned to the game server by the Masterserver in the registration</p> <p>string name</p> <p>Name of this game server</p> <p>string description</p> <p>Description of this game server</p> <p>string map</p> <p>Unlocalized name of the map that's currently running on the game server</p> <p>string playlist</p> <p>Unlocalized name of the playlist that's currently running on the game server</p> <p>int playerCount</p> <p>The total amount of players currently connected to the player</p> <p>int maxPlayerCount</p> <p>The maximum amount of players that can connect to the server</p> <p>bool requiresPassword</p> <p>If <code>true</code> an extra password is required to connect to the server. Otherwise the password is an empty string</p> <p>string region</p> <p>Unlocalized region where the physical server is located</p> <p>array requiredMods <p>Array of all mods that are required to be loaded on the client to be able to join the server</p> <p>RequiredModInfo</p> <p>Information of a mod that has to be loaded on the client in order to join a game server</p> <p>string name</p> <p>Name of the mod</p> <p>string version</p> <p>Version of the mod</p>"},{"location":"Modding/reference/northstar/safeio/","title":"Safe I/O","text":"<p>If you want to store an extended amount of data in your mod it is not sustainable to only use ConVars as they are limited in space and easily reset. With Safe I/O you are able to write to one folder (<code>&lt;profile&gt;/saves/&lt;mod directory name&gt;</code>). In this folder you can store text files of any type (e.g. <code>.txt</code>, <code>.json</code>), it's also possible to use non text file formats (e.g. <code>.exe</code>) however you won't be able to run them on your PC. It also allows for sub-folders.</p>"},{"location":"Modding/reference/northstar/safeio/#saving-a-file","title":"Saving a file","text":"<p>To save a file you need the content you want to save as <code>strings-overview</code> , for this the <code>json_overview</code> functions can be useful if you want to store <code>table_overview</code> or <code>arrays_overview</code>.</p> <p>To actually save the file you use:</p> <p>void NSSaveFile( string file, string data )</p> <ul> <li> <p><code>string file</code> The name of the file you want to store, this supports sub folders. Needs to be with the file type (e.g. <code>/TitanData/tone.txt</code>).</p> </li> <li> <p><code>string data</code> The saved data, this can be any valid String.</p> </li> </ul> <p>Alternatively if you want a faster way to store <code>table_overview</code> you can use:</p> <p>void NSSaveJSONFile(string file, table data)</p> <ul> <li> <p><code>string file</code> The name of the file you want to store, this supports sub folders. Doesn't have to be <code>.json</code> but will use the correct formatting for a <code>.json</code>.</p> </li> <li> <p><code>table data</code> The table that will be written to the file, this only supports the types specified in the <code>json_overview</code>.</p> </li> </ul>"},{"location":"Modding/reference/northstar/safeio/#loading-a-file","title":"Loading a file","text":"<p>void function NSLoadFile( string file, void functionref( string ) onSuccess, void functionref() onFailure = null )</p> <ul> <li> <p><code>string file</code> This is the name of the file you want to load, it has the same formating as in <code>NSSaveFile</code>.</p> </li> <li> <p><code>void functionref( string ) onSuccess</code> The function that gets execued when the file is successfully loaded, the parameter <code>string</code> is the content of the loaded file.</p> </li> <li> <p><code>void functionref() onFailure = null</code> The function that gets execued when the loading was NOT successful, by default the function is just <code>null</code>.</p> </li> </ul> <p>Note</p> <p>If you are having trouble with functionrefs you can read up on them here: :ref:<code>functionref_overview</code></p> <p>You can also get all saved file:</p> <p>array function NSGetAllFiles( string path = \"\" ) <ul> <li><code>string path = \"\": Gets all files in a specified path, by default its just</code>/saves/`. <p>Returns: An array with all file names in the specified path.</p>"},{"location":"Modding/reference/northstar/safeio/#deleting-a-file","title":"Deleting a file","text":"<p>void NSDeleteFile(string file)</p> <p><code>string file</code> This is the name of the file you want to check exsits, it has the same formating as in <code>NSSaveFile</code>.</p>"},{"location":"Modding/reference/northstar/safeio/#file-checks","title":"File checks","text":"<p>bool NSDoesFileExist(string file)</p> <p><code>string file</code> This is the name of the file you want to check exsits, it has the same formating as in <code>NSSaveFile</code>.</p> <p>Returns: <code>true</code> if the file was found, otherwise it returns <code>false</code>.</p> <p>int NSGetFileSize(string file)</p> <p><code>string file</code>: This is the name of the file you want to get the file size from.</p> <p>Returns: KB size of the specified file.</p> <p>Warning</p> <p>This fucntion will raise an error when the file doesnt exist.</p> <p>bool NSIsFolder(string path)</p> <p><code>string file</code> This is the path you want to check.</p> <p>Returns: <code>true</code> if the path is a folder, otherwise it returns <code>false</code>.</p> <p>int NSGetTotalSpaceRemaining()</p> <p>Returns: Amount of KB you have left to write on.</p> <p>Note</p> <p>The max size of data you can store is <code>50MB</code> per mod. Can be overwritten with <code>-maxfoldersize BYTES</code> in the launch args.</p>"},{"location":"Modding/reference/northstar/serversiderui/","title":"Serverside RUI","text":"<p>Server-side Rui provides a set of functions enabling servers to display complex hud elements on clients without requiring a client-side mod. These functions were introduced in Northstar <code>1.10.0</code>.</p> <p>It should be noted that there\u2019s no guarantee the client will see the hud elements.</p>"},{"location":"Modding/reference/northstar/serversiderui/#polls","title":"Polls","text":"<p>Creates a poll on <code>player</code>.</p> Player POV <p>Definition:</p> <p>void NSCreatePollOnPlayer( entity player, string header, array options, float duration ) <p>Example:</p> <pre><code>    void function CreateDummyPoll()\n     {\n        array&lt;string&gt; options = [ \"Vote for a map!\", \"Amongsus\", \"sussy\", \"when\", \"1.10\", \"hi H0l0\" ]\n        foreach(entity player in GetPlayerArray())\n            NSCreatePollOnPlayer(player, \"Vote who's the biggest dummy!\", options, 30)\n      }\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#getting-response","title":"Getting Response","text":"<p>Definition:</p> <p>int NSGetPlayerResponse( entity player )</p> <p>Returns the index of the item from <code>options</code> the player voted for. If the player hadn't voted yet it returns a -1.</p> <p>Example:</p> <pre><code>    void function CheckResponseToDummyPoll(entity player)\n    {\n        if(NSGetPlayerResponse(player) != -1)\n            print(\"Player has voted!\")\n    }\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#large-message","title":"Large Message","text":"<p>Sends a large message to <code>player</code> which will appear in the top right corner.</p> Player POV <p>Definition:</p> <p>void NSSendLargeMessageToPlayer( entity player, string title, string description, float duration, string image )</p> <p>Example:</p> <pre><code>    void function SendDummyLargeMessage(entity player)\n    {\n        NSSendLargeMessageToPlayer(player,\"I'm not a dummy &gt;:(\", \"You are\", 10, \"ui/fd_tutorial_tip.rpak\")\n    }\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#info-message","title":"Info Message","text":"<p>Sends a smaller message to <code>player</code> which will appear from the center right.</p> Player POV <p>Definition:</p> <p>void NSSendInfoMessageToPlayer( entity player, string text )</p> <p>Example:</p> <pre><code>    void function SendDummyInfoMessage(entity player)\n    {\n        NSSendInfoMessageToPlayer(player, \"we were sent at the same time but I was sent sooner\")\n    }\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#popup","title":"PopUp","text":"<p>Send a small popup to <code>player</code> which will appear in the lower half of their screen under their cursor.</p> Player POV <p>Definition:</p> <p>void function NSSendPopUpMessageToPlayer( entity player, string text )</p> <p>Example:</p> <pre><code>    void funcions SendDummyPopUp(entity player)\n    {\n        NSSendPopUpMessageToPlayer(player, \"very cool text I like\")\n    }\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#announcement","title":"Announcement","text":"<p>Sends a large announcement to <code>player</code>.</p> Player POV <p>Definition:</p> <p>void NSSendAnnouncementMessageToPlayer( entity player, string title, string description, vector color, int priority, int style )</p> <p>Example:</p> <pre><code>      void function SendDummyAnnouncement(entity player)\n      {\n          NSSendAnnouncementMessageToPlayer(player, \"Very cool announcement\", \"Hi Karma\", &lt;1,1,0&gt;, 1, ANNOUNCEMENT_STYLE_QUICK)\n      }\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#status","title":"Status","text":"<p>Status messages allow you to show live data to the player. Currently status messages are limited to 4 and there's no way to know if the player can see your message.</p> Player POV <p>Definitions:</p> <p>void  NSCreateStatusMessageOnPlayer( entity player, string title, string description, string id )</p> <p>Creates a status message on <code>player</code>. <code>id</code> is used to identify and edit the message, make sure your id is unique! To generate a unique id, use UniqueString().</p> <p>void  NSEditStatusMessageOnPlayer( entity player, string title, string description, string id  )</p> <p>Allows for editing of the <code>title</code> and <code>description</code> of a message which was created using <code>id</code>.</p> <p>void  NSDeleteStatusMessageOnPlayer( entity player, string id  )</p> <p>Deletes the status message which was created with <code>id</code></p> <p>Examples:</p> <pre><code>    void function TestStatusMessage_Threaded(entity player)\n    {\n        string id = UniqueString(\"votes#\")\n        NSCreateStatusMessageOnPlayer(player, \"have voted\", \"[0/12]\", id)\n        wait 3\n        NSEditStatusMessageOnPlayer(player, \"have voted\", \"[1/12]\", id)\n        wait 10\n        NSDeleteStatusMessageOnPlayer(player, id)    \n    }\n</code></pre>"},{"location":"Modding/reference/northstar/usefulfuncs/","title":"Useful Functions","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#custom-ejection-messages","title":"Custom Ejection Messages","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#how-ejection-messages-are-chosen","title":"How ejection messages are chosen","text":"<p>When ejecting the game selects a random number between 0 and 1, if this number is greater than 0.15 then a random common eject message is returned, if it is less than 0.15 then a rare ejection message is returned.</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#adding-new-messages","title":"Adding new messages","text":"<p>Using <code>AddCommonEjectMessage( String message )</code> and <code>AddRareEjectMessage( String message )</code> in script additional messages can be added to the pool of potential ejection messages</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#localisation","title":"Localisation","text":"<p>Like most things custom ejection messages can be localised through keyvalues</p> <p>There are no functions to remove ejection messages, however existing ones can be altered by modifying localisation files</p> <p>Below are a list of useful functions added by Northstar.</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#player-functions","title":"Player functions","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#check-for-different-weapon-types-on-a-player","title":"Check for different weapon types on a player","text":"<p>bool function HasWeapon( entity ent, string weaponClassName, array mods = [] ) <p>bool function HasOrdnance( entity ent, string weaponClassName, array mods = [] ) <p>bool function HasCoreAbility( entity ent, string weaponClassName, array mods = [] ) <p>bool function HasSpecial( entity ent, string weaponClassName, array mods = [] ) <p>bool function HasAntiRodeo( entity ent, string weaponClassName, array mods = [] ) <p>bool function HasMelee( entity ent, string weaponClassName, array mods = [] ) <p>bool function HasOffhandForSlot( entity ent, int slot, string weaponClassName, array mods = [] ) <p>bool function WeaponHasSameMods( entity weapon, array mods = [] ) <p>bool function HasOffhandWeapon( entity ent, string weaponClassName )</p> <p>bool function PilotHasSniperWeapon( entity player )</p> <p>bool function PilotActiveWeaponIsSniper( entity player )</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#get-weapon-from-entity","title":"Get weapon from entity","text":"<p>string function GetActiveWeaponClass( entity player )</p> <p>entity function GetPilotAntiPersonnelWeapon( entity player )</p> <p>entity function GetPilotSideArmWeapon( entity player )</p> <p>entity function GetPilotAntiTitanWeapon( entity player )</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#take-weapon-from-entity","title":"Take weapon from Entity","text":"<p>bool function TakePrimaryWeapon( entity player )</p> <p>bool function TakeSecondaryWeapon( entity player )</p> <p>bool function TakeSidearmWeapon( entity player )</p> <p>void function EnableOffhandWeapons( entity player )</p> <p>void function DisableOffhandWeapons( entity player )</p> <p>void function EnableOffhandWeapons( entity player )</p> <p>void function TakeAllWeapons( entity ent )</p> <p>void function TakeWeaponsForArray( entity ent, array weapons )"},{"location":"Modding/reference/northstar/usefulfuncs/#validity-checks-for-player","title":"Validity checks for player","text":"<p>bool function PlayerCanTeleportHere( entity player, vector testOrg, entity ignoreEnt = null )</p> <p>Note</p> <p>Respawn comment next to the function:</p> <p><code>TODO: This is a copy of SP's PlayerPosInSolid(). Not changing it to avoid patching SP. Merge into one function next game</code></p> <p>bool function PlayerSpawnpointIsValid( entity ent )</p> <p>bool function EntityInSolid( entity ent, entity ignoreEnt = null, int buffer = 0 ) </p> <p>Note</p> <p>Respawn comment next to the function:</p> <p><code>TODO:  This function returns true for a player standing inside a friendly grunt. It also returns true if you are right up against a ceiling.Needs fixing for next game</code></p> <p>bool function EntityInSpecifiedEnt( entity ent, entity specifiedEnt, int buffer = 0 )</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#change-a-players-invincibility","title":"Change a players invincibility","text":"<p>void function MakeInvincible( entity ent )</p> <p>void function ClearInvincible( entity ent )</p> <p>bool function IsInvincible( entity ent )</p> <p>bool function IsFacingEnemy( entity guy, entity enemy, int viewAngle = 75 )</p> <p>bool function PlayerHasTitan( entity player )</p> <p>void function ScaleHealth( entity ent, float scale )</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#entity-functions","title":"Entity functions","text":"<p>float function GetEntHeight( entity ent )</p> <p>float function GetEntWidth( entity ent )</p> <p>float function GetEntDepth( entity ent )</p> <p>void function PushEntWithVelocity( entity ent, vector velocity )</p> <p>vector function GetCenter( array ents )"},{"location":"Modding/reference/northstar/usefulfuncs/#turret-functions","title":"Turret functions","text":"<p>void function TurretChangeTeam( entity turret, int team )</p> <p>void function MakeTurretInvulnerable( entity turret )</p> <p>void function MakeTurretVulnerable( entity turret )</p> <p>void function UpdateTurretClientSideParticleEffects( entity turret )</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#rest-so-far-to-be-sorted","title":"Rest so far to be sorted","text":"<p>array function GetAllMinions() <p>entity function GetLocalClientPlayer()</p> <p>Note</p> <p>this function only exists on clients</p> <p>array function GetPlayerArray() <p>Note</p> <p>A cleaner way to get a player:</p> <p>entity function GetPlayerByIndex( int index )</p> <p>array function GetPlayerArrayOfTeam(int team) <p>void function DropWeapon( entity npc )</p> <p>Note</p> <p>this function only works on NPCs and not on players</p> <p>void function ClearDroppedWeapons( float delayTime = 0.0 )</p> <p>void function ClearActiveProjectilesForTeam( int team, vector searchOrigin = &lt;0,0,0&gt;, float searchDist = -1 )</p> <p>void function ClearChildren( entity parentEnt )</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#titans","title":"Titans","text":"<p>bool function TitanHasRegenningShield( entity soul )</p> <p>void function DelayShieldDecayTime( entity soul, float delay )</p> <p>void function GiveAllTitans()</p> <p>float ornull function GetTitanCoreTimeRemaining( entity player )</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#gamemode-functions","title":"Gamemode functions","text":"<p>int function GetCurrentWinner( int defaultWinner = TEAM_MILITIA )</p> <p>Note</p> <p>Does not work for FFA modes</p> <p>string NSGetLocalPlayerUID()</p> <p>Returns the local player's UID, else <code>null</code>. Available on CLIENT, UI and SERVER VM.</p> <p>bool function IsMultiplayer()</p> <p>bool function IsSingleplayer()</p> <p>string function GetMapName()</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#threaded-conditonals","title":"Threaded conditonals","text":"<p>void function WaitTillLookingAt( entity player, entity ent, bool doTrace, float degrees, float minDist = 0, float timeOut = 0, entity trigger = null, string failsafeFlag = \"\" )</p> <p>void function WaitUntilShieldFades( entity player, entity titan, entity bubbleShield, float failTime )</p> <p>entity function WaitUntilPlayerPicksUp( entity ent )</p> <p>void function WaitForHotdropToEnd( entity titan )</p> <p>var function WaittillGameStateOrHigher( state )</p> <p>void function WaitTillCraneUsed( entity craneModel )</p> <p>void function WaitTillHotDropComplete( entity titan )</p> <p>var function WaitForNPCsDeployed( npcArray )</p> <p>var function WaittillPlayDeployAnims( ref )</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#random-functions","title":"Random functions","text":"<p>bool function IsPlayerMalePilot( entity player )</p> <p>bool function IsPlayerFemalePilot( entity player )</p> <p>void function RandomizeHead( entity model ) </p> <p>Randomize head across all available heads</p> <p>void function RandomizeHeadByTeam( entity model, int headIndex, int numOfHeads ) </p> <p>Randomize head across heads available to a particular team. Assumes for a model all imc heads are first, then all militia heads are later.</p> <p>void function CreateZipline( vector startPos, vector endPos )</p> <p>bool function HasTeamSkin( entity model )</p> <p>void function DropToGround( entity ent )</p> <p>void function DropTitanToGround( entity titan, array ignoreEnts )"},{"location":"Modding/reference/northstar/usefulfuncs/#type-utilities","title":"Type Utilities","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#table","title":"Table","text":"<p>void function TableRemoveInvalid( table Table ) <p>void function TableRemoveInvalidByValue( table Table ) <p>void function TableRemoveDeadByKey( table Table ) <p>array TableKeysToArray( table Table )"},{"location":"Modding/reference/northstar/usefulfuncs/#arrays","title":"Arrays","text":"<p>int function array.find(var value)</p> <p>this returns <code>-1</code> if the item was not found in the array</p> <p>array.fastremove(var)</p> <p>Removes a variable by value instead of index.</p> <p>array.randomize()</p> <p>Reorders the array randomly.</p> <p>array.getrandom()</p> <p>returns a random element from array</p> <p>array.resize(int newSize, var fillValue = 0)</p> <p>changes the size of the array to the first int, new slots will be filled with the 2<sup>nd</sup> argument. </p> <p>array.sort( compare_func = null )</p> <p>Note</p> <p>A few built-in functions you can give as arguments to sort an array.</p> Array Sort Functions <p>int function SortLowest( var a, var b )</p> <p>int function SortHighest( var a, var b )</p> <p>int function SortItemsAlphabetically(var a, var b )</p> <p>int function SortAlphabetize( var a, var b )</p> <p>int function SortStringAlphabetize( string a, string b )</p> <p>int function SortStringAsset( asset a, asset b )</p> <p>int function SortBySpawnTime( entity a, entity b )</p> <p>Functions for score comparison</p> <p>int function CompareKills( entity a, entity b )</p> <p>int function CompareAssaultScore( entity a, entity b )</p> <p>int function CompareScore( entity a, entity b )</p> <p>int function CompareAssault( entity a, entity b )</p> <p>int function CompareDefense( entity a, entity b )</p> <p>int function CompareLTS( entity a, entity b )</p> <p>int function CompareCP( entity a, entity b )</p> <p>int function CompareCTF( entity a, entity b )</p> <p>int function CompareSpeedball( entity a, entity b )</p> <p>int function CompareMFD( entity a, entity b )</p> <p>int function CompareScavenger( entity a, entity b )</p> <p>int function CompareFW( entity a, entity b )</p> <p>int function CompareHunter( entity a, entity b )</p> <p>int function CompareATCOOP( entity a, entity b )</p> <p>int function CompareFD( entity a, entity b )</p> <p>int function CompareTitanKills( entity a, entity b )</p> <p>array.reverse()</p> <p>reverse the array in place</p> <p>array.slice(int start, int end = null)</p> <p>Note</p> <p>Returns a section of the array as new array. Copies from start to the end (not included). If start is negative the index is calculated as length + start, if end is negative the index is calculated as length + end. If end is omitted end is equal to the array length.</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#string","title":"String","text":"<p>var function UniqueString( titleString = \"\" )</p> <p>returns a unique string</p> <p>string function StringReplace(string original, string toReplace, string replacement)</p> <p>Note</p> <p>Returns the new string with the first occurance of the toReplace string.\"</p> <p>string function format( string template, ... )</p> <p>Returns a formatted template</p> <p>string function Localize( string token )</p> <p>Note</p> <p>replaces text that should be localized on the client</p> <pre><code>    string localized = Localize( token )\n</code></pre> <p>int ornull function string.find( string s )</p> <p>Warning</p> <p>returns <code>null</code> if the string is not found.</p> <p>You can eliminate the possibility of the returned index being null by casting like this:</p> <pre><code>    int ornull index = GetMapName().find( \"mp\" )\n\n    if( !index )\n        return\n    int( index )\n    int n = index + 1 //now we do not need the ornull anymore\n</code></pre> <p>string function string.slice( int start, int end = null )</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#float","title":"Float","text":"<p>float function RandomFloatRange( float min, float max)</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#integer","title":"Integer","text":"<p>int function RandomIntRange( int min, int max )</p> <p>int function RandomIntRangeInclusive( int min, int max )</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#vectors","title":"Vectors","text":"<p>vector function RandomVec( float range )</p>"},{"location":"Modding/reference/respawn/callbacks/","title":"Callbacks","text":"<p>Callbacks from Respawn native code</p> <p>Callbacks within squirrel trigger functions when certain events occur. </p> <p>They will also often pass arguments to those functions based on the callbacks used.</p> <p>Please refer to Custom Northstar Callbacks for callbacks defined in Northstar.</p>"},{"location":"Modding/reference/respawn/callbacks/#_codecallbacks_commongnut","title":"_codecallbacks_common.gnut:","text":"<p>void AddDamageCallback( string className, void functionref( entity, var ) callbackFunc )</p> <p>void RemoveDamageCallback( string className, void functionref( entity, var ) callbackFunc )</p> <p>void RunClassDamageCallbacks( entity ent, var damageInfo )</p> <p>void AddDamageFinalCallback( string className, void functionref( entity, var ) callbackFunc )</p> <p>void RunClassDamageFinalCallbacks( entity ent, var damageInfo )</p> <p>void AddPostDamageCallback( string className, void functionref( entity, var ) callbackFunc )</p> <p>void RunClassPostDamageCallbacks( entity ent, var damageInfo )</p> <p>void AddDamageByCallback( string className, void functionref( entity, var ) callbackFunc )</p> <p>void AddDamageCallbackSourceID( int id, void functionref(entity, var) callbackFunc )</p> <p>void AddDeathCallback( string className, void functionref( entity, var ) callbackFunc )</p> <p>void RemoveDeathCallback( string className, void functionref( entity, var ) callbackFunc )</p> <p>void AddSoulDeathCallback( void functionref( entity, var ) callbackFunc )</p> <p>void AddCallback_OnTouchHealthKit( string className, bool functionref( entity player, entity healthpack ) callbackFunc )</p> <p>void AddCallback_OnPlayerRespawned( void functionref( entity ) callbackFunc )</p> <p>void AddCallback_OnPlayerKilled( void functionref( entity victim, entity attacker, var damageInfo ) callbackFunc )</p> <p>void AddCallback_OnNPCKilled( void functionref( entity victim, entity attacker, var damageInfo ) callbackFunc )</p> <p>void AddCallback_OnTitanDoomed( void functionref( entity victim, var damageInfo ) callbackFunc )</p> <p>void AddCallback_OnTitanHealthSegmentLost( void functionref( entity victim, entity attacker ) callbackFunc )</p> <p>void AddCallback_OnClientConnecting( void functionref( entity player ) callbackFunc )</p> <p>void AddCallback_OnClientConnected( void functionref( entity player ) callbackFunc )</p> <p>void AddCallback_OnClientDisconnected( void functionref( entity player ) callbackFunc )</p> <p>void AddCallback_OnPilotBecomesTitan( void functionref( entity pilot, entity npc_titan ) callbackFunc )</p> <p>void AddCallback_OnTitanBecomesPilot( void functionref( entity pilot, entity npc_titan ) callbackFunc )</p> <p>void AddCallback_OnPlayerAssist( void functionref( entity attacker, entity victim ) callbackFunc )</p> <p>void AddCallback_EntityChangedTeam( string className, void functionref( entity ent ) callbackFunc )</p> <p>void AddCallback_OnTitanGetsNewTitanLoadout( void functionref( entity titan, TitanLoadoutDef newTitanLoadout ) callbackFunc )</p> <p>void AddCallback_OnPlayerGetsNewPilotLoadout( void functionref( entity player, PilotLoadoutDef newTitanLoadout ) callbackFunc )</p> <p>void AddCallback_OnUpdateDerivedTitanLoadout( void functionref( TitanLoadoutDef newTitanLoadout ) callbackFunc )</p> <p>void AddCallback_OnUpdateDerivedPlayerTitanLoadout( void functionref( entity player, TitanLoadoutDef newTitanLoadout ) callbackFunc )</p> <p>void AddCallback_OnUpdateDerivedPilotLoadout( void functionref( PilotLoadoutDef newPilotLoadout ) callbackFunc )</p> <p>void AddClientCommandCallback( string commandString, bool functionref( entity player, array args ) callbackFunc ) <p>void AddPlayerDropScriptedItemsCallback( void functionref(entity player) callbackFunc )</p> <p>void RegisterForDamageDeathCallbacks( entity ent )</p> <p>void AddTitanCallback_OnHealthSegmentLost( entity ent, void functionref( entity titan, entity victim ) callbackFunc )</p> <p>void RemoveTitanCallback_OnHealthSegmentLost( entity ent, void functionref( entity titan, entity victim ) callbackFunc )</p> <p>void AddEntityCallback_OnDamaged( entity ent, void functionref( entity ent, var damageInfo ) callbackFunc )</p> <p>void RemoveEntityCallback_OnDamaged( entity ent, void functionref( entity ent, var damageInfo ) callbackFunc )</p> <p>void AddEntityCallback_OnPostDamaged( entity ent, void functionref( entity ent, var damageInfo ) callbackFunc )</p> <p>void RemoveEntityCallback_OnPostDamaged( entity ent, void functionref( entity ent, var damageInfo ) callbackFunc )</p> <p>void AddEntityCallback_OnKilled( entity ent, void functionref( entity, var ) callbackFunc )</p> <p>void RemoveEntityCallback_OnKilled( entity ent, void functionref( entity, var ) callbackFunc )</p> <p>void AddEntityCallback_OnPostShieldDamage( entity ent, void functionref( entity, var, float ) callbackFunc )</p> <p>void RemoveEntityCallback_OnPostShieldDamage( entity ent, void functionref( entity, var, float ) callbackFunc )</p> <p>void AddPlayerMovementEventCallback( entity player, int playerMovementEvent, void functionref( entity player ) callbackFunc )</p> <p>void RemovePlayerMovementEventCallback( entity player, int playerMovementEvent, void functionref( entity player ) callbackFunc )</p> <p>void AddCallback_OnPlayerInventoryChanged( void functionref( entity ) callbackFunc )</p>"},{"location":"Modding/reference/respawn/callbacks/#_codecallbacks_player_inputgnut","title":"_codecallbacks_player_input.gnut:","text":"<p>void AddPlayerInputEventCallback_Internal( entity player, PlayerInputEventCallbackStruct inputCallbackStruct ) //Not really meant to be used directly unless you know what you're doing! Use utility functions like AddButtonPressedPlayerInputCallback instead</p> <p>void RemovePlayerInputEventCallback_Internal( entity player, PlayerInputEventCallbackStruct inputCallbackStruct ) //Not really meant to be used directly unless you know what you're doing! Use utility functions like RemoveButtonPressedPlayerInputCallback instead</p> <p>bool InputEventCallbackAlreadyExists( entity player, PlayerInputEventCallbackStruct inputCallbackStruct )</p> <p>void AddPlayerHeldButtonEventCallback( entity player, int buttonEnum,  void functionref( entity player ) callbackFunc, float buttonHeldTime = 1.0 )</p> <p>void RemovePlayerHeldButtonEventCallback( entity player, int buttonEnum,  void functionref( entity player ) callbackFunc, float buttonHeldTime = 1.0 )</p> <p>bool HeldEventCallbackAlreadyExists( entity player, PlayerHeldButtonEventCallbackStruct callbackStruct )</p> <p>void AddButtonPressedPlayerInputCallback( entity player, int buttonEnum, void functionref( entity player ) callbackFunc )</p> <p>void RemoveButtonPressedPlayerInputCallback( entity player, int buttonEnum, void functionref( entity player ) callbackFunc )</p> <p>void AddButtonReleasedPlayerInputCallback( entity player, int buttonEnum, void functionref( entity player ) callbackFunc )</p> <p>void RemoveButtonReleasedPlayerInputCallback( entity player, int buttonEnum, void functionref( entity player ) callbackFunc )</p> <p>void RunHeldCallbackAfterTimePasses( entity player, PlayerHeldButtonEventCallbackStruct callbackStruct )</p> <p>string GetEndSignalNameForHeldButtonCallback( PlayerHeldButtonEventCallbackStruct callbackStruct  )</p> <p>bool InputCallbackStructsAreTheSame( PlayerInputEventCallbackStruct callbackStruct1, PlayerInputEventCallbackStruct callbackStruct2  ) //Really just a comparison function because == does a compare by reference, not a compare by value</p> <p>bool PlayerInputsMatchCallbackInputs( int cmdsHeld, int cmdsPressed, int cmdsReleased, PlayerInputEventCallbackStruct callbackStruct  )</p> <p>bool HeldButtonCallbackStructsAreTheSame( PlayerHeldButtonEventCallbackStruct struct1, PlayerHeldButtonEventCallbackStruct struct2 ) //Really just a comparison function because == does a compare by reference, not a compare by value</p> <p>void TurnOffInputCallbacksIfNecessary( entity player )</p> <p>PlayerInputAxisEventCallbackStruct MakePressedForwardCallbackStruct()</p> <p>void AddPlayerPressedForwardCallback( entity player, bool functionref( entity player ) callbackFunc, float debounceTime = 2.0 )</p> <p>void RemovePlayerPressedForwardCallback( entity player, bool functionref( entity player ) callbackFunc, float debounceTime = 2.0 )</p> <p>PlayerInputAxisEventCallbackStruct MakePressedBackCallbackStruct()</p> <p>void AddPlayerPressedBackCallback( entity player, bool functionref( entity player ) callbackFunc, float debounceTime = 2.0 )</p> <p>void RemovePlayerPressedBackCallback( entity player, bool functionref( entity player ) callbackFunc, float debounceTime = 2.0 )</p> <p>PlayerInputAxisEventCallbackStruct MakePressedLeftCallbackStruct()</p> <p>void AddPlayerPressedLeftCallback( entity player, bool functionref( entity player ) callbackFunc, float debounceTime = 2.0 )</p> <p>void RemovePlayerPressedLeftCallback( entity player, bool functionref( entity player ) callbackFunc, float debounceTime = 2.0 )</p> <p>PlayerInputAxisEventCallbackStruct MakePressedRightCallbackStruct()</p> <p>void AddPlayerPressedRightCallback( entity player, bool functionref( entity player ) callbackFunc, float debounceTime = 2.0 )</p> <p>void RemovePlayerPressedRightCallback( entity player, bool functionref( entity player ) callbackFunc, float debounceTime = 2.0 )</p> <p>void AddPlayerInputAxisEventCallback_Internal( entity player, PlayerInputAxisEventCallbackStruct callbackStruct )</p> <p>void RemovePlayerInputAxisEventCallback_Internal( entity player, PlayerInputAxisEventCallbackStruct callbackStruct )</p> <p>bool InputAxisEventCallbackAlreadyExists( entity player, PlayerInputAxisEventCallbackStruct callbackStruct )</p> <p>bool InputAxisCallbackStructsAreTheSame( PlayerInputAxisEventCallbackStruct callbackStruct1, PlayerInputAxisEventCallbackStruct callbackStruct2  ) //Really just a comparison function because == does a compare by reference, not a compare by value</p> <p>bool ShouldRunPlayerInputAxisCallbackFunc( float horizAxis, float vertAxis, PlayerInputAxisEventCallbackStruct callbackStruct )</p> <p>bool IsValidPlayerInputAxisEventCallbackStruct( PlayerInputAxisEventCallbackStruct callbackStruct  )</p> <p>void RunPlayerInputAxisCallbackFunc( entity player, PlayerInputAxisEventCallbackStruct callbackStruct )</p> <p>void RunInputAxisCallbackAfterTimePasses( entity player, PlayerInputAxisEventCallbackStruct callbackStruct )</p>"},{"location":"Modding/reference/respawn/callbacks/#_global_entitiesgnut","title":"_global_entities.gnut:","text":"<p>function( callback )</p>"},{"location":"Modding/reference/respawn/callbacks/#_itemsnut","title":"_items.nut:","text":"<p>void StatsCallback_ItemUnlockUpdate( entity player, float changeInValue, string itemRef )</p> <p>void StatsCallback_SubItemUnlockUpdate( entity player, float changeInValue, string fullRef )</p>"},{"location":"Modding/reference/respawn/callbacks/#_on_spawnedgnut","title":"_on_spawned.gnut:","text":"<p>void AddSpawnCallback( string classname, void functionref( entity ) func )</p> <p>void AddSpawnCallbackEditorClass( string classname, string editorClassname, void functionref( entity ) func )</p> <p>function( entity self )</p> <p>function( entity self )</p> <p>void RunScriptNameCallbacks( entity ent )</p> <p>void AddSpawnCallback_ScriptName( string scriptName, void functionref( entity ) func )</p> <p>void RunScriptNoteworthyCallbacks( entity ent )</p> <p>void AddScriptNoteworthySpawnCallback( string script_noteworthy, void functionref( entity ) func )</p>"},{"location":"Modding/reference/respawn/callbacks/#_passivesgnut","title":"_passives.gnut:","text":"<p>void PassiveDeathCallback( entity player, var damageInfo )</p>"},{"location":"Modding/reference/respawn/callbacks/#_script_triggersgnut","title":"_script_triggers.gnut:","text":"<p>void AddCallback_ScriptTriggerEnter( entity trigger, void functionref( entity, entity ) callbackFunc )</p> <p>void AddCallback_ScriptTriggerLeave( entity trigger, void functionref( entity, entity )  callbackFunc )</p>"},{"location":"Modding/reference/respawn/callbacks/#_utility_sharednut","title":"_utility_shared.nut:","text":"<p>void AddCallback_OnUseEntity( entity ent, callbackFunc )</p> <p>void RunCallbacks_EntitiesDidLoad()</p> <p>void AddCallback_EntitiesDidLoad( EntitiesDidLoadCallbackType callback )</p>"},{"location":"Modding/reference/respawn/callbacks/#_utilitygnut","title":"_utility.gnut:","text":"<p>void AddCallback_GameStateEnter( int gameState, void functionref() callbackFunc )</p> <p>void GM_SetObserverFunc( void functionref( entity ) callbackFunc )</p> <p>void GM_AddPlayingThinkFunc( void functionref() callbackFunc )</p> <p>void GM_AddThirtySecondsLeftFunc( void functionref() callbackFunc )</p> <p>void GM_SetMatchProgressAnnounceFunc( void functionref( int ) callbackFunc )</p> <p>void AddCallback_NPCLeeched( void functionref( entity, entity ) callbackFunc )</p>"},{"location":"Modding/reference/respawn/callbacks/#sh_loadoutsnut","title":"sh_loadouts.nut:","text":"<p>void UpdateDerivedPilotLoadoutData( PilotLoadoutDef loadout, bool doOverrideCallback = true )</p>"},{"location":"Modding/reference/respawn/callbacks/#ai_ai_marvin_facesgnut","title":"ai/_ai_marvin_faces.gnut:","text":"<p>void MarvinSpawnCallback( entity npc_marvin )</p>"},{"location":"Modding/reference/respawn/callbacks/#ai_ai_mortar_titansgnut","title":"ai/_ai_mortar_titans.gnut:","text":"<p>void MortarMissileFiredCallback( entity missile, entity weaponOwner )</p>"},{"location":"Modding/reference/respawn/callbacks/#ai_ai_nuke_titansgnut","title":"ai/_ai_nuke_titans.gnut:","text":"<p>void AutoTitan_NuclearPayload_PostDamageCallback( entity titan, var damageInfo )</p>"},{"location":"Modding/reference/respawn/callbacks/#ai_ai_pilotsgnut","title":"ai/_ai_pilots.gnut:","text":"<p>function( pilot, titan )</p> <p>function( pilot, titan )</p> <p>function( callbackFunc )</p> <p>function( callbackFunc )</p>"},{"location":"Modding/reference/respawn/callbacks/#ai_ai_suicide_spectresgnut","title":"ai/_ai_suicide_spectres.gnut:","text":"<p>void SpectreSuicideOnDamaged_Callback( entity spectre, var damageInfo )</p>"},{"location":"Modding/reference/respawn/callbacks/#earn_metersv_earn_metergnut","title":"earn_meter/sv_earn_meter.gnut:","text":"<p>void AddEarnMeterThresholdEarnedCallback( float thresholdForCallback, void functionref( entity player ) callbackFunc, bool triggerFunctionOnFullEarnMeter = false )</p> <p>bool AlreadyContainsThresholdCallback( EarnMeterThresholdEarnedStruct thresholdStruct )</p> <p>void SetCallback_EarnMeterGoalEarned( void functionref( entity player ) callback )</p> <p>void SetCallback_EarnMeterRewardEarned( void functionref( entity player ) callback )</p> <p>void DummyRewardEarnedCallback( entity player )</p> <p>void DummyGoalEarnedCallback( entity player )</p>"},{"location":"Modding/reference/respawn/callbacks/#gamemodes_frontlinegnut","title":"gamemodes/_frontline.gnut:","text":"<p>void AddCalculateFrontlineCallback( void functionref() callbackFunc )</p>"},{"location":"Modding/reference/respawn/callbacks/#mp_base_gametypegnut","title":"mp/_base_gametype.gnut:","text":"<p>bool ScriptCallback_ShouldEntTakeDamage( entity ent, damageInfo )</p> <p>function( ent, callbackFunc )</p>"},{"location":"Modding/reference/respawn/callbacks/#mp_bleedoutgnut","title":"mp/_bleedout.gnut:","text":"<p>void Bleedout_SetCallback_OnPlayerStartBleedout( void functionref(entity) callback )</p> <p>void Bleedout_SetCallback_OnPlayerGiveFirstAid( void functionref(entity) callback )</p>"},{"location":"Modding/reference/respawn/callbacks/#mp_spawn_functionsnut","title":"mp/_spawn_functions.nut:","text":"<p>void EmptyDeathCallback( entity _1, var _2 )</p>"},{"location":"Modding/reference/respawn/callbacks/#mp_spectre_racknut","title":"mp/_spectre_rack.nut:","text":"<p>void AddSpectreRackCallback( void functionref( entity, entity ) func )</p>"},{"location":"Modding/reference/respawn/callbacks/#mp_titan_tethergnut","title":"mp/_titan_tether.gnut:","text":"<p>void AddOnTetherCallback( void functionref( entity, entity ) callback )</p>"},{"location":"Modding/reference/respawn/callbacks/#mp_vrnut","title":"mp/_vr.nut:","text":"<p>void VR_GroundTroopsDeathCallback( entity guy, var damageInfo )</p>"},{"location":"Modding/reference/respawn/callbacks/#pilot_leechinggnut","title":"pilot/_leeching.gnut:","text":"<p>void TryLeechStartCallback( entity self, entity leecher )</p> <p>void TryLeechAbortCallback( entity self, entity leecher )</p>"},{"location":"Modding/reference/respawn/callbacks/#pilot_ziplinegnut","title":"pilot/_zipline.gnut:","text":"<p>void AddCallback_ZiplineStart( void functionref(entity,entity) callback )</p> <p>void AddCallback_ZiplineStop( void functionref(entity) callback )</p>"},{"location":"Modding/reference/respawn/callbacks/#rodeo_rodeo_titangnut","title":"rodeo/_rodeo_titan.gnut:","text":"<p>void AddOnRodeoStartedCallback( void functionref(entity,entity) callbackFunc )</p> <p>void AddOnRodeoEndedCallback( void functionref(entity,entity) callbackFunc )</p> <p>void SetApplyBatteryCallback( void functionref(entity,entity,entity) func )</p>"},{"location":"Modding/reference/respawn/callbacks/#weapons_arc_cannonnut","title":"weapons/_arc_cannon.nut:","text":"<p>void ClientDestroyCallback_ArcCannon_Stop( entity ent )</p>"},{"location":"Modding/reference/respawn/callbacks/#weapons_grenadenut","title":"weapons/_grenade.nut:","text":"<p>void ClientDestroyCallback_GrenadeDestroyed( entity grenade )</p>"},{"location":"Modding/reference/respawn/callbacks/#weapons_weapon_utilitynut","title":"weapons/_weapon_utility.nut:","text":"<p>unknown ServerCallback_GuidedMissileDestroyed()</p> <p>unknown ServerCallback_AirburstIconUpdate( toggle )</p>"},{"location":"Modding/reference/respawn/clientcommands/","title":"Client Commands","text":"<p>Client commands are how the clients communicate with the server. Mods can define custom Client Commands that people can then use from the console, or that can be called from a clientside script.</p> <p>void AddClientCommandCallback(string, void functionref(entity, array )) <p>Registers a function as a callback for a client command. This can only be done once per client command string.</p> <pre><code>    AddClientCommandCallback(\"commandname\", commandcallback)\n\n    void CommandCalled(entity player, array&lt;string&gt; args) {\n        print(\"commandname: was called with \" + args);\n    }\n</code></pre>"},{"location":"Modding/reference/respawn/clientcommands/#list_client_commands","title":"List of Client Commands","text":"<p>Heres a (incomplete) list of client commands that are used in the game.</p> <p>Note</p> <p>Please note that this list is very incomplete. If you find any new ones, please PR them into the referenced CSV.</p> Client Command Arguments Description PrivateMatchSetMode mode shortname Player changed the mode in private lobby menu SetCustomMap map name Player changed the map in private lobby menu PrivateMatchSetPlaylistVarOverride playlistvaroverride, value RequestPilotLoadout index Player has changed their loadout to index 2 ClearNewStatus pilot_loadout_3 VModEnable number unknown, logged with number 0 vban number unknown, logged with number 0 HoldToRodeo number0 unknown, logged with number 0 ClientStatus number unknown, logged with number 0 AllDialogueFinished unknown"},{"location":"Modding/reference/respawn/damagehistory/","title":"Damage History","text":"<p>After a player receives damage it is stored by the game in an array of the following struct. The information in that struct is final and changing it does not affect the game.</p>"},{"location":"Modding/reference/respawn/damagehistory/#damagehistorystruct","title":"DamageHistoryStruct","text":"<p>DamageHistoryStruct</p> <p>string attackerName</p> <p>Name of the attacker </p> <p>string attackerPetName</p> <p>Name of the titan    </p> <p>vector origin</p> <p>Position of the victim    </p> <p>float damage</p> <p>The amount of damage inflicted    </p> <p>int damageType</p> <p>A value from the Damage Flags </p> <p>int damageSourceId</p> <p>Damage souce ID from the gun ( damage-source-id-overview )</p> <p>entity attacker</p> <p>Entity of the attacker    </p> <p>int attackerEHandle</p> <p>float attackerHealthPercent</p> <p>How much health the attacker has in %</p> <p>float time</p> <p>When the damage was inflicted</p> <p>array weaponMods <p>Array of mods on the attacking gun    </p> <p>bool victimIsTitan</p> <p><code>true</code> if the victim died in the Titan</p> <p>bool rodeoDamage</p> <p><code>true</code> if the damage was inflicted in rodeo mode</p>"},{"location":"Modding/reference/respawn/damagehistory/#getting-the-info-from-the-entity","title":"Getting the info from the entity","text":"<p>You can get the damage history for any player entity with <code>player.e.recentDamageHistory</code>, this is of the type <code>array&lt;DamageHistoryStruct&gt;</code> and gets automatically updated by the game. The higher the index the older the <code>DamageHistoryStruct</code> is ( so to get the most recent struct you do <code>player.e.recentDamageHistory[ 0 ]</code> ).</p>"},{"location":"Modding/reference/respawn/damagehistory/#getter-functions","title":"Getter functions","text":"<p>array GetDamageEventsForTime( entity player, float time ) <ul> <li> <p><code>entity player</code> The player you want the damage history from.</p> </li> <li> <p><code>float time</code> How old the damage history can be in seconds.</p> </li> <li> <p>Returns: All <code>DamageHistoryStruct</code> found in the given time frame.</p> </li> </ul>"},{"location":"Modding/reference/respawn/damagehistory/#setter-functions","title":"Setter functions","text":"<p>DamageHistoryStruct function StoreDamageHistoryAndUpdate( entity storeEnt, float maxTime, float damage, vector damageOrigin, int damageType, int damageSourceId, entity attacker = null, array weaponMods = [] ) <p>void function UpdateDamageHistory( entity player, float maxTime, float time )</p> <p>Removes all <code>DamageHistoryStruct</code> in the time frame <code>time - maxTime</code></p> <ul> <li> <p><code>entity player</code> The player you want to update the damage history from.</p> </li> <li> <p><code>float maxTime</code> How old the damage history can maximally be</p> </li> <li> <p><code>float time</code> How old the damage history can be in seconds.</p> </li> </ul>"},{"location":"Modding/reference/respawn/damagehistory/#built-in-checks","title":"Built in Checks","text":"<p>float function GetLastDamageTime( entity player )</p> <p>bool function WasRecentlyHitByEntity( entity player, entity ent, float hitTime )</p> <p>bool function WasRecentlyHitForDamage( entity player, float damageAmount, float hitTime )</p> <p>bool function WasRecentlyHitForDamageType( entity player, float damageType, float hitTime )</p> <p>float function GetTotalDamageTaken( entity player )</p> <p>float function GetTotalDamageTakenInTime( entity player, float hitTime )</p> <p>array function GetTitansHitMeInTime( entity player, float hitTime ) <p>float function GetTotalDamageTakenByPlayer( entity player, entity attacker )</p> <p>array function GetDamageSortedByAttacker( entity ent, float totalTime ) <p>bool function WasRecentlyHitByDamageSourceId( entity player, int damageSourceId, float hitTime )</p> <p>AssistingPlayerStruct function GetLatestAssistingPlayerInfo( entity ent )</p> <p>Note</p> <p>AssistingPlayerStruct</p> <p>entity player</p> <p>int damageSourceId</p> <p>float assistTime</p> <p>array function GetRodeoAttacksByPlayer( entity player, entity attacker, float time ) <p>string function GetLastDamageSourceStringForAttacker( entity victim, entity attacker )</p> <p>float function TotalDamageOverTime_BlendedOut( entity soul, float start, float end )</p> <p>void function ClearRecentDamageHistory( entity player )</p>"},{"location":"Modding/reference/respawn/dialog/","title":"Dialogs","text":"<p>Dialogs are a way for a client to open a text window with up to 4 buttons.</p>"},{"location":"Modding/reference/respawn/dialog/#dialog-structs","title":"Dialog structs","text":"<p>All the data in the struct that can be changed.</p> <p>DialogData</p> <p>var menu</p> <p>The instance of the menu</p> <p>string header</p> <p>The headline of the dialog</p> <p>string message</p> <p>The body of text under the headline, it supports newline with <code>\\n</code></p> <p>DialogMessageRuiData &amp;ruiMessage</p> <p>Stores relevant RUI data</p> <p>array messageColor = [161, 161, 161, 255] <p>The colour of the message body, in the format of RGBA</p> <p>string image</p> <p>Path to the asset of the image displayed on the left of the text body</p> <p>string rightImage = $\"\"</p> <p>Path to the asset of the image displayed on the right of the text body</p> <p>bool forceChoice = false</p> <p>unknown </p> <p>bool noChoice = false</p> <p>unknown</p> <p>bool noChoiceWithNavigateBack = false</p> <p>unknown</p> <p>bool showSpinner = false</p> <p>Sets the left image as an animated spinner </p> <p>bool showPCBackButton = false</p> <p>Shows an additional button below all other buttons that closes the dialog for the client when pressed, works the same as pressing the <code>esc</code> button</p> <p>float inputDisableTime = 0</p> <p>How long it takes before the client is able to press a button</p> <p>table coloredButton <p>The int is the index of the Button</p> <p>bool darkenBackground = false</p> <p>Darkens the colour of the dialog window slightly</p> <p>bool useFullMessageHeight = false</p> <p>Creates a larger dialog window even if there is no text or buttons to fill that space</p> <p>array buttonData <p>Stores the information added by the <code>AddDialogButton</code> function</p> <p>array footerData <p>Stores the information added by the <code>AddDialogFooter</code> function</p> <p>DialogMessageRuiData</p> <p>string message = \"\"</p> <p>vector style1Color = &lt;1.0, 1.0, 1.0&gt;</p> <p>vector style2Color = &lt;0.5, 0.5, 0.5&gt;</p> <p>vector style3Color = &lt;0.5, 0.5, 0.5&gt;</p> <p>float style1FontScale = 1.0</p> <p>float style2FontScale = 1.0</p> <p>float style3FontScale = 1.0</p> <p>DialogButtonData</p> <p>string label</p> <p>void functionref() activateFunc</p> <p>string focusMessage</p> <p>bool startFocused</p> <p>DialogFooterData</p> <p>string label</p> <p>void functionref() activateFunc</p>"},{"location":"Modding/reference/respawn/dialog/#functions","title":"Functions","text":"<p>void OpenDialog( DialogData dialog )</p> <p>Shows the local player the dialog with the data from the struct.</p> <ul> <li><code>DialogData dialog</code> Instance of a DialogData struct</li> </ul> <p>Example</p> <pre><code>    DialogData dialog\n    dialog.message = \"Hello there\"\n    OpenDialog( dialog )\n</code></pre> <p>void AddDialogButton( DialogData dialog, string text, void functionref() callback )</p> <p>Add one button to the given struct</p> <ul> <li> <p><code>DialogData dialog</code> Instance of a DialogData struct</p> </li> <li> <p><code>string text</code> The Text that is shown on the button, supports some assets with <code>%ASSET PATH%</code></p> </li> <li> <p><code>void functionref() callback</code> Function that is executed when the button is pressed.</p> </li> </ul> <p>Example</p> <pre><code>    void function SendDialogWithButton()\n    {\n        DialogData dialog\n        dialog.message = \"Hello there\"\n        AddDialogButton(dialog, \"Button 1 %%$r2_ui/menus/loadout_icons/primary_weapon/primary_kraber%%\", void function():() {\n            printt( \"pressed button 1\" )\n        })\n        OpenDialog( dialog )\n    }\n</code></pre> <p>void AddDialogFooter( DialogData dialog, string text )</p> <p>Adds a footer to the dialog struct</p> <ul> <li> <p><code>DialogData dialog</code> Instance of a DialogData struct</p> </li> <li> <p><code>string text</code> The Text that is shown on the button, supports some assets with <code>%ASSET PATH%</code></p> </li> </ul> <p>bool IsDialogActive( DialogData dialogData )</p> <ul> <li> <p><code>DialogData dialog</code> Instance of a DialogData struct</p> </li> <li> <p>Returns: <code>true</code> if the dialog with that struct is currently open, otherwise it returns <code>false</code></p> </li> </ul> <p>void OpenErrorDialog( string errorDetails )</p> <ul> <li><code>string errorDetails</code> User facing information about the error</li> </ul>"},{"location":"Modding/reference/respawn/dialog/#code-example","title":"Code example","text":"<p>the folowing code produces this output: </p> <pre><code>    DialogData dialog\n    dialog.header = \"This is the header\"\n    dialog.message = \"this is the body, it is green \\n \\n Hello There \\n \\n General Kenobi\"\n    dialog.messageColor = [0,200,0,100]\n    dialog.showSpinner = true\n    dialog.showPCBackButton = true\n    AddDialogButton( dialog, \"Button 1 %%$r2_ui/menus/loadout_icons/primary_weapon/primary_kraber%%\", ButtonOnePressed )\n    OpenDialog( dialog )\n</code></pre>"},{"location":"Modding/reference/respawn/entities/","title":"Entities","text":"<p>There are different Classes for Server and Client. Classes that start with <code>C_</code> are exclusive to the Client VM and classes that only have the <code>C</code> Prefix are only usable in the Server VM.</p> <p>Most entries have three sub entries: The class available to the SERVER, the CLIENT and methods that are available on both VMs.</p> <p>For a graphic reprasentation of the Server and Client class inheritance, refer to this chart</p> <p>Note</p> <p>Pay attention to the <code>extends</code> keyword for each class! You can use every property of that the parent class has access to!</p> <p>This List of Classes and their Methods is incomplete!</p>"},{"location":"Modding/reference/respawn/entities/#cbaseentity-c_baseentity","title":"CBaseEntity / C_BaseEntity","text":"<p>Basic entity that most other entities inherit from.</p>"},{"location":"Modding/reference/respawn/entities/#shared","title":"Shared","text":"<p>CBaseEntity / C_BaseEntity</p> <p>void Hide()</p> <p>Hides the ent. (invisible)</p> <p>void Show()</p> <p>Shows the ent. (visible)</p> <p>void Destroy()</p> <p>Destroys this entity.</p> <p>void Signal( string signal )</p> <p>:doc:<code>../../native/async</code></p> <p>Signals on this entity</p> <p>void EndSignal( string signal )</p> <p>Ends this thread when the identifier is signaled on this entity</p> <p>void WaitSignal( string signal )</p> <p>Halts this thread until a signal is activated for this entity</p> <p>void ConnectOutput( string event, void functionref( entity trigger, entity activator, entity caller, var value ) callback )</p> <p>Executes the callback function when the signal is fired.</p> <p>void DisconnectOutput( string event, void functionref( entity trigger, entity activator, entity caller, var value ) callback )</p> <p>Disconnects the callback from the signal.</p> <p>void AddOutput( string outputName, string | entity target, string inputName, string parameter = \"\", float delay = 0, float maxFires = 0 )</p> <p>Connects an output on this entity to an input on another entity via code.  The <code>target</code> can be a name or a named entity.</p> <p>vector GetOrigin()</p> <p>Returns the Coordinates of this entity</p> <p>vector EyeAngles()</p> <p>Returns the direction this entity is facing to</p> <p>vector EyePosition()</p> <p>Returns the position of this entities eyes</p> <p>entity GetOwner()</p> <p>Returns the owner of this entity. Set the owner with <code>SetOwner</code></p> <p>entity GetBossPlayer()</p> <p>void SetBossPlayer( entity boss )</p> <p>string GetClassName()</p> <p>Internal class name of the parent class. May return the identifier name for some classes</p> <p>bool IsNPC()</p> <p>Returns <code>true</code> if this entity is an NPC</p> <p>bool IsTitan()</p> <p>Returns <code>true</code> if this entity is a Titan</p> <p>bool IsHuman()</p> <p>Returns true if this entity is a gameplay-wise a human.</p> <p>For example, returns <code>true</code> if the entity is a grunt but <code>false</code> if the entity is a Titan or spectre etc.</p> <p>However, players will always be Human, even when they are spectating or their playermodel is robotic (for example when playing as stim)</p> <p>bool IsMechanical()</p> <p>Returns <code>true</code> if this entity is mechanical. Examples are Titans and spectres</p> <p>Note</p> <p>This returns <code>true</code> for players that are playing mechanical classes</p> <p>bool IsPhaseShifted()</p> <p>Returns <code>true</code> if this entity is currently phase shifting</p> <p>bool IsPlayer()</p> <p>Returns <code>true</code> if this entity is a player</p> <p>bool IsProjectile()</p> <p>Returns <code>true</code> if this entity is a projectile</p> <p>asset GetModelName()</p> <p>Returns the asset this entity is being rendered with</p> <p>void SetParent( entity parent, ..., string type = \"\" )</p> <p>Binds this entity to the parent. The child inherits the position and rotation of the parent</p> <p>void ClearParent( entity parent )</p> <p>Make this entity independent from its parent</p> <p>entity GetParent()</p> <p>Returns this entities parent</p> <p>void SetValueForModelKey( asset model )</p> <p>Set the model of this entity.</p> <p>void SetValueForEffectNameKey( asset effect )</p> <p>Similar to <code>SetValueForModelKey</code> but for FX.</p> <p>table CreateTableFromModelKeyValues()</p> <p>int GetArmorType()</p> <p>Returns <code>0</code> for light armor and <code>1</code> for heavy armor</p> <p>Titans use heavy armor while pilots and similar use light armor</p> <p>int GetMaxHealth()</p> <p>Returns the max health of this entity</p> <p>int GetHealth()</p> <p>Returns the current health</p> <p>int GetShieldHealth()</p> <p>Returns the current shield health</p> <p>int GetShieldHealthMax()</p> <p>Returns the maximum shield health of this entity</p> <p>bool HasGibModel()</p> <p>Returns <code>true</code> if this entity has gib models</p> <p>bool HasKey( string key )</p> <p>bool IsMarkedForDeletion()</p> <p>void SetOrigin( vector position )</p> <p>Set the position of this entity</p> <p>string GetTargetName()</p> <p>int GetTeam()</p> <p>Returns the team of this entity</p> <p>vector GetAngles()</p> <p>Returns the rotation of this entity</p> <p>void SetAngles( vector angle)</p> <p>Set the rotation of this entity</p> <p>var GetValueForKey( string key )</p> <p>var Get( string key )</p> <p>The same as <code>GetValueForKey</code></p> <p>void SetValueForKey( var key, var val )</p> <p>var Set( string key )</p> <p>The same as <code>SetValueForKey</code></p> <p>vector GetVelocity()</p> <p>Returns the velocity of this entity</p> <p>void Kill_Deprecated_UseDestroyInstead()</p> <p>Kill this entity: this function is deprecated because it has a one-frame delay; instead, call ent.Destroy()</p> <p>vector GetBoundingMaxs()</p> <p>vector GetBoundingMins()</p> <p>bool IsInvulnerable()</p> <p>returns <code>true</code> if this entity is invulnerable</p> <p>vector GetWorldSpaceCenter()</p> <p>int Highlight_GetCurrentContext()</p> <p>float Highlight_GetCurrentInsideOpacity()</p> <p>float Highlight_GetCurrentOutlineOpacity()</p> <p>unknown Highlight_GetInheritHighlight()</p> <p>int Highlight_GetInsideFunction( int contextID )</p> <p>int Highlight_GetOutlineFunction( int contextID )</p> <p>float Highlight_GetOutlineRadius()</p> <p>unknown Highlight_GetParam( int contextID, int parameterNum )</p> <p>int Highlight_GetState( int contextID )</p> <p>void Highlight_HideInside( float duration )</p> <p>void Highlight_HideOutline( float duration )</p> <p>bool Highlight_IsAfterPostProcess( int contextID )</p> <p>bool Highlight_IsEntityVisible( int contextID )</p> <p>void Highlight_SetCurrentContext( int contextID )</p> <p>void Highlight_SetFunctions( int contextID, int hightlightFillID, bool entityVisible, int colorMode, float radius, int highlightID, bool afterPostProcess)</p> <p>void Highlight_SetParam( int contextID, int parameterID, vector highlightColor )</p> <p>void Highlight_ShowInside( float duration )</p> <p>void Highlight_ShowOutline( float duration )</p> <p>void Highlight_SetInheritHighlight( bool set )</p> <p>void HighlightDisableForTeam( int team )</p> <p>void HighlightEnableForTeam( int team )</p> <p>void HighlightSetTeamBitField( int bitField )</p> <p>int GetEntIndex()</p> <p>Returns the index of this entity</p> <p>array GetLinkEntArray() <p>entity GetLinkEnt()</p> <p>void LinkToEnt( entity ent )</p> <p>entity GetLinkParent()</p> <p>void Code_SetTeam( int team )</p> <p>Set the team for this entity</p> <p>Skins based on team do not get updated. Use <code>SetSkin</code> for this</p> <p>bool IsCloaked()</p> <p>Returns <code>true</code> if this entity is cloaked</p> <p>bool IsEntAlive()</p> <p>Returns <code>true</code> if this entity is alive</p> <p>bool IsValidInternal()</p> <p>Returns <code>true</code> if this entity is Valid.</p> <p><code>IsValid( ent )</code> is a good alternative</p> <p>vector GetForwardVector()</p> <p>Returns a normalized vector pointing forwards away from this entity.</p> <p>vector GetRightVector()</p> <p>Returns a normalized vector pointing to the right of this entity.</p> <p>vector GetUpVector()</p> <p>Returns a normalized vector pointing upwards from this entity.</p> <p>entity constructor( unknown )</p> <p>Depends on the class.</p> <p>Returns a new instance of a class.</p> <p>You can invoke the constructor with brackets as well, for example like this: <code>CBaseEntity()</code></p> <p>void SetDoDestroyCallback( bool doCallBack )</p> <p>int GetLifeState()</p> <p>void DisableDraw()</p> <p>void EnableDraw()</p> <p>void SetCanCloak( bool canCloak )</p> <p>Allow or disallow this entity to cloak itself</p> <p>bool GetCritsPrevented()</p> <p>Returns <code>true</code> if this entity can't be critted.</p> <p>bool IsHologram()</p> <p>Returns <code>true</code> if this entity is a hologram</p> <p>bool IsOnGround()</p> <p>Returns <code>true</code> if this entity is touching the ground</p> <p>void SetModel( asset model )</p> <p>Set the model this entity is being rendered with</p> <p>void MarkAsNonMovingAttachment()</p> <p>string GetScriptName()</p> <p>Returns the script name of this entity. </p> <p>void SetScriptName( string name )</p> <p>Set the script name of this entity.</p> <p>bool IsBreakableGlass()</p> <p>Returns <code>true</code> if this entity is breakable glass</p> <p>bool IsWorld()</p> <p>Returns `true```if this entity is the gameworld</p> <p>void DispatchImpactEffects( entity ent, vector startPos, vector endPos, vector hitNormal, entity prop, int propIndex, int damageType, int impactIndex, entity orig, int impactEffectFlags )</p> <p>void IsPlayerDecoy()</p> <p>Returns <code>true</code> if this entity is a decoy</p> <p>void SetPassThroughDirection( float dir )</p> <p>void SetPassThroughThickness( float thickness )</p> <p>void SetTakeDamageType( int takeDamageType )</p> <p><code>DAMAGE_NO</code>, <code>DAMAGE_YES</code>, <code>DAMAGE_EVENTS_ONLY</code></p> <p>void SetPreventCrits( bool prevent )</p> <p>Set if this entity takes crit damage.</p> <p>void SetVelocity( vector vel )</p> <p>Set the velocity of this entity.</p> <p>void EnableRenderAlways()</p> <p>Always render this entity</p> <p>void DisableRenderAlways()</p> <p>Disable always rendering this entity</p> <p>entity GetParentAttachment()</p> <p>void SetFadeDistance( int distance )</p> <p>Sets the distance between a player and the entity at which the ent will begin to fade out.</p> <p>void SetLocalOrigin( vector origin )</p> <p>bool HasPusherRootParent()</p> <p>void StopPhysics()</p> <p>Disable all physics for this entity</p> <p>void SetLocalAngles( vector angles )</p> <p>void SetParentWithHitbox( entity parent, int hitGroup, bool unknown )</p> <p>void RenderWithViewModels( bool renderWith )</p> <p>void SetValueForTextureKey( asset texture )</p> <p>asset GetValueForModelKey()</p> <p>vector GetLocalAngles()</p> <p>bool GetNoTarget()</p> <p>void SetForceVisibleInPhaseShift( bool visible )</p> <p>table GetScriptScope()</p>"},{"location":"Modding/reference/respawn/entities/#cbaseentity","title":"CBaseEntity","text":"<p>CBaseEntity</p> <p>int SetHealth( int health )</p> <p>Set current health of this entity</p> <p>int SetMaxHealth( int health )</p> <p>Set max health of this entity</p> <p>void SetOwner( entity owner )</p> <p>Set the owner of this entity</p> <p>entity GetSpawner()</p> <p>void Die()</p> <p>Kill this entity in the game sense - all callbacks and signals get triggered</p> <p>bool NotSolid()</p> <p>Returns <code>false</code> if this entity is solid</p> <p>void MoveTo( vector pos, float moveTime, float easeIn = 0, float easeOut = 0 )</p> <p>Moves this entity to <code>pos</code> over the duration of <code>moveTime</code> with ease in and ease out</p> <p>Note</p> <p>Entites that are not movers get teleported instantly</p> <p>void RotateTo( vector pos, float moveTime, float easeIn = 0, float easeOut = 0 )</p> <p>Rotate to the specified angles over time with ease in and ease out.</p> <p>void ClearInvulnerable()</p> <p>Make this entity vulnerable again</p> <p>void SetInvulnerable()</p> <p>Make this entity invulnerable</p> <p>void SetNextThinkNow()</p> <p>Trigger AI now</p> <p>void SetNoTarget( bool noTarget )</p> <p>void SetNoTargetSmartAmmo( bool noTarget )</p> <p>void Minimap_SetClampToEdge( bool clamp )</p> <p>void Minimap_SetCustomState( int state )</p> <p>void Minimap_SetZOrder( int order )</p> <p>void Minimap_SetAlignUpright( bool align )</p> <p>void Minimap_SetObjectScale( float scale )</p> <p>void SetShieldHealth( int )</p> <p>void SetShieldHealthMax( int )</p> <p>int GetEncodedEHandle()</p> <p>void SetUsable( bool usable )</p> <p>Make this entity usable</p> <p>void SetUsableByGroup( string group )</p> <p>Make this entity usable only for a specific group</p> <p>void SetUsableRadius( float distance )</p> <p>Set the radius in which this entity can be interacted with</p> <p>void UnsetUsable()</p> <p>Make this entity unusable</p> <p>void SetUsableValue( int val )</p> <p>void Solid()</p> <p>Make this entity solid</p> <p>void Fire( string output, string param = \"\", float delay = 0, entity activator = null, entity caller = null )</p> <p>Fire an output on this entity, with optional parm and delay</p> <p>void FireNow( string output, string param = \"\", float delay = 0, entity activator = null, entity caller = null )</p> <p>Fire an output on this entity, with optional parm and delay (synchronous)</p> <p>void DisableHibernation()</p> <p>void SetSize( float width, float height )</p> <p>void SetCloakFlicker( float intensity, float duration )</p> <p>Trigger cloak flicker effect</p> <p>void TakeDamage( int damageAmount, entity attacker_1, entity attacker_2, table { int scriptType, int damageType, int damageSourceId, vector origin, vector force } )</p> <p>vector GetCenter()</p> <p>void TraceAttackToTriggers( int damageAmount, entity attacker_1, entity attacker_2, table { int scriptType, int damageType, int damageSourceId, vector force }, vector startPos, vector endPos, vector direction )</p> <p>void SetBlocksRadiusDamage( bool blocks )</p> <p>void SetDamageNotifications( bool getNotifs )</p> <p>entity NextMovePeer()</p> <p>void SetNameVisibleToEnemy( bool visible )</p> <p>void SetNameVisibleToFriendly( bool visible )</p> <p>void SetNameVisibleToOwner( bool visible )</p> <p>entity FirstMoveChild()</p> <p>entity GetRootMoveParent()</p> <p>void RemoveFromSpatialPartition()</p> <p>void SetUsePrompts( string pc_prompt, string console_prompt)</p> <p>void SetAngularVelocity( float x, float y, float z )</p> <p>void MakeInvisible()</p> <p>Make this entity invisible</p> <p>void MakeVisible()</p> <p>Make this entity visible</p> <p>entity GetGroundEntity()</p> <p>vector GetGroundRelativePos()</p> <p>int GetPhysicsSolidMask()</p> <p>void EnableAttackableByAI( int ai_priority_no_threat, int unknown, int ai_ap_flag )</p> <p>Set if this entity can be attacked by AI</p> <p>void SetDeathNotifications( bool notifs )</p> <p>void SetTitle( string title )</p> <p>void SetAbsAngles( vector angles )</p> <p>void SetAbsOrigin( void origin )</p> <p>void Minimap_AlwaysShow( int team, entity ent )</p> <p>void RoundOriginAndAnglesToNearestNetworkValue()</p> <p>void ClearBossPlayer()</p> <p>Remove boss player reference from this entity.</p> <p>void Minimap_DisplayDefault( int team, entity ent )</p> <p>void _typeof()</p> <p>Prints ent index, classname and target name of this entity to the console.</p> <p>void DisableDraw()</p> <p>\"consider this the mega hide\"</p> <p>void EnableDraw()</p> <p>\"it's back!\"</p> <p>string CreateStringForFunction( function func )</p> <p>this is a general purpose function that returns a string which, when executed, runs the given function on this entity.</p> <p>the function must be called (or the entity deleted) at some point to avoid leaking the new slot we make in this Table.</p> <p>compile with output with <code>compilestring</code></p>"},{"location":"Modding/reference/respawn/entities/#c_baseentity","title":"C_BaseEntity","text":"<p>C_BaseEntity</p> <p>string GetSignifierName()</p> <p>string GetBossPlayerName()</p> <p>void ForceShadowVisible( bool visible )</p> <p>void clKill()</p> <p>Kill this client side prop.</p> <p>float Highlight_GetNearFadeDist()</p> <p>void Highlight_ResetFlags()</p> <p>void Highlight_SetFadeInTime( float time )</p> <p>void Highlight_SetFadeOutTime( float time )</p> <p>void Highlight_SetFarFadeDist( float dist )</p> <p>void Highlight_SetFlag( int highlightFlag, bool enable )</p> <p>void Highlight_SetLifeTime( float time )</p> <p>void Highlight_SetNearFadeDist( float dist )</p> <p>void Highlight_SetVisibilityType( int type )</p> <p>void Highlight_StartOn()</p> <p>Starts the highlight with the set configuration</p> <p>void DisableRenderWithViewModelsNoZoom()</p> <p>void EnableRenderWithCockpit()</p> <p>void EnableRenderWithHud()</p> <p>void SetAttachOffsetAngles( vector angles )</p> <p>void SetAttachOffsetOrigin( vector origin )</p> <p>void SetVisibleForLocalPlayer( int visible )</p> <p>void InitHudElem( var key )</p> <p>string GetTitleForUI()</p> <p>float GetCloakFadeFactor()</p> <p>int Dev_GetEncodedEHandle()</p> <p>Returns the EHandle of this entity.</p> <p>int Minimap_GetCustomState()</p> <p>int Minimap_GetZOrder()</p> <p>void DoDeathCallback( bool doCallback )</p> <p>void EnableHealthChangedCallback()</p> <p>void HideHUD()</p> <p>Hide HUD elements</p> <p>void ShowHUD()</p> <p>Show HUD elements</p> <p>bool IsHUDVisible()</p> <p>Return <code>true</code> if HUD is shown on this entity</p>"},{"location":"Modding/reference/respawn/entities/#cdynamicprop-c_dynamicprop","title":"CDynamicProp / C_DynamicProp","text":""},{"location":"Modding/reference/respawn/entities/#shared_1","title":"Shared","text":"<p>CDynamicProp / C_DynamicProp : extends CBaseAnimating / C_BaseAnimating</p>"},{"location":"Modding/reference/respawn/entities/#cdynamicprop","title":"CDynamicProp","text":"<p>CDynamicProp : extends CBaseAnimating</p> <p>void SetFullBodygroup( int group )</p>"},{"location":"Modding/reference/respawn/entities/#c_dynamicprop","title":"C_DynamicProp","text":"<p>C_DynamicProp : extends C_BaseAnimating</p>"},{"location":"Modding/reference/respawn/entities/#cscriptprop-c_scriptprop","title":"CScriptProp / C_ScriptProp","text":""},{"location":"Modding/reference/respawn/entities/#shared_2","title":"Shared","text":"<p>CScriptProp / C_ScriptProp : extends CDynamicProp / C_DynamicProp</p> <p>void SetSmartAmmoLockType( int salt )</p> <p>int GetScriptPropFlags()</p>"},{"location":"Modding/reference/respawn/entities/#cscriptprop","title":"CScriptProp","text":"<p>CScriptProp : extends CDynamicProp</p> <p>void SetFootstepType( int type )</p> <p>void SetArmorType( int armor )</p> <p>void SetScriptPropFlags( int flags )</p>"},{"location":"Modding/reference/respawn/entities/#c_scriptprop","title":"C_ScriptProp","text":""},{"location":"Modding/reference/respawn/entities/#cbasecombatweapon-c_basecombatweapon","title":"CBaseCombatWeapon / C_BaseCombatWeapon","text":""},{"location":"Modding/reference/respawn/entities/#shared_3","title":"Shared","text":"<p>CBaseCombatWeapon / C_BaseCombatWeapon : extends CBaseAnimating / C_BaseAnimating</p> <p>string GetWeaponDescription()</p> <p>Returns the weapon description</p>"},{"location":"Modding/reference/respawn/entities/#cbasecombatweapon","title":"CBaseCombatWeapon","text":"<p>CBaseCombatWeapon : extends CBaseAnimating</p>"},{"location":"Modding/reference/respawn/entities/#c_basecombatweapon","title":"C_BaseCombatWeapon","text":"<p>C_BaseCombatWeapon : extends C_BaseAnimating</p>"},{"location":"Modding/reference/respawn/entities/#cweaponx-c_weaponx","title":"CWeaponX / C_WeaponX","text":"<p>Weapons hold by a player or that are lying on the ground are of this type.</p>"},{"location":"Modding/reference/respawn/entities/#shared_4","title":"Shared","text":"<p>CWeaponX / C_WeaponX : extends CBaseCombatWeapon / C_BaseCombatWeapon</p> <p>entity GetWeaponOwner()</p> <p>Returns the owner of this weapon</p> <p>bool GetAllowHeadShots()</p> <p>Returns <code>true</code> if this weapon can deal crits</p> <p>float GetMaxDamageFarDist()</p> <p>Returns the max damage at the maximum travel distance</p> <p>bool GetWeaponSettingBool( int setting )</p> <p>Get a weapon setting</p> <p>float GetWeaponSettingFloat( int setting )</p> <p>Get a weapon setting</p> <p>int GetWeaponSettingInt( int setting )</p> <p>Get a weapon setting</p> <p>vector GetAttackDirection()</p> <p>vector GetAttackPosition()</p> <p>int GetWeaponPrimaryAmmoCount()</p> <p>Return the amount of ammo in a weapon</p> <p>int GetWeaponPrimaryClipCount()</p> <p>Returns the amount of clips remaining in a weapon</p> <p>int GetWeaponPrimaryClipCountMax()</p> <p>Returns the maximum ammo in a clip of a primary weapon</p> <p>bool IsChargeWeapon()</p> <p>Returns <code>true</code> if this weapon is a charge weapon</p> <p>void SetNextAttackAllowedTime( float time )</p> <p>You need to set a game time as time.</p> <p>void SetWeaponChargeFractionForced( float frac )</p> <p>void SetWeaponPrimaryClipCount( int )</p> <p>string GetWeaponClassName()</p> <p>Returns the weapon class name</p> <p>var GetWeaponInfoFileKeyField( string key )</p> <p>float GetCoreDuration()</p> <p>int GetWeaponType()</p> <p>array GetMods() <p>Get all mods of this weapon</p> <p>bool IsWeaponOffhand()</p> <p>Returns <code>true</code> if this weapon is equipped as a offhand weapon</p> <p>float GetWeaponChargeFraction()</p> <p>Returns the percent this weapon has been charged</p> <p>float GetWeaponChargeTime()</p> <p>Returns the time this weapon needs to be charged</p> <p>bool HasMod( string mod )</p> <p>Check if the array of mods for this weapon contains <code>mod</code></p> <p>int GetWeaponCurrentEnergyCost()</p> <p>Returns the amount of energy consumed per use.</p> <p>bool GetMeleeCanHitHumanSized()</p> <p>bool GetMeleeCanHitTitans()</p> <p>void DoMeleeHitConfirmation( float severityScale )</p> <p>void EmitWeaponNpcSound_DontUpdateLastFiredTime( int volume, float time )</p> <p>int GetDamageAmountForArmorType( int armor )</p> <p>float GetMeleeAttackRange()</p> <p>float GetMeleeLungeTargetRange()</p> <p>void SetMods( array mods ) <p>Set the mods this weapon.</p> <p>void EmitWeaponNpcSound( int volume, float duration )</p> <p>int GetWeaponDamageFlags()</p> <p>Returns a bitflag of damage types this weapon has.</p> <p>bool SmartAmmo_IsEnabled( bool enabled )</p> <p>int SmartAmmo_GetNumTrackersOnEntity( entity target )</p> <p>array SmartAmmo_GetTrackedEntities() <p>bool SmartAmmo_IsVisibleTarget( entity trackedEnt )</p> <p>string GetWeaponClass()</p> <p>void SetWeaponSkin( int skin )</p> <p>entity FireWeaponGrenade( vector attackPos, vector throwVelocity, vector angularVelocity, float fuseTime, int contactDamageType, int explosionDamageType, bool isPredicted, bool isLagCompensated, bool bounce? )</p> <p>int GetScriptFlags0()</p> <p>Returns script flags of this weapon.</p> <p>bool ShouldPredictProjectiles()</p> <p>Returns <code>true</code> if clients should be predicting the projectiles fired from this weapon.</p> <p>float GetScriptTime0()</p> <p>Returns the script time of this weapon.</p> <p>void SetScriptTime0( float gameTime )</p> <p><code>gameTime</code> needs to be game time. The current game time can be retrieved with <code>Time()</code></p> <p>bool IsReloading()</p> <p>Returns <code>true</code> if this weapon is currently being reloaded.</p> <p>void SetForcedADS()</p> <p>Force the holder to ADS this weapon.</p> <p>void ClearForcedADS() </p> <p>Allow the holder to hipfire.</p> <p>void EmitWeaponSound_1p3p(string sound1P, string sound3P)</p> <p>int GetChargeAnimIndex()</p> <p>void PlayWeaponEffectNoCull(asset effect1P, asset effect3P, string tagName)</p> <p>void RegenerateAmmoReset()</p> <p>void SetChargeAnimIndex( int index )</p> <p>void SetWeaponPrimaryAmmoCount( int count )</p> <p>Set the ammo of a primary weapon.</p> <p>void StopWeaponEffect(asset effect1P, asset effect3P)</p> <p>Stops the effects.</p> <p>int GetReloadMilestoneIndex()</p> <p>Reload progress. Reloading continues from there.</p> <p>int GetAmmoPerShot()</p> <p>Returns the amount of ammo that is being used per shot.</p> <p>bool IsBurstFireInProgress()</p> <p>void PlayWeaponEffect(asset effect1P, asset effect3P, string tagName)</p> <p>void StopWeaponSound(string sound)</p> <p>float GetSustainedDischargeDuration()</p> <p>void SetSustainedDischargeFractionForced(float frac)</p> <p>entity FireWeaponMissile(vector origin, vector dir, float missileSpeed, int contactDamageType, int explosionDamageType, bool doPopup, bool predict)</p> <p>int GetBurstFireShotsPending()</p> <p>bool AllowUse()</p> <p>Allow entities to use the weapon.</p> <p>void RemoveMod( string mod )</p> <p>Remove the passed mod from this weapon.</p> <p>array SmartAmmo_GetTargets() <p>void SmartAmmo_TrackEntity(entity hitEnt, LMG_SMART_AMMO_TRACKER_TIME)</p> <p>void EmitWeaponSound( string sound )</p> <p>Play a sound on this weapon.</p> <p>float GetWeaponChargeLevel()</p> <p>void SetWeaponBurstFireCount(int amount)</p> <p>int GetCurrentAltFireIndex()</p> <p>void ForceRelease()</p> <p>float SetWeaponChargeFraction()</p> <p>int GetProjectilesPerShot()</p> <p>entity FireWeaponBolt(vector origin, vector dir, float projectileSpeed, int contactDamageType, int explosionDamageType, bool predict, int index)</p> <p>bool IsWeaponInAds()</p> <p>Returns <code>true</code> if this weapon is in ADS.</p> <p>void ResetWeaponToDefaultEnergyCost()</p> <p>Reset the amount of energy consumed per use</p> <p>void SetWeaponEnergyCost( int cost )</p> <p>Set the amount of energy consumed per use.</p> <p> entity FireWeaponBullet( vector origin, vector dir, int numBullets, damageType )</p> <p>Fires a hitscan bullet from this weapon.</p> <p>bool IsWeaponAdsButtonPressed()</p> <p>Returns <code>true</code> while the ADS button is pressed.</p> <p>float GetWeaponChargeLevelMax()</p> <p>bool IsReadyToFire()</p> <p>Returns <code>true</code> if the weapon can be fired.</p> <p>void SetAttackKickRollScale(float scale)</p> <p>int GetShotCount()</p> <p>void AddMod( string mod )</p> <p>Add a mod to this weapon</p> <p>void FireWeaponBullet_Special(vector origin, vector direction, int numShots, int damageType, bool noAntilag, bool noSpread, bool onlyDamageEntitiesOnce, bool noImpactFX, bool noTracers, bool activeShot, bool doTraceBrushOnly)</p> <p>string GetWeaponSettingString( string setting )</p> <p>void SmartAmmo_UntrackEntity( entity target )</p> <p>string GetSmartAmmoWeaponType()</p> <p>Check if weaponType is valid: <code>Assert( weaponType in VALID_WEAPON_TYPES )</code></p> <p>int GetWeaponBurstFireCount()</p> <p>void SmartAmmo_Clear( bool unknown_purpose, bool clearPartialLocks )</p> <p>vector SmartAmmo_GetFirePosition( entity target, int burstIndex )</p> <p>array SmartAmmo_GetStoredTargets() <p>void SmartAmmo_StoreTargets()</p> <p>bool IsSustainedDischargeWeapon()</p> <p>int GetDamageSourceID()</p> <p>float GetGrenadeFuseTime()</p> <p>Note that fuse time of 0 means the grenade won't explode on its own, instead it depends on OnProjectileCollision() functions to be defined and explode there.</p> <p>void SetWeaponPrimaryClipCountAbsolute(int clipsize)</p> <p>entity GetWeaponUtilityEntity()</p> <p>bool IsForceRelease()</p> <p>bool IsWeaponRegenDraining()</p> <p>void SetWeaponPrimaryClipCountNoRegenReset(int clipsize)</p>"},{"location":"Modding/reference/respawn/entities/#cweaponx","title":"CWeaponX","text":"<p>CWeaponX : extends CBaseCombatWeapon</p> <p>void SetWeaponUtilityEntity( entity ent )</p> <p>void ForceDryfireEvent()</p> <p>Force this weapon to dry fire</p> <p>void PlayWeaponEffectOnOwner( asset effect, int bodypart )</p> <p>Play an effect on the weapon owner</p> <p>void ForceReleaseFromServer()</p> <p>Will eventually result in <code>Grenade_OnWeaponToss_()</code> or equivalent function</p> <p>bool IsForceReleaseFromServer()</p> <p>returns <code>true</code> if this weapon has been forced to be released</p>"},{"location":"Modding/reference/respawn/entities/#c_weaponx","title":"C_WeaponX","text":"<p>C_WeaponX : extends C_BaseCombatWeapon</p> <p>void PlayWeaponEffectReturnViewEffectHandle( asset fpEffect, asset unknown_purpose, string tag )</p> <p>the second asset is probably the third person effect played.</p> <p>void SetViewmodelAmmoModelIndex( int index )</p> <p><code>index</code> may be the number of rounds in the clip etc.</p>"},{"location":"Modding/reference/respawn/entities/#cprojectile-c_projectile","title":"CProjectile / C_Projectile","text":"<p>Projectiles.</p>"},{"location":"Modding/reference/respawn/entities/#shared_5","title":"Shared","text":"<p>CProjectile / C_Projectile : extends CDynamicProp / C_DynamicProp</p> <p>bool GetProjectileWeaponSettingBool( string setting )</p> <p>float GetProjectileWeaponSettingFloat( string setting )</p> <p>int GetProjectileWeaponSettingInt( string setting )</p> <p>string ProjectileGetWeaponClassName()</p> <p>void SetImpactEffectTable( string fxTableHandle )</p> <p>array ProjectileGetMods() <p>Returns an array of every mod this projectile has equipped</p> <p>void SetProjectilTrailEffectIndex( int index )</p> <p>Set the projectile trail by index</p> <p>void SetProjectileLifetime( float lifetime )</p> <p>Set the time after which this projectile gets destroyed programmatically</p> <p>string ProjectileGetWeaponInfoFileKeyField( string key )</p> <p>void SetReducedEffects()</p> <p>Only use reduced effects for this projectile</p> <p>asset GetProjectileWeaponSettingAsset( string setting )</p> <p>void SetVortexRefired( bool refired )</p> <p>Tells the code that the projectile was refired from the vortex so that it uses \"projectile_vortex_vscript\"</p> <p>float GetProjectileCreationTime()</p> <p>Get the gametime when this projectile has been created</p> <p>asset ProjectileGetWeaponInfoFileKeyFieldAsset( string key )</p>"},{"location":"Modding/reference/respawn/entities/#cprojectile","title":"CProjectile","text":"<p>CProjectile : extends CDynamicProp</p> <p>int ProjectileGetDamageSourceID()</p> <p>void ProjectileSetDamageSourceID( int id )</p> <p>void SetWeaponClassName( string name )</p> <p>void SetProjectileImpactDamageOverride( int flag )</p>"},{"location":"Modding/reference/respawn/entities/#c_projectile","title":"C_Projectile","text":"<p>C_Projectile : extends C_DynamicProp</p>"},{"location":"Modding/reference/respawn/entities/#cbasegrenade-c_basegrenade","title":"CBaseGrenade / C_BaseGrenade","text":"<p>Grenade entities in worldspace. Grenades that are equipped (\"cooked\") by players are instances from the CWeaponX class.</p>"},{"location":"Modding/reference/respawn/entities/#shared_6","title":"Shared","text":"<p>CBaseGrenade / C_BaseGrenade : extends CProjectile / C_Projectile</p> <p>float GetDamageRadius()</p> <p>Get the damage radius</p> <p>float GetExplosionRadius()</p> <p>Get the explosion radius</p> <p>void GrenadeExplode( vector normal )</p> <p>Explode this grenade now</p> <p>entity GetThrower()</p> <p>Get the entity that has thrown this grenade</p> <p>bool GrenadeHasIgnited()</p> <p>Returns <code>true</code> if this grenade has already been ignited</p> <p>void GrenadeIgnite()</p> <p>void SetDoesExplode( bool explodes )</p> <p>void InitMagnetic( float force, string attractKey )</p> <p>void ExplodeForCollisionCallback( vector normal )</p> <p>void MarkAsAttached()</p>"},{"location":"Modding/reference/respawn/entities/#cbasegrenade","title":"CBaseGrenade","text":"<p>CBaseGrenade : extends CProjectile</p> <p>void SetGrenadeTimer( float fuseTime )</p> <p>Set fuse time for this grenade</p> <p>void SetGrenadeIgnitionDuration( float fuseTime )</p> <p>Set the ignition duration for this grenade</p>"},{"location":"Modding/reference/respawn/entities/#c_basegrenade","title":"C_BaseGrenade","text":"<p>C_BaseGrenade : extends C_Projectile</p>"},{"location":"Modding/reference/respawn/entities/#cmissile-c_missile","title":"CMissile / C_Missile","text":""},{"location":"Modding/reference/respawn/entities/#shared_7","title":"Shared","text":"<p>CMissile / C_Missile : extends CProjectile / C_Projectile</p> <p>void MissileExplode()</p> <p>Make this missile explode now</p> <p>void InitMissileForRandomDriftFromWeaponSettings( vector pos, vector dir )</p> <p>void SetHomingSpeeds( int speed, int speed_for_dodging_player )</p> <p>void SetMissileTarget( enity target, vector offset )</p> <p>void SetMissileTargetPosition( vector pos )</p> <p>void InitMissileSpiral( vector pos, vector dir, int missileNumber, bool unknown_purpose1, bool unknown_purpose2 )</p> <p>If both <code>slowAndExpand</code> and <code>consistentSpacing</code> are true, missiles fly faster instead of normal <code>slowAndExpand</code> behavior.</p> <p>void SetSpeed( float speed )</p> <p>entity GetMissileTarget()</p> <p>void InitMissileExpandContract( vector outward, vector inward, float launchOutTime, float launchInLerpTime, float launchInTime, float launchStraightLerpTime, vector missileEndPos, bool applyRandSpread )</p> <p>void InitMissileForRandomDrift( vector pos, vector dir )</p>"},{"location":"Modding/reference/respawn/entities/#cmissile","title":"CMissile","text":"<p>CMissile : extends CProjectile</p>"},{"location":"Modding/reference/respawn/entities/#c_missile","title":"C_Missile","text":"<p>C_Missile : extends C_Projectile</p>"},{"location":"Modding/reference/respawn/entities/#cplayer-c_player","title":"CPlayer / C_Player","text":""},{"location":"Modding/reference/respawn/entities/#shared_8","title":"Shared","text":"<p>CPlayer / C_Player : extends CBaseCombatCharacter / C_BaseCombatCharacter</p> <p>int GetGen()</p> <p>Returns the gen of the player account.</p> <p>int GetLevel()</p> <p>Returns the level of the player account.</p> <p>int GetXP()</p> <p>Returns the xp of the player account.</p> <p>entity GetFirstPersonProxy()</p> <p>string GetPlayerClass()</p> <p>void Lunge_ClearTarget()</p> <p>bool Lunge_IsActive()</p> <p>Returns <code>true</code> if the player is currently lunging to a melee victim.</p> <p>bool GetForcedDialogueOnly()</p> <p>float GetLastPingTime()</p> <p>int GetNumPingsAvailable()</p> <p>int GetPingGroupAccumulator()</p> <p>float GetPingGroupStartTime()</p> <p>void SetLastPingTime( float time) </p> <p>void SetNumPingsAvailable( int num )</p> <p>void SetNumPingsUsed( int num )</p> <p>void SetPingGroupAccumulator( int acc )</p> <p>void SetPingGroupStartTime( float gametime )</p> <p>string GetPlayerName()</p> <p>Returns the player account name</p> <p>int GetPlayerGameStat( int PGS )</p> <p>Returns the score of the player in the provided category. some categories are: PGS_KILLS, PGS_DEATHS, PGS_SCORE etc.</p> <p>entity GetPetTitan()</p> <p>Returns the soul of the player's autotitan.</p> <p>bool GetTitanDisembarkEnabled()</p> <p>bool GetTitanEmbarkEnabled()</p> <p>bool IsBot()</p> <p>void SetTitanDisembarkEnabled( bool enabled )</p> <p>void SetTitanEmbarkEnabled( bool enabled )</p> <p>string GetPlayerSettings()</p> <p>int GetActiveBurnCardIndex()</p> <p>Returns the index of the selected burn card.</p> <p>int Code_GetActiveBurnCardIndex()</p> <p>Use <code>GetActiveBurnCardIndex</code> instead</p> <p>string GetPlayerSettingsField( string field )</p> <p>int GetCinematicEventFlags()</p> <p>entity GetObserverTarget()</p> <p>vector GetViewRight()</p> <p>vector GetViewVector()</p> <p>vector GetViewForward()</p> <p>vector GetViewUp()</p> <p>int GetPersistentVarAsInt( string key )</p> <p>entity GetViewModelEntity()</p> <p>int GetOutOfBoundsDeadTime()</p> <p>entity GetTitanSoulBeingRodeoed()</p> <p>vector CameraAngles()</p> <p>Returns the angles of this player's camera.</p> <p>float GetObjectiveEndTime()</p> <p>entity GetObjectiveEntity()</p> <p>int GetObjectiveIndex()</p> <p>entity GetPredictedFirstPersonProxy()</p> <p>int GetPetTitanMode()</p> <p>bool IsWallHanging()</p> <p>Returns <code>true</code> if the player is wall hanging.</p> <p>float GetNextTitanRespawnAvailable()</p> <p>var GetPersistentVar( string key )</p> <p>bool HasBadReputation()</p> <p>int GetObserverMode()</p> <p>float GetPlayerModHealth()</p> <p>bool IsInputCommandHeld( int flag )</p> <p>int GetPlayerNetInt( string state )</p> <p>float GetPlayerNetFloat( string state )</p> <p>entity GetHardpointEntity()</p> <p>bool GetPlayerNetBool( string key )</p> <p>bool IsCrouched()</p> <p>Returns <code>true</code> if the player is crouching.</p> <p>bool IsStanding()</p> <p>Returns <code>true</code> if the player is standing</p> <p>void IsTraversing()</p> <p>void IsWallRunning()</p> <p>Returns <code>true</code> if the player is wallrunning.</p> <p>bool IsZiplining()</p> <p>Returns <code>true</code> if the player is currently attached to a zipline</p> <p>vector Lunge_GetStartPositionOffset()</p> <p>void Lunge_SetTargetEntity( entity target, bool unknown_purpose )</p> <p>int PlayerMelee_GetState()</p> <p>bool PlayerMelee_IsAttackActive()</p> <p>void PlayerMelee_SetState( int state )</p> <p>void Lunge_EnableFlying()</p> <p>vector Lunge_GetEndPositionOffset()</p> <p>bool Lunge_IsGroundExecute()</p> <p>bool Lunge_IsLungingToEntity()</p> <p>void Lunge_LockPitch( bool lock )</p> <p>void Lunge_SetEndPositionOffset( vector offset )</p> <p>void Lunge_SetTargetPosition( vector pos )</p> <p>void PlayerMelee_EndAttack()</p> <p>entity PlayerMelee_GetAttackHitEntity()</p> <p>void PlayerMelee_SetAttackHitEntity( entity ent )</p> <p>void PlayerMelee_SetAttackRecoveryShouldBeQuick( bool beQuick )</p> <p>void PlayerMelee_StartAttack( int attackState )</p> <p>void SetSelectedOffhandToMelee()</p> <p>void Weapon_StartCustomActivity( string animation, bool unknown_purpose )</p> <p>float GetPlayerNetTime( string key )</p> <p>vector CameraPosition()</p> <p>Returns the camera position of this player.</p> <p>entity GetPlayerNetEnt( string key )</p> <p>bool HasPassive( int passive )</p> <p>void Lunge_SetSmoothTime( float time )</p> <p>float SmartAmmo_GetHighestLockOnMeFraction()</p> <p>array SmartAmmo_GetHighestLocksOnMeEntities() <p>float SmartAmmo_GetPreviousHighestLockOnMeFraction()</p> <p>void Grapple( vector direction )</p> <p>bool MayGrapple()</p> <p>int GetSuitGrapplePower()</p> <p>void SetSuitGrapplePower( float power )</p> <p>array GetPlayerSettingsMods() <p>void ClearMeleeDisabled()</p> <p>void SetMeleeDisabled()</p> <p>void RumbleEffect( int x, int y, int z )</p> <p>float GetInputAxisForward()</p> <p>Y Axis</p> <p>float GetInputAxisRight()</p> <p>X Axis</p> <p>int GetDodgePower()</p> <p>void HolsterWeapon()</p> <p>Holsters this weapon. The player can't use it until it's deployed again with <code>DeployWeapon</code></p> <p>void DeployWeapon()</p> <p>May not work with <code>DeployAndEnableWeapons()</code> and <code>HolsterAndDisableWeapons()</code></p> <p>float GetZoomFrac()</p> <p>Returns the fractal of the current weapon zoom. 1.0 is fully zoomed in.</p> <p>entity GetRemoteTurret()</p>"},{"location":"Modding/reference/respawn/entities/#cplayer","title":"CPlayer","text":"<p>CPlayer : extends CBaseCombatCharacter</p> <p>void CockpitStartDisembark()</p> <p>void NotifyDidDamage( entity damagedEnt, int hitbox, vector damagePosition, int customDamageType, float damage, int damageFlags, int hitGroup, entity weapon, float distanceFromAttackOrigin )</p> <p>void Server_SetDodgePower( float dodgePower )</p> <p>void SetDodgePowerDelayScale( float delay )</p> <p>void SetPowerRegenRateScale( float scale )</p> <p>void SetPersistentVar( string key, var val )</p> <p>void ForceStand()</p> <p>Force this player to stand up</p> <p>void UnforceStand()</p> <p>Allow crouching</p> <p>void SetPlayerNetBool( string key, bool val )</p> <p>void Anim_StopGesture( int gesture )</p> <p>void PlayerCone_Disable()</p> <p>void PlayerCone_FromAnim()</p> <p>void PlayerCone_SetLerpTime( float time )</p> <p>void PlayerCone_SetMaxPitch( int maxPitch )</p> <p>void PlayerCone_SetMaxYaw( int maxYaw )</p> <p>void PlayerCone_SetMinPitch( int min )</p> <p>void PlayerCone_SetMinYaw( int min )</p> <p>entity CreateAnimatedPlayerDecoy( string decoyType )</p> <p>Decoy Types: <code>pt_mp_execution_attacker_hologram_01</code>, <code>pt_mp_execution_attacker_hologram_02</code>, <code>pt_mp_execution_attacker_hologram_03</code></p> <p>void StopObserverMode()</p> <p>void CockpitStartEject()</p> <p>void FreezeControlsOnServer()</p> <p>void UnfreezeControlsOnServer()</p> <p>void CockpitStartBoot()</p> <p>void SetStaggering()</p> <p>void ForceCrouch()</p> <p>Force this player to crouch.</p> <p>void UnforceCrouch()</p> <p>Allow this player to stand.</p> <p>bool IsNoclipping()</p> <p>Returns <code>true</code> if noclip is enabled.</p> <p>void SetCinematicEventFlags( int flag )</p> <p>void SetSyncedEntity( entity synced )</p> <p>void SnapEyeAngles( vector angles )</p> <p>void SnapFeetToEyes()</p> <p>void TouchGround()</p> <p>Allows the player to double jump again.</p> <p>void ViewOffsetEntity_Clear()</p> <p>entity CreatePlayerDecoy( float stickPercentToRun )</p> <p>void SetPlayerSettingsWithMods( string settings, array newMods ) <p>void Server_TurnOffhandWeaponsDisabledOff()</p> <p>void Server_TurnOffhandWeaponsDisabledOn()</p> <p>void SetPlayerNetInt( string key, int val )</p> <p>void Anim_PlayGesture( string anim3p, float unknown_purpose, float unknown_purpose1, float unknown_purpose2 )</p> <p>void Server_TurnDodgeDisabledOff()</p> <p>void Server_TurnDodgeDisabledOn()</p> <p>void SetGroundFrictionScale( int scale )</p> <p>void PlayerCone_SetSpecific( vector viewAngles )</p> <p>void GiveExtraWeaponMod( string mod )</p>"},{"location":"Modding/reference/respawn/entities/#c_player","title":"C_Player","text":"<p>C_Player : extends C_BaseCombatCharacter</p> <p>void ClientCommand( string command )</p> <p>Executes a command on the player's client. For a server to execute a console command on a client, the client has to launch the game with the <code>norestrictservercommands</code> launch argument for security reasons.</p> <p>entity GetCockpit()</p> <p>string GetBodyType()</p> <p>float GetAdsFraction()</p> <p>bool IsInThirdPersonReplay()</p> <p>float GetHotDropImpactTime( entity titan = this.titan, string animation = HOTDROP_TURBO_ANIM )</p> <p>If called without paramets returns time for the player's titan drop.</p> <p>string GetPlayerNameWithClanTag()</p> <p>bool HasMic()</p> <p>bool InPartyChat()</p> <p>bool IsMuted()</p> <p>bool IsPartyLeader()</p> <p>bool IsTalking()</p> <p>void CockpitJolt( vector joltDir, float severity )</p> <p>play a jolt effect on the player</p> <p>void SetScriptMenuOff()</p> <p>void SetScriptMenuOn()</p> <p>EntityScreenSpaceBounds GetEntScreenSpaceBounds( entity ent, int padding )</p> <p>void HideCrosshairNames()</p> <p>Disable showing crosshair names of entities when aiming at them.</p> <p>void UnhideCrosshairNames()</p> <p>Enable showing crosshair names of entities when aiming at them. (default)</p> <p>void FreezeControlsOnClient()</p> <p>Stop player input.</p> <p>void Rodeo_StartCameraSmoothing( float factor )</p> <p>void Rodeo_StopCameraSmoothing( float factor )</p> <p>void StartArcCannon()</p> <p>void StopArcCannon()</p>"},{"location":"Modding/reference/respawn/entities/#ctitansoul-c_titansoul","title":"CTitanSoul / C_TitanSoul","text":""},{"location":"Modding/reference/respawn/entities/#shared_9","title":"Shared","text":"<p>CTitanSoul / C_TitanSoul : extends CBaseEntity / C_BaseEntity</p> <p>entity GetTitan()</p> <p>bool HasValidTitan()</p> <p>bool IsDoomed()</p> <p>Returns <code>true</code> if this soul is in doomed state</p> <p>float GetTitanSoulNetFloat( string key )</p> <p>entity GetInvalidHealthBarEnt()</p> <p>Returns an instance of <code>CNPC_Titan</code></p> <p>int GetTitanSoulNetInt( string key )</p> <p>float GetLastRodeoHitTime()</p> <p>bool IsEjecting()</p> <p>int GetStance()</p> <p>int GetPlayerSettingsNum()</p> <p>float GetCoreChargeExpireTime()</p> <p>float GetCoreChargeStartTime()</p> <p>float GetNextCoreChargeAvailable()</p>"},{"location":"Modding/reference/respawn/entities/#ctitansoul","title":"CTitanSoul","text":"<p>CTitanSoul : extends CBaseEntity</p> <p>void SetEjecting( bool ejecting )</p> <p>void SetPlayerSettingsNum( int enum )</p> <p>void SetStance( int stance )</p> <p>void SoulDestroy()</p> <p>void SetCoreChargeExpireTime( float gametime )</p> <p>void SetTitanSoulNetFloat( string key, float val )</p> <p>void SetTitanSoulNetFloatOverTime( string key, float val, float time )</p> <p>float GetCoreUseDuration()</p> <p>void SetTitanSoulNetInt( string key, int val )</p> <p>void SetLastRodeoHitTime( float gametime )</p> <p>void SetCoreChargeStartTime( float gametime )</p> <p>void SetCoreUseDuration( float duration )</p> <p>void SetNextCoreChargeAvailable( float time )</p>"},{"location":"Modding/reference/respawn/entities/#c_titansoul","title":"C_TitanSoul","text":"<p>C_TitanSoul : extends C_BaseEntity</p>"},{"location":"Modding/reference/respawn/entities/#cbasecombatcharacter-c_basecombatcharacter","title":"CBaseCombatCharacter / C_BaseCombatCharacter","text":""},{"location":"Modding/reference/respawn/entities/#shared_10","title":"Shared","text":"<p>CBaseCombatCharacter / C_BaseCombatCharacter : extends CBaseAnimating / C_BaseAnimating</p> <p>entity GetTitanSoul()</p> <p>void ContextAction_ClearBusy()</p> <p>bool ContextAction_IsActive()</p> <p>bool ContextAction_IsBusy()</p> <p>void ContextAction_SetBusy()</p> <p>vector Anim_GetStartForRefEntity_Old( string anim, vector reference, string optionalTag )</p> <p>array GetMainWeapons() <p>entity GetOffhandWeapon( int slot )</p> <p>entity GetActiveWeapon()</p> <p>entity GetLatestPrimaryWeapon()</p> <p>int GetSkin()</p> <p>int LookupSequence( string sequence )</p> <p>void SetSkin( int skin )</p> <p>entity GetAntiTitanWeapon()</p> <p>AnimRefPoint Anim_GetStartForRefPoint( string anim, vector origin, vector angles )</p> <p>vector GetPlayerOrNPCViewVector()</p> <p>vector Anim_GetStartForRefPoint_Old( animation, origin, angles )</p> <p>void Anim_PlayWithRefPoint( string animation, vector origin, vector angles, float blendTime )</p> <p>bool IsWeaponDisabled()</p> <p>int GetActiveWeaponPrimaryAmmoLoaded()</p> <p>bool ContextAction_IsMeleeExecution()</p> <p>int GetWeaponAmmoStockpile( entity weapon )</p> <p>entity GetMeleeWeapon()</p> <p>bool ContextAction_IsMeleeExecutionTarget()</p> <p>entity GetFirstRodeoRider()</p> <p>Returns the first rodeo rider found or null if there are none.</p> <p>int GetNumRodeoSlots()</p> <p>Returns number of rodeo slots available on this entity.</p> <p>entity GetRodeoRider()</p> <p>Returns rodeo rider (if there is one) at the given slot.</p> <p>void PhaseShiftBegin( float warmUpTime, float duration )</p> <p>void PhaseShiftCancel()</p> <p>vector OffsetPositionFromView( vector startPos, vector offset )</p> <p>int GetWeaponAmmoLoaded( entity weapon )</p> <p>int GetWeaponAmmoMaxLoaded( entity weapon )</p> <p>float GetAttackSpreadAngle()</p> <p>array GetOffhandWeapons() <p>bool ContextAction_IsLeeching()</p> <p>void DisablePhaseShiftFlags()</p> <p>void EnablePhaseShiftFlags()</p> <p>entity GetEntityAtPhaseShiftExitPosition()</p> <p>float PhaseShiftTimeRemaining()</p> <p>bool CanUseSharedEnergy( int curCost )</p> <p>bool CanUseSharedEnergy( int curCost )</p> <p>void AddSharedEnergy( int amount )</p> <p>int GetSharedEnergyTotal()</p> <p>int GetSharedEnergyCount()</p> <p>void SetSharedEnergyRegenDelay( float delay )</p> <p>void TakeSharedEnergy( int amount )</p>"},{"location":"Modding/reference/respawn/entities/#cbasecombatcharacter","title":"CBaseCombatCharacter","text":"<p>CBaseCombatCharacter : extends CBaseAnimating</p> <p>void SetFullBodygroup( int group )</p> <p>void GetSettingsHeadshotFX()</p> <p>Looks for \"headshotFX\" in an AI settings file or a player set file</p> <p>void GiveOffhandWeapon( string ordnanceName, int slot, array mods ) <p>void GiveWeapon( string weapon )</p> <p>void SetActiveWeaponByName( string weapon )</p> <p>void TakeOffhandWeapon( int slot )</p> <p>void TakeWeaponNow( string weapon )</p> <p>void TakeWeapon( string weapon )</p> <p>int GetOutOfBoundsDeadTime()</p> <p>void SetNumRodeoSlots( int )</p> <p>Sets the maximum number of rodeo slots available on this entity.</p> <p>void SetRodeoRider( int slot, entity rider )</p> <p>Sets the rodeo rider at the given slot</p> <p>void SetNPCPriorityOverride_NoThreat()</p> <p>void SetTitanSoul( entity soul )</p> <p>vector GetPlayerOrNPCViewRight()</p> <p>void ResetHealthChangeRate()</p>"},{"location":"Modding/reference/respawn/entities/#c_basecombatcharacter","title":"C_BaseCombatCharacter","text":"<p>C_BaseCombatCharacter : extends C_BaseAnimating</p> <p>TraceResults TraceToLocalPlayer()</p> <p>float TraceToLocalPlayerSimple()</p>"},{"location":"Modding/reference/respawn/entities/#cai_basenpc-c_ai_basenpc","title":"CAI_BaseNPC / C_AI_BaseNPC","text":""},{"location":"Modding/reference/respawn/entities/#shared_11","title":"Shared","text":"<p>CAI_BaseNPC / C_AI_BaseNPC : extends CBaseCombatCharacter</p> <p>var Dev_GetAISettingByKeyField( string key )</p> <p>Expect as string</p> <p>bool IsInterruptable()</p> <p>int GetAIClass()</p> <p><code>AIC_SMALL_TURRET</code>, <code>AIC_MARVIN</code>, <code>AIC_SPECTRE</code>, <code>AIC_STALKER_CRAWLING</code>, <code>AIC_FRAG_DRONE</code>, <code>AIC_HUMAN</code></p> <p>string GetBodyType()</p> <p>string GetAISettingsName()</p> <p>int GetMeleeDamageMaxForTarget( entity target )</p> <p>float AISetting_MaxFlyingSpeed()</p> <p>get the current flying speed of the npc.</p> <p>string AISetting_LeechAnimSet()</p> <p>string AISetting_LeechDataKnifeTag()</p>"},{"location":"Modding/reference/respawn/entities/#cai_basenpc","title":"CAI_BaseNPC","text":"<p>CAI_BaseNPC : extends C_BaseCombatCharacter</p> <p>void AssaultPoint( vector point )</p> <p>void EnableBehavior( string behaviour )</p> <p>void DisableBehavior( string behaviour )</p> <p>Possible behaviours: <code>Follow</code>, <code>Assault</code></p> <p>void SetThinkEveryFrame( bool think )</p> <p>void ClearEnemy( entity enemy )</p> <p>Clears the enemy of this npc.</p> <p>void SetEnemy( entity enemy )</p> <p>Sets the enemy this npc will attack.</p> <p>void Anim_ScriptedPlay( string anim )</p> <p>void ForceCheckGroundEntity()</p> <p>string GetNPCState()</p> <p>float GetMaxEnemyDist()</p> <p>Max pilot engagement distance</p> <p>float GetMaxEnemyDistHeavyArmor()</p> <p>Max titan engagement distance</p> <p>float GetMaxTurretYaw()</p> <p>void SetSecondaryEnemy( entity enemy )</p> <p>void DisableNPCMoveFlag( int flag )</p> <p>void EnableNPCMoveFlag( int flag )</p> <p>void SetAISettings( string settings )</p> <p>void SetCapabilityFlag( int flag, bool active )</p> <p>Sets if a capability is available to the player</p> <p>void Anim_ScriptedPlayActivityByName( string activity, bool unknown_purpose1, float unknown_purpose2 )</p> <p>entity GetEnemy()</p> <p>bool CanSee( entity ent )</p> <p>Returns <code>true</code> if the npc can see the <code>ent</code>.</p> <p>bool IsCrouching()</p> <p>bool IsSecondaryAttack()</p> <p>entity GetFollowTarget()</p> <p>void InitFollowBehavior( entity followMe, string followBehaviour )</p> <p>void DisableNPCFlag( int flag )</p> <p>void EnableNPCFlag( int flag )</p> <p>void Freeze()</p> <p>Freezes all animations and movement of this entity.</p> <p>void Unfreeze()</p> <p>unfreezes all animations and movement of this entity.</p> <p>bool HasXRaySupport()</p> <p>Returns if <code>this.supportsXRay</code> not null.</p> <p>void ForceCombat()</p> <p>Force into combat state by updating NPC's memory of the player.</p> <p>bool InCombat()</p> <p>Returns true if NPC is in combat.</p>"},{"location":"Modding/reference/respawn/entities/#c_ai_basenpc","title":"C_AI_BaseNPC","text":"<p>C_AI_BaseNPC : extends C_BaseCombatCharacter</p>"},{"location":"Modding/reference/respawn/entities/#cnpc_titan-c_npc_titan","title":"CNPC_Titan / C_NPC_Titan","text":""},{"location":"Modding/reference/respawn/entities/#shared_12","title":"Shared","text":"<p>CNPC_Titan / C_NPC_Titan : extends CAI_BaseNPC / C_AI_BaseNPC</p> <p>bool GetCanStand()</p>"},{"location":"Modding/reference/respawn/entities/#cnpc_titan","title":"CNPC_Titan","text":"<p>CNPC_Titan : extends CAI_BaseNPC</p> <p>void SetCanStand( bool canStand )</p> <p>void GrappleNPC( vector dir )</p>"},{"location":"Modding/reference/respawn/entities/#c_npc_titan","title":"C_NPC_Titan","text":""},{"location":"Modding/reference/respawn/entities/#cnpc_dropship-c_npc_dropship","title":"CNPC_Dropship / C_NPC_Dropship","text":""},{"location":"Modding/reference/respawn/entities/#shared_13","title":"Shared","text":"<p>CNPC_Dropship / C_NPC_Dropship : extends CAI_BaseNPC / C_AI_BaseNPC</p> <p>bool IsJetWakeFXEnabled()</p>"},{"location":"Modding/reference/respawn/entities/#cnpc_dropship","title":"CNPC_Dropship","text":"<p>CNPC_Dropship : extends CAI_BaseNPC</p>"},{"location":"Modding/reference/respawn/entities/#c_npc_dropship","title":"C_NPC_Dropship","text":"<p>C_NPC_Dropship : extends C_AI_BaseNPC</p>"},{"location":"Modding/reference/respawn/entities/#cnpc_drone","title":"CNPC_Drone","text":"<p>CNPC_Drone : extends CAI_BaseNPC</p> <p>void SetAttackMode( bool attack )</p> <p>Set to <code>false</code> to not attack enemies.</p> <p>CNPC_SentryTurret / C_NPC_SentryTurret</p>"},{"location":"Modding/reference/respawn/entities/#shared_14","title":"Shared","text":"<p>CNPC_SentryTurret / C_NPC_SentryTurret : extends CAI_BaseNPC / C_AI_BaseNPC</p> <p>int GetTurretState()</p> <p>entity GetControlPanel()</p>"},{"location":"Modding/reference/respawn/entities/#cnpc_sentryturret","title":"CNPC_SentryTurret","text":"<p>CNPC_SentryTurret : extends CAI_BaseNPC</p> <p>void StartDeployed()</p>"},{"location":"Modding/reference/respawn/entities/#c_npc_sentryturret","title":"C_NPC_SentryTurret","text":"<p>C_NPC_SentryTurret : extends C_AI_BaseNPC</p>"},{"location":"Modding/reference/respawn/entities/#cfirstpersonproxy-c_firstpersonproxy","title":"CFirstPersonProxy / C_FirstPersonProxy","text":""},{"location":"Modding/reference/respawn/entities/#shared_15","title":"Shared","text":"<p>CFirstPersonProxy / C_FirstPersonProxy : extends CBaseAnimating / C_BaseAnimating</p>"},{"location":"Modding/reference/respawn/entities/#cfirstpersonproxy","title":"CFirstPersonProxy","text":"<p>CFirstPersonProxy : extends CBaseAnimating</p>"},{"location":"Modding/reference/respawn/entities/#c_firstpersonproxy","title":"C_FirstPersonProxy","text":"<p>C_FirstPersonProxy : extends C_BaseAnimating</p>"},{"location":"Modding/reference/respawn/entities/#cbaseanimating-c_baseanimating","title":"CBaseAnimating / C_BaseAnimating","text":""},{"location":"Modding/reference/respawn/entities/#shared_16","title":"Shared","text":"<p>CBaseAnimating / C_BaseAnimating : extends CBaseEntity / C_BaseEntity</p> <p>vector GetAttachmentOrigin()</p> <p>int LookupAttachment( string attachment )</p> <p>int FindBodyGroup( string group )</p> <p>int GetBodyGroupState( int bodyGroupIndex )</p> <p>int GetBodyGroupModelCount( int bodyGroupIndex )</p> <p>void SetBodygroup( int groupIndex, int newIndex )</p> <p>vector GetAttachmentAngles()</p> <p>Attachment Anim_GetAttachmentAtTime( string animation, string attachmentName, float time )</p> <p>float GetScriptedAnimEventCycleFrac( string anim, string event )</p> <p>float GetSequenceDuration( string anim )</p> <p>bool Anim_IsActive()</p> <p>void Anim_Play( string anim )</p> <p>void Anim_SetInitialTime( float time )</p> <p>void Anim_Stop()</p> <p>vector Anim_GetStartForRefEntity_Old( string anim, vector reference, string optionalTag )</p> <p>int GetSkin()</p> <p>int LookupSequence( string sequence )</p> <p>void SetSkin( int skin )</p> <p>AnimRefPoint Anim_GetStartForRefPoint( string anim, vector origin, vector angles )</p> <p>vector Anim_GetStartForRefPoint_Old( animation, origin, angles )</p> <p>void Anim_PlayWithRefPoint( string animation, vector origin, vector angles, float blendTime )</p> <p>void Anim_NonScriptedPlay( string animation )</p> <p>bool Anim_HasSequence( string animation )</p> <p>void SetPlaybackRate( float rate )</p> <p>void Anim_SetStartTime( float time )</p> <p>void LerpSkyScale( float skyScale, float time )</p> <p>void SetPoseParameter( int pose, float offset )</p> <p>vector GetAttachmentForward( int attachID )</p>"},{"location":"Modding/reference/respawn/entities/#cbaseanimating","title":"CBaseAnimating","text":"<p>CBaseAnimating : extends CBaseEntity</p> <p>int GetFullBodygroup()</p> <p>void BecomeRagdoll( vector push, bool skipAnim )</p> <p>void Dissolve( int dissolveID, vector normal, int unknown_purpose )</p> <p>void Gib( vector forceVec )</p> <p>void SetContinueAnimatingAfterRagdoll( bool cont )</p> <p>void PlayRecordedAnimation( asset animation, vector unknown_purpose1, vecor unknown_purpose2, float blendTime, entity ref )</p> <p>void SetRecordedAnimationPlaybackRate( float rate )</p> <p>void Anim_EnablePlanting()</p> <p>int LookupPoseParameterIndex( string poseParam )</p> <p>void Anim_DisableUpdatePosition()</p>"},{"location":"Modding/reference/respawn/entities/#c_baseanimating","title":"C_BaseAnimating","text":"<p>C_BaseAnimatin : extends C_BaseEntity</p> <p>void SetGroundEffectTable( string tableIdentifier )</p> <p>float GetAttachmentOrigin_ViewModelNoFOVAdjust( int index )</p> <p>void Anim_SetPaused( bool pause )</p> <p>void SetCycle( float cycle )</p> <p>void DoBodyGroupChangeScriptCallback( bool doCallback, int bodygroup )</p>"},{"location":"Modding/reference/respawn/entities/#cplayerdecoy-c_playerdecoy","title":"CPlayerDecoy / C_PlayerDecoy","text":""},{"location":"Modding/reference/respawn/entities/#shared_17","title":"Shared","text":"<p>CPlayerDecoy / C_PlayerDecoy : extends CBaseAnimating / C_BaseAnimating</p>"},{"location":"Modding/reference/respawn/entities/#cplayerdecoy","title":"CPlayerDecoy","text":"<p>CPlayerDecoy : extends CBaseAnimating</p> <p>void Decoy_Dissolve()</p> <p>Dissolve this decoy. You might want to clear decoy fx with <code>CleanupFXAndSoundsForDecoy( entity decoy )</code> afterwards. </p> <p>void SetTimeout( float duration )</p> <p>Set the time after which the decoy gets automatically dissolved.</p> <p>void SetDecoyRandomPulseRateMax( float pulse_amount_per_second )</p> <p>void SetFriendlyFire( bool enabled )</p> <p>Sets if friendly fire is enabled for this decoy.</p> <p>void SetKillOnCollision( bool kill )</p> <p>Sets if this decoy gets killed when colliding with props or geometry.</p>"},{"location":"Modding/reference/respawn/entities/#c_playerdecoy","title":"C_PlayerDecoy","text":"<p>CPlayerDecoy : extends CBaseAnimating</p>"},{"location":"Modding/reference/respawn/entities/#cturret","title":"CTurret","text":"<p>CTurret : extends CBaseAnimating</p> <p>void ClearDriver()</p> <p>entity GetDriver()</p> <p>voit SetDriver( entity driver )</p>"},{"location":"Modding/reference/respawn/entities/#c_titan_cockpit","title":"C_Titan_Cockpit","text":"<p>C_Titan_Cockpit : extends C_BaseEntity</p> <p>void AddToTitanHudDamageHistory( int panel, int damage )</p> <p>void SetCaptureScreenBeforeViewmodels( bool cap )</p> <p>float GetTimeInCockpit()</p> <p>Returns the total time of time spent in this cockpit.</p> <p>Cockpit booting takes 1.3 seconds, so anything less than 1.3 seconds is still playing the booting animation. You can use <code>TitanCockpit_IsBooting( entity cockpit )</code> to determine this state.</p> <p>void SetOpenViewmodelOffset( float x, float y, float z )</p>"},{"location":"Modding/reference/respawn/entities/#cparticlesystem","title":"CParticleSystem","text":"<p>CParticleSystem : extends CBaseEntity</p> <p>void FXEnableRenderAlways()</p> <p>void SetStopType( string type )</p> <p>void SetControlPointEnt( int controlPoint, entity destEnt )</p>"},{"location":"Modding/reference/respawn/entities/#cvortexsphere-c_vortexsphere","title":"CVortexSphere / C_VortexSphere","text":""},{"location":"Modding/reference/respawn/entities/#shared_18","title":"Shared","text":"<p>CVortexSphere / C_VortexSphere : extends CBaseEntity / C_BaseEntity</p> <p>int GetBulletAbsorbedCount()</p> <p>int GetProjectileAbsorbedCount()</p>"},{"location":"Modding/reference/respawn/entities/#cvortexsphere","title":"CVortexSphere","text":"<p>CVortexSphere : extends CBaseEntity</p> <p>void SetGunVortexAngles( vector angles )</p> <p>void SetGunVortexAttachment( string attach )</p> <p>void SetOwnerWeapon( entity owner )</p> <p>void SetVortexEffect( entity fx )</p> <p>void DisableVortexBlockLOS()</p> <p>entity GetOwnerWeapon()</p> <p>void AddBulletToSphere()</p> <p>void AddProjectileToSphere()</p> <p>void ClearAllBulletsFromSphere()</p> <p>void RemoveBulletFromSphere()</p> <p>void RemoveProjectileFromSphere()</p>"},{"location":"Modding/reference/respawn/entities/#c_vortexsphere","title":"C_VortexSphere","text":"<p>C_VortexSphere : extends C_BaseEntity</p>"},{"location":"Modding/reference/respawn/entities/#cenvexplosion","title":"CEnvExplosion","text":"<p>CEnvExplosion : extends CBaseEntity</p>"},{"location":"Modding/reference/respawn/hud_element_notation/","title":"Element Notation","text":"<p>Elements are notated as VDF</p> <p>UI elements are created when a menu is initialized. References to the elements will stay the same, regardless if the menu is open or not.</p> <p>It is not possible to create elements at runtime so you have to define all elements a menu or panel contains beforehand in appropriate files.</p> <p>An Element is declared in the following way:</p> <pre><code>    // please follow this structure\n    ElementName\n    {\n        ControlName name\n        // optional: classname, inheritance, ids ...\n\n        // optional: other properties\n\n        // optional: pinning\n    }\n</code></pre> <p>If you're working on a menu, you need a <code>menu</code> object that contains all elements, for example like this:</p> <p><pre><code>    resource/ui/menus/profiles_menu.menu\n    {\n        menu\n        {\n            ControlName Frame\n            xpos 0\n            ypos 0\n            zpos 3\n            wide f0\n            tall f0\n            autoResize 0\n            visible 1\n            enabled 1\n            pinCorner 0\n            PaintBackgroundType 0\n            infocus_bgcolor_override \"0 0 0 0\"\n            outoffocus_bgcolor_override \"0 0 0 0\"\n\n            // elements\n        }\n    }\n</code></pre> It usually doesn't matter if you use quotation marks to assign string values to parameters.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#hud-panel-files","title":"HUD &amp; Panel files","text":"<p>The first line of a <code>.menu</code> or <code>.res</code> file needs to be the resource path to itself, starting from the resource folder.</p> <p>It's not possible to load other files as menus or panels. A <code>.menu</code> represents an independant menu of the game, while <code>.res</code> files are \"Panels\" that can be loaded from other elements.</p> <p>The rest of the file needs to be wrapped in curly brackets.</p> <pre><code>    resource/ui/menus/more/folders/my_menu.menu\n    {\n        MyObject\n        {\n            // object properties go here\n        }\n\n        // more objects ...\n    }\n</code></pre>"},{"location":"Modding/reference/respawn/hud_element_notation/#properties","title":"Properties","text":"<p>Capitalization of the properties shouldn't matter.</p> <p>(ElementName)</p> <p>This isn't a regular property and comes before the opening bracket</p> <p>Unique string identifier used in scripts to look up an element. Every element is required to have a name.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#inheritance-parenting","title":"Inheritance / Parenting","text":"<p>ControlName</p> <p>Controls what type of Component the element is and what parameters have an effect. Every element is required to have control name.</p> <p>InheritProperties</p> <p>controlSettingsFile</p> <p>Load a <code>.res</code> file. All elements in the settings file are instantiated and set as children of the element.</p> <p><code>Hud_GetChild</code> only works if the parent element is (has the <code>ControlName</code>) a CNestedPanel!</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#identifying","title":"Identifying","text":"<p>classname</p> <p>Classname used for identifying groups of elements</p> <p>scriptID</p> <p>Set an unique integer id for this element that's retrievable in script.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#position","title":"Position","text":"<p>xpos</p> <p>Set the base x position relative to the element's sibling position.</p> <p>inverted when attached to the left corner or smth</p> <p>ypos</p> <p>Set the base y position relative to the element's sibling position.</p> <p>inverted when attached to the top corner or smth</p> <p>zpos</p> <p>The layer this element sits in. Elements with a higher z will be prioritized to be selected / focused. They are also drawn on top of elements with a lower z position.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#dimensions","title":"Dimensions","text":"<p>wide</p> <p>Set the base width of this element.</p> <p>tall</p> <p>Set the base height of this element.</p> <p>scale</p> <p>Float that scales the element.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#text","title":"Text","text":"<p>labelText</p> <p>Set the label text of this element, if it is a Label.</p> <p>textAlignment</p> <p>Controls the element boundary point the element's text gets aligned with. <code>east</code> -&gt; Left, <code>north</code> -&gt; Top, <code>west</code> -&gt; Right, <code>south</code> Bottom.</p> <p>You can also combine the directions like this: <code>north-west</code>.</p> <p>allcaps</p> <p>Controls if the text of this element is rendered in all caps. Defaults to 0.</p> <p>font</p> <p>Set the text font of this element.</p> <p>textinsetx</p> <p>textinsety</p> <p>dulltext</p> <p>brighttext</p> <p>textalign</p> <p>NoWrap</p> <p>don't wrape text</p> <p>wrap</p> <p>wrap text from east</p> <p>centerwrap</p> <p>wrap text from center</p> <p>keyboardTitle</p> <p>keyboardDescription</p> <p>selectedFont</p> <p>text</p> <p>multiline</p> <p>Set if the text input supports multiline input.</p> <p>use_proportional_insets</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#pinning","title":"Pinning","text":"<p>pin_to_sibling</p> <p>Controls the sibling this element will be pinned to. Takes an element's name as a parameter.</p> <p>pin_corner_to_sibling</p> <p>Sets which corner of this element is pinned to the sibling.</p> <p>pin_to_sibling_corner</p> <p>Set to which corner of the sibling this element is pinned to.</p> <p>pinCorner</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#rui","title":"Rui","text":"<p>rui</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#images","title":"Images","text":"<p>image</p> <p>vgui asset to render</p> <p>scaleImage</p> <p>fg_image</p> <p>drawColor</p> <p>apply this color on top. Format is \"r g b a\".</p> <p>fillcolor</p> <p>Fill transparent pixels with this color. Format is \"r g b a\"</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#navigation","title":"Navigation","text":"<p>navUp</p> <p>navDown</p> <p>navLeft</p> <p>navRight</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#slider","title":"Slider","text":"<p>stepSize</p> <p>isValueClampedToStepSize</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#other","title":"Other","text":"<p>visible</p> <p>Controls if this element is rendered. Defaults to 1.</p> <p>enable</p> <p>Controls if this element starts enabled. Defaults to 1.</p> <p>auto_wide_to_contents</p> <p>auto_wide_tocontents</p> <p>auto_tall_tocontents</p> <p>enabled</p> <p>Controls if this element is enabled. Only enabled elements can be focused / selected. Defaults to 1.</p> <p>destination</p> <p>frame</p> <p>fieldName</p> <p>autoResize</p> <p>barCount</p> <p>barSpacing</p> <p>dialogstyle</p> <p>style</p> <p>command</p> <p>ActivationType</p> <p>paintbackground</p> <p>tabposition</p> <p>activeInputExclusivePaint</p> <p>paintborder</p> <p>CircularEnabled</p> <p>CircularClockwise</p> <p>consoleStyle</p> <p>unicode</p> <p>Default</p> <p>selected</p> <p>maxchars</p> <p>listName</p> <p>arrowsVisible</p> <p>verifiedColumnWidth</p> <p>nameColumnWidth</p> <p>totalMembersColumnWidth</p> <p>chatBorderThickness</p> <p>messageModeAlwaysOn</p> <p>interactive</p> <p>rowHeight</p> <p>nameSpaceX</p> <p>nameSpaceY</p> <p>micWide</p> <p>micTall</p> <p>micSpaceX</p> <p>micOffsetY</p> <p>textHidden</p> <p>editable</p> <p>NumericInputOnly</p> <p>allowRightClickMenu</p> <p>allowSpecialCharacters</p> <p>SelectedTextColor</p> <p>SelectedBgColor</p> <p>clip</p> <p>teamRelationshipFilter</p> <p>activeColumnWidth</p> <p>happyHourColumnWidth</p> <p>onlinePlayersColumnWidth</p> <p>PaintBackgroundType</p> <p>// 0 for normal(opaque), 1 for single texture from Texture1, and 2 for rounded box w/ four corner textures</p> <p>ConVar</p> <p>alpha</p> <p>conCommand</p> <p>minValue</p> <p>maxValue</p> <p>inverseFill</p> <p>syncedConVar</p> <p>showConVarAsFloat</p> <p>modal</p> <p>headerHeight</p> <p>panelBorder</p> <p>linespacing</p> <p>rightClickEvents</p> <p>conCommandDefault</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#conditional-properties","title":"Conditional Properties","text":"<p>You can declare properties for specific conditions by adding <code>[CONDITION]</code> after the property value.</p> <p>When putting a condition after an element's name, the element will only be created if the condition evaluates to true.</p> <p>Usable conditions are:</p> <p>$WIN32</p> <p>game is running on 32 bit windows</p> <p>$WINDOWS</p> <p>game is running on windows</p> <p>$DURANGO</p> <p>game is running on xbox</p> <p>$PS4</p> <p>game is running on a PS4</p> <p>$GAMECONSOLE</p> <p>$WIDESCREEN_16_9</p> <p>game resolution is 16/9</p> <p>$LANGUAGE</p> <p>the game's language.</p> <p>.. code-block:: text</p> <pre><code>    // use allcaps only in russian\n    allCaps        0  [!$RUSSIAN]\n    allCaps        1  [$RUSSIAN]\n</code></pre> <p>On top of that, logical operators like <code>!</code>, <code>&amp;&amp;</code> and <code>||</code> are available as well.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#example","title":"Example:","text":"<pre><code>    // This element only shows on pc\n    IngameTextChat [$WINDOWS]\n    {\n        ControlName             CBaseHudChat\n        InheritProperties       ChatBox\n\n        destination             \"match\"\n\n        visible                 0\n\n        pin_to_sibling          Screen\n        pin_corner_to_sibling   TOP_LEFT\n        pin_to_sibling_corner   TOP_LEFT\n        xpos                    -45\n        ypos                    -616\n    }\n\n    // This element has different widths depending on the game resolution\n    LoadingTip\n    {\n        ControlName             Label\n        ypos                    10\n        wide                    1630 [$WIDESCREEN_16_9]\n        wide                    1441 [!$WIDESCREEN_16_9]\n        auto_tall_tocontents    1\n        labelText               \"\"\n        textalign               \"north-west\"\n        font                    Default_28\n        wrap                    1\n        fgcolor_override        \"217 170 75 255\"\n        visible                 0\n\n        pin_to_sibling          LoadingGameMode\n        pin_corner_to_sibling   TOP_LEFT\n        pin_to_sibling_corner   BOTTOM_LEFT\n    }\n</code></pre>"},{"location":"Modding/reference/respawn/hud_element_notation/#pinning_1","title":"Pinning","text":"<p>CENTER</p> <p>The calculated center of the element</p> <p>TOP</p> <p>Element's top y bounds, x axis center.</p> <p>BOTTOM</p> <p>Element's lowest y bounds, x axis center.</p> <p>LEFT</p> <p>Element's lowest x bounds, y axis center.</p> <p>RIGHT</p> <p>Element's highest x bounds, y axis center.</p> <p>TOP_LEFT</p> <p>Top left corner</p> <p>TOP_RIGHT</p> <p>Top right corner</p> <p>BOTTOM_LEFT</p> <p>Bottom left corner</p> <p>BOTTOM_RIGHT</p> <p>Bottom right corner</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#units","title":"Units","text":"<p>You can calculate the position or dimensions etc. with different units. If you provide no extra unit, the game uses pixels.</p> <p>%x</p> <p>x percent of the screen.</p> <p>.. code:block::</p> <pre><code>// cover the entire screen\nwidth   %100\nheight  %100\n</code></pre> <p>fx</p> <p>use 100%</p> <p>c\u00b1x</p> <p>something with the screen edges not exactly sure how positions get calculated</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#including-keyvalues","title":"Including KeyValues","text":"<p>To include another KeyValue file, use <code>#base \"filepath\"</code> at the top of a VDF file.</p>"},{"location":"Modding/reference/respawn/hud_menus/","title":"HUD Menus","text":"<p>Before working on HUD, it's recommended to <code>extract &lt;https://noskill.gitbook.io/titanfall2/intro/duction/vpk-packpack&gt;</code>_ the <code>englishclient_frontend.bsp.pak000_dir.vpk</code> vpk. This file contains all vanilla menus and UI logic and will be a very helpful reference!</p>"},{"location":"Modding/reference/respawn/hud_menus/#registering-a-menu","title":"Registering a menu","text":"<p>In your <code>mod.json</code>, add a <code>Before</code> UI callback like this:</p> <pre><code>        {\n            \"Path\": \"ui/profiles_menu.nut\",\n            \"RunOn\": \"UI\",\n            \"UICallback\": {\n                \"Before\": \"InitProfilesMenu\",\n            }\n        }\n</code></pre> <p>In the script you referenced, create a global in which you register your menu with the <code>AddMenu</code> like this:</p> <pre><code>    global function InitProfilesMenu\n\n    void function InitProfilesMenu()\n    {\n        AddMenu( \"MenuName\", $\"path/to/menu.menu\"  )\n    }\n</code></pre> <p>If you want to, you can add a init to <code>AddMenu</code> like this: <code>AddMenu( \"MenuName\", $\"path/to/menu.menu\", func )</code></p> <p>The returns <code>void</code> and takes no parameters. It gets called once the menu is initialized.</p> <p>It's recommended to create a file struct in which you store menu states:</p> <pre><code>    struct {\n        var menu\n    } file\n\n    void function MenuInitCallback()\n    {\n        file.menu = GetMenu( \"MenuName\" )\n    }\n</code></pre>"},{"location":"Modding/reference/respawn/hud_menus/#registering-a-submenu","title":"Registering a Submenu","text":""},{"location":"Modding/reference/respawn/hud_menus/#menu-functions","title":"Menu Functions","text":"<p>Useless functions have been left out. From <code>_menus.nut</code></p> <p>UICodeCallback_ActivateMenus</p>"},{"location":"Modding/reference/respawn/hud_menus/#register-menus","title":"Register Menus","text":"<p>var AddMenu( string blockName, asset resourceFile, void functionref() initFunc = null, string displayName = \"\" )</p> <p>Register a normal HUD menu. The init function will be called once all menus are registered and created.</p> <p>var AddMenu_WithCreateFunc( string blockName, asset resourceFile, void functionref() initFunc, var functionref( ... ) createMenuFunc )</p> <p>Registers a normal HUD menu with a custom function to create the menu. The create function needs to be native since scripts can't create HUD elements.</p> <p>var AddPanel( var menu, string panelName, void functionref() initFunc = null )</p> <p>var AddSubmenu( blockName, asset resourceFile, void functionref() initFunc = null )</p>"},{"location":"Modding/reference/respawn/hud_menus/#open-menus","title":"Open Menus","text":"<p>void AdvanceMenu( string name )</p> <p>Push a menu to the stack / open a menu</p> <p>void OpenSubmenu( var menu, bool updateMenuPos = true )</p> <p>if <code>updateMenuPos</code> is not <code>null</code>, the menu is required to have a <code>ButtonFrame</code> element that is the main content reference. </p>"},{"location":"Modding/reference/respawn/hud_menus/#retrieve-menus","title":"Retrieve Menus","text":"<p>var GetMenu( string name )</p> <p>Get the menu reference</p> <p>var GetPanel( string name )</p> <p>var GetActiveMenu()</p> <p>array GetAllMenuPanels( var menu )"},{"location":"Modding/reference/respawn/hud_menus/#close-menus","title":"Close Menus","text":"<p>void CloseActiveMenu( bool cancelled = false, bool openStackMenu = true )</p> <p>void CloseAllMenus()</p> <p>void CloseAllDialogs()</p> <p>void CloseAllToTargetMenu( var menu )</p> <p>Close until the menu is the most recent opened.</p> <p>void CloseSubmenu( bool openStackMenu = true )</p> <p>void CleanupInGameMenus()</p>"},{"location":"Modding/reference/respawn/hud_menus/#callbacks","title":"Callbacks","text":"<p>void AddMenuEventHandler( var menu, int event, void functionref() func )</p> <p>Accepted events:</p> <ul> <li> <p><code>eUIEvent.MENU_OPEN</code></p> </li> <li> <p><code>eUIEvent.MENU_CLOSE</code></p> </li> <li> <p><code>eUIEvent.MENU_SHOW</code></p> </li> <li> <p><code>eUIEvent.MENU_HIDE</code></p> </li> <li> <p><code>eUIEvent.MENU_NAVIGATE_BACK</code></p> </li> <li> <p><code>eUIEvent.MENU_TAB_CHANGED</code></p> </li> <li> <p><code>eUIEvent.MENU_ENTITLEMENTS_CHANGED</code></p> </li> <li> <p><code>eUIEvent.MENU_INPUT_MODE_CHANGED</code></p> </li> </ul> <p>void AddPanelEventHandler( var panel, int event, void functionref() func )</p> <p>Accepted events:</p> <ul> <li> <p><code>eUIEvent.PANEL_SHOW</code></p> </li> <li> <p><code>eUIEvent.PANEL_HIDE</code></p> </li> </ul> <p>void AddButtonEventHandler( var button, int event, void functionref( var ) func )</p> <p>void AddEventHandlerToButton( var menu, string buttonName, int event, void functionref( var ) func )</p> <p>Add an event handler to an element.</p> <p>If you have a reference to the element, use <code>Hud_AddEventHandler</code></p> <p>void AddEventHandlerToButtonClass( var menu, string classname, int event, void functionref( var ) func )</p> <p>Add a event handler for every element of a class</p> <p>var GetTopNonDialogMenu()</p> <p>Get the last openend menu that isn't a dialog</p> <p>bool IsDialog( var menu )</p> <p>Returns <code>true</code> if the menu is a dialog.</p>"},{"location":"Modding/reference/respawn/hud_menus/#submenus","title":"Submenus","text":"<p>Not recommended to use.</p> <p>CloseAllInGameMenus()</p> <p>OpenSubmenu( var menu, bool updateMenuPos = true )</p> <p>CloseSubmenu( bool openStackMenu = true )</p>"},{"location":"Modding/reference/respawn/hud_menus/#other","title":"Other","text":"<p>void PrintMenuStack()</p> <p>Debugging</p> <p>void AddMenuElementsByClassname( var menu, string classname )</p> <p>void FocusDefaultMenuItem( var menu )</p> <p>Set the default focus element to be focused</p> <p>void FocusDefault( var menu )</p> <p>Like <code>FocusDefaultMenuItem</code> but excludes some menus.</p>"},{"location":"Modding/reference/respawn/hud_menus/#footers","title":"Footers","text":"<p>To use footers, add this element to your menu:</p> <pre><code>    FooterButtons\n    {\n        ControlName         CNestedPanel\n        InheritProperties   FooterButtons\n    }\n</code></pre> <p>void AddMenuFooterOption( var menu, int input, string gamepadLabel, string mouseLabel = \"\", void functionref( var ) activateFunc = null, bool functionref() conditionCheckFunc = null, void functionref( InputDef ) updateFunc = null )</p> <p>Adds a footer to a menu.</p> <p>void AddPanelFooterOption( var panel, int input, string gamepadLabel, string mouseLabel = \"\", void functionref( var ) activateFunc = null, bool functionref() conditionCheckFunc = null, void functionref( InputDef ) updateFunc = null )</p> <p>Adds a footer to a panel</p> <p>void UpdateFooterOptions()</p> <p>Update the footers of the active menu.</p> <p>void SetFooterText( var menu, int index, string text )</p> <p>Change the text of a specific footer.</p>"},{"location":"Modding/reference/respawn/hud_script/","title":"HUD elements in Scripts","text":"<p>Script methods to manipulate hud elements.</p>"},{"location":"Modding/reference/respawn/hud_script/#element-tree-locating-elements","title":"Element Tree &amp; Locating Elements","text":"<p>string Hud_GetHudName( var menu )</p> <p>var GetParentMenu( var elem )</p> <p>Returns a reference to the menu the passed element is parented to</p> <p>var Hud_GetParent( var elem )</p> <p>Returns the next higher parent of the element</p> <p>bool Hud_HasChild( var elem, string childName )</p> <p>Returns <code>true</code> if the element has a child named like <code>childName</code></p> <p>var Hud_GetChild( var elem, string childName )</p> <p>Returns the child element of the passed element named like <code>childName</code></p> <p>array GetElementsByClassname( var elem, string className ) <p>Returns all children that have the given class</p> <p>var GetElem( var menu, string elementName )</p> <p>var Hud_GetScriptID( var elem )</p> <p>Returns the script ID of the element declared in the .menu file</p> <p>var GetFocus()</p> <p>Returns the currently focused element.</p>"},{"location":"Modding/reference/respawn/hud_script/#element-position","title":"Element Position","text":"<p>void Hud_SetPos( var elem, int x, int y )</p> <p>Set the position of the element relative to the base position.</p> <p>var Hud_GetPos( var elem )</p> <p>Returns an array of type <code>int[2]</code> as a <code>var</code>. The position is relative to the element's base position.</p> <p>void Hud_SetX( var elem, int x )</p> <p>Only change the x position relative to the base position.</p> <p>void Hud_SetY( var elem, int y )</p> <p>Only change the y position relative to the base position.</p> <p>int Hud_GetX( var elem )</p> <p>Returns the x position of the element relative to it's base position.</p> <p>int Hud_GetY( var elem )</p> <p>Returns the y position of the element relative to it's base position.</p> <p>void Hud_ReturnToBasePos( var elem )</p> <p>Set the position of this element to it's base position.</p> <p>var Hud_GetBasePos( var elem )</p> <p>Returns an orray of type <code>int[2]</code> as a <code>var</code>. Base position is always <code>[0,0]</code></p> <p>int Hud_GetBaseX( var elem )</p> <p>Returns the base x of this element.</p> <p>var Hud_GetBaseY( var elem )</p> <p>Returns the base y of this element.</p> <p>var Hud_GetAbsPos( var elem )</p> <p>Returns an array of type <code>int[2]</code> as a <code>var</code>. Absolute coordinates on the screen of this element.</p> <p>int Hud_GetAbsX( var elem )</p> <p>Returns the absolute x position on the screen of this element.</p> <p>int Hud_GetAbsY( var elem )</p> <p>Returns the absolute y position of the screen of this element.</p> <p>!!! cpp-function \"void Hud_SetXOverTime( var elem, int x, float transitionTime, int interpolation_mode \"= 0 )</p> <pre><code>Move to relative x over time with interpolation.\n\n* `INTERPOLATOR_LINEAR`: linear interpolation\n\n* `INTERPOLATOR_ACCEL`: move with accelerating speed\n\n* `INTERPOLATOR_DEACCEL`: move with deaccelerating speed\n\n* `INTERPOLATOR_PULSE`: one time bounce\n\n* `INTERPOLATOR_FLICKER`: no transition\n\n* `INTERPOLATOR_SIMPLESPLINE`: ease in / out\n\n* `INTERPOLATOR_BOUNCE`: gravitational bounce\n</code></pre> <p>!!! cpp-function \"void Hud_SetYOverTime( var elem, int y, float transitionTime, int interpolation_mode \"= 0 )</p> <pre><code>Move to relative y over time with interpolation\n</code></pre> <p>!!! cpp-function \"void Hud_MoveOverTime( var elem, int x, int y, float transitionTime, int \"interpolation_mode = 0 )</p> <p>float Hud_GetRotation( var elem )</p> <p>Returns the angles of the element</p> <p>void Hud_SetRotation( var elem, float angles )</p> <p>Set the angles of the element</p>"},{"location":"Modding/reference/respawn/hud_script/#visibility-color","title":"Visibility &amp; Color","text":"<p>void Hud_Show( var elem )</p> <p>Make this element visible</p> <p>void Hud_Hide( var elem )</p> <p>Make this element invisible</p> <p>bool Hud_IsVisible( var elem )</p> <p>Returns <code>true</code> if the element is visible</p> <p>void Hud_SetVisible( var elem, bool visible )</p> <p>Set if the element is visible</p> <p>void Hud_SetColor( var elem, int r, int g, int b, int alpha )</p> <p>Set the color of the element</p> <p>!!! cpp-function \"void Hud_ColorOverTime( var elem, int r, int g, int b, int alpha, float time, int \"accel )</p> <pre><code>Change the color of the element over time\n</code></pre> <p>!!! cpp-function \"void Hud_ColorOverTimeDelayed( var elem, int r, int g, int b, int alpha, float \"time, ,float delay, int accel )</p> <pre><code>Change the color of the element over time\n</code></pre> <p>void Hud_SetAlpha( var elem, int alpha )</p> <p>Change the opacity of the element</p> <p>var Hud_GetBaseColor( var elem )</p> <p>var Hud_GetBaseAlpha( var elem )</p> <p>void Hud_SetPanelAlpha( var elem )</p> <p>void Hud_FadeOverTime( var elem, int fadeTarget, float fadeTime )</p> <p>Change the opacity of the element over time</p> <p>void Hud_FadeOverTimeDelayed( var elem, int target, float delay, float accel )</p> <p>Change the opacity of the element over time after a delay</p>"},{"location":"Modding/reference/respawn/hud_script/#element-dimensions","title":"Element Dimensions","text":"<p>int Hud_GetWidth( var elem )</p> <p>Returns the current width of the element.</p> <p>void Hud_SetWidth( var elem, int width )</p> <p>Set the width of an element.</p> <p>int Hud_GetBaseWidth( var elem )</p> <p>Returns the width an element got initialized with.</p> <p>int Hud_GetHeigth( var elem )</p> <p>Returns the current height of an element.</p> <p>void Hud_SetHeigth( var elem, int height )</p> <p>Set the heigth of an element.</p> <p>int Hud_GetBaseHeigth( var elem )</p> <p>Returns the heigth an element got initialized with.</p> <p>var Hud_GetSize( var elem )</p> <p>Returns an array of type <code>int[2]</code> as a <code>var</code>. The first index is width and the second height of the element.</p> <p>void Hud_SetSize( var elem, int x, int y )</p> <p>Set width and height of the element.</p> <p>var Hud_GetBaseSize( var elem )</p> <p>Returns the width and height values the element got initialized with as an array of type <code>int[2]</code> as <code>var</code>.</p> <p>!!! cpp-function \"void Hud_ScaleOverTime( var elem, float width_factor, float height_factor, float \"time, int interpolation_mode )</p> <pre><code>Set the width and height of the element over time.\n\nThe final width and height is calculated like this: `width * width_factor`\n</code></pre> <p>void Hud_SetScaleX( var elem, float xStretch )</p> <p>Set the width of the element calculated with a factor.</p> <p>void Hud_SetScaleY( var elem, float yStretch )</p> <p>Set the height of the element calculated with a factor.</p> <p>void Hud_ReturnToBaseSize( var elem )</p> <p>Return to base width and height</p>"},{"location":"Modding/reference/respawn/hud_script/#text","title":"Text","text":"<p>void Hud_SetText( var elem, string text )</p> <p>Set the text content of this element</p> <p>string Hud_GetText( var elem )</p> <p>Returns the current text of the element. Useful for text inputs</p> <p>void RHud_SetText( var elem, string text )</p> <p>Set the text of an rui, if the element contains an rui that takes string input.</p> <p>void Hud_SetUTF8Text( var elem, string text )</p> <p>string Hud_GetUTF8Text( var elem )</p>"},{"location":"Modding/reference/respawn/hud_script/#element-status","title":"Element Status","text":"<p>bool Hud_IsLocked( var elem )</p> <p>Returns <code>true</code> if the element is locked.</p> <p>Locked elements are visible, can be focused and selected but don't trigger events and play a locked sound if they are selected</p> <p>void Hud_SetLocked( var elem, bool locked )</p> <p>Set this element locked status</p> <p>bool Hud_IsEnabled( var elem )</p> <p>Returns <code>true</code> if the element is enabled</p> <p>Disabled elements are visible but can't be focused or selected and don't trigger events.</p> <p>void Hud_SetEnabled( var elem, bool enabled )</p> <p>Set this element to be enabled / disabled</p> <p>bool Hud_IsFocused( var elem )</p> <p>Returns <code>true</code> if this element is focused</p> <p>Focused elements will be selected when pressing enter</p> <p>void Hud_SetFocused( var elem )</p> <p>Set the element to be focused</p> <p>bool Hud_IsSelected( var elem )</p> <p>Returns <code>true</code> if this element is selected</p> <p>void Hud_SetSelected( var elem, bool selected )</p> <p>Set this element to be selected / not unselected</p> <p>void Hud_SelectAll( var elem )</p> <p>Select this element and all children</p> <p>bool Hud_IsLabel( var elem )</p> <p>Returns <code>true</code> if the element is a label</p>"},{"location":"Modding/reference/respawn/hud_script/#element-rui","title":"Element RUI","text":"<p>bool Hud_IsRuiPanel( var elem )</p> <p>Returns <code>true</code> if this element can contain ruis</p> <p>var Hud_GetRui( var elem )</p> <p>Returns the rui instance of this element.</p>"},{"location":"Modding/reference/respawn/hud_script/#navigation","title":"Navigation","text":"<p>void Hud_SetNavUp( var elem, var navTo )</p> <p>Set the element that will be selected when navigating up (arrow up) from this selected element.</p> <p>void Hud_SetNavDown( var elem, var navTo )</p> <p>Set the element that will be selected when navigating up (arrow up) from this selected element.</p> <p>void Hud_SetNavLeft( var elem, var navTo )</p> <p>Set the element that will be selected when navigating left (arrow left) from this selected element.</p> <p>void Hud_SetNavRight( var elem, var navTo )</p> <p>Set the element that will be selected when navigating right (arrow right) from this selected element.</p>"},{"location":"Modding/reference/respawn/hud_script/#events","title":"Events","text":"<p>void Hud_HandleEvent( var elem, int event )</p> <p>Fire the specified event for the element</p> <p>var Hud_AddEventHandler( var elem, int event, var functionref( var button ) )</p> <p>Handle an event for the element</p> <p>Accepted events:</p> <ul> <li> <p><code>UIE_CLICK</code></p> </li> <li> <p><code>UIE_GET_FOCUS</code></p> </li> <li> <p><code>UIE_LOSE_FOCUS</code></p> </li> <li> <p><code>UIE_CHANGE</code></p> </li> </ul>"},{"location":"Modding/reference/respawn/hud_script/#other-visuals","title":"Other Visuals","text":"<p>void Hud_SetNew( var elem, bool isNew )</p> <p>void Hud_SetImage( var elem, asset image )</p> <p>Set the image displayed by the element, if the elements controlName allows for it.</p> <p>void Hud_EnableKeyBindingIcons( var elem )</p> <p>void Hud_RunAnimationScript( var elem, string animation )</p>"},{"location":"Modding/reference/respawn/hud_script/#slider","title":"Slider","text":"<p>void Hud_SliderControl_SetStepSize( var elem, float size )</p> <p>void Hud_SliderControl_SetMin( var elem, float min )</p> <p>void Hud_SliderControl_SetMax( var elem, float max )</p> <p>float Hud_SliderControl_GetCurrentValue( var elem )</p>"},{"location":"Modding/reference/respawn/hud_script/#graphs","title":"Graphs","text":"<p>void Hud_SetBarProgress( var elem, float progress )</p>"},{"location":"Modding/reference/respawn/hud_script/#client-settings","title":"Client Settings","text":"<p>void Hud_SetGamemodeIdx( var elem, int index )</p> <p>void Hud_SetPlaylistVarName( var elem, string playlist )</p>"},{"location":"Modding/reference/respawn/hud_script/#uncategorized","title":"Uncategorized","text":"<p>void Hud_DialogList_AddListItem( var elem, string val, string enum_ )</p> <p>string Hud_GetListPanelSelectedItem( var elem )</p>"},{"location":"Modding/reference/respawn/movers/","title":"Movers","text":"<p>Movers are entites that move and rotate smoothly. <code>script_mover</code> allows for smooth movement and rotation contrary to <code>script_mover_lightweight</code> which is not able to rotate.</p>"},{"location":"Modding/reference/respawn/movers/#create-a-mover","title":"Create a Mover","text":"<p>entity CreateExpensiveScriptMover( vector origin , vector angles )</p> <p>returns <code>script_mover</code></p> <p>entity CreateExpensiveScriptMoverModel( asset model, vector origin, vector angles, int solidType, float fadeDist )</p> <p>returns <code>script_mover</code> which has a model</p> <p>entity CreateScriptMover( vector origin, vector angles )</p> <p>returns <code>script_mover_lightweight</code></p> <p>entity CreateScriptMoverModel( asset model, vector origin, vector angles, int solidType, float fadeDist )</p> <p>returns <code>script_mover_lightweight</code> which has a model</p> <p>entity CreateOwnedScriptMover( entity owner )</p> <p>returns <code>script_mover</code> which will be at the location of the owner</p>"},{"location":"Modding/reference/respawn/movers/#moving","title":"Moving","text":"<p>void NonPhysicsMoveTo( vector position, float time, float easeIn, float easeOut )</p> <p>void NonPhysicsMoveInWorldSpaceToLocalPos( vector localPos, float time, float easeIn, float easeOut )</p> <p>void NonPhysicsMoveWithGravity( vector velocityForOthers, vector fakeGravity )</p> <p>void NonPhysicsRotateTo( vector angles, float time, float easeIn, float easeOut )</p> <p>Only usable by expensive movers</p> <p>void NonPhysicsRotate( vector angles, float speed )</p> <p>Only usable by expensive movers</p> <p>void NonPhysicsStop()</p> <p>Immediately stop this mover from moving</p>"},{"location":"Modding/reference/respawn/movers/#behaviour","title":"Behaviour","text":"<p>void ChangeNPCPathsOnMove( bool recalculate )</p> <p>void SetPusher( bool isPusher )</p> <p>Pushers move everything that stands on top of them or next to them and can also kill entities by crushing them.</p> <p>void NonPhysicsSetRotateModeLocal( bool useLocal )</p> <p>void PhysicsDummyEnableMotion( bool enabled )</p>"},{"location":"Modding/reference/respawn/movers/#examples","title":"Examples","text":"<pre><code>    entity mover = CreateScriptMover( &lt;0,0,0&gt; ) \n\n    // moving the mover to &lt;0,0,10&gt; in 1 second\n    mover.NonPhysicsMoveTo( &lt;0,0,10&gt;, 1, 0, 0 )\n\n    // wating so the mover gets to the destination\n    wait 1\n\n    // sending it back\n    mover.NonPhysicsMoveTo( &lt;0,0,0&gt;, 1, 0, 0 )\n\n    // then stoping the mover in 0.5 seconds\n    wait 0.5\n    mover.NonPhysicsStop()\n</code></pre> <pre><code>    // creating a elevator \n    // using a mover with a model\n    entity mover = CreateScriptMoverModel( $\"models/props/turret_base/turret_base.mdl\", &lt; -40.5605, -1827.87, -223.944 &gt;, &lt;0,0,0&gt;, SOLID_VPHYSICS, 1000 )\n    mover.SetPusher( true ) // making it into a pusher\n\n    // for loop to move the elevator up and down\n    for(;;)\n    {\n        mover.NonPhysicsMoveTo( &lt; -35.4312, -1827.87, 523.046 &gt;, 4.8, 0.1, 0.1 )\n        wait 6\n\n        mover.NonPhysicsMoveTo( &lt; -35.4312, -1827.87, -223.944 &gt;, 4.8, 0.1, 0.1 )\n        wait 6\n    }\n</code></pre> <pre><code>    // Phase shifting the player to a destination\n    // setting a position\n    vector destination = &lt;250,1000,100&gt;\n    // checking if the player is valid\n    if ( IsValid( player ) )\n    {\n        // creating the mover\n        entity mover = CreateOwnedScriptMover( player )\n        player.SetParent( mover ) // parenting the player ( so they move with the mover )\n        mover.NonPhysicsMoveTo( destination, 0.5, 0, 0 ) // saying to the moveer to move\n        vector angles = player.GetAngles() // angles saved\n        PhaseShift( player, 0.1, 1 ) // phase shifitng the player\n        player.SetAngles( angles ) // setting the player to the original angles\n    }\n    wait 0.6 // wating so the mover moves\n\n    if ( IsValid( player ) )\n    {\n        player.ClearParent() // removing the player from the mover\n    }\n</code></pre>"},{"location":"Modding/reference/respawn/rui/","title":"Rui","text":"<p>Functions for creating a rui, and methods of the rui object</p> <pre><code>            // To create one, do:\n            rui = RuiCreate( $\"ui/assetname.rpak\", topology, drawGroup, sortKey ) // sortkey = int to prevent z-fighting. higher -&gt; in front\n\n            // You can then manipulate it using the following:\n            RuiSetDrawGroup( rui, drawGroup )\n            RuiSetString( rui, argName, value )\n            RuiSetBool( rui, argName, value )\n            RuiSetInt( rui, argName, value )\n            RuiSetFloat( rui, argName, value )\n            RuiSetFloat2( rui, argName, value )  // value is a vector; only x and y are used\n            RuiSetFloat3( rui, argName, value )\n            RuiSetColorAlpha( rui, argName, color, alpha )  // color is a vector\n\n            // To destroy it, just do:\n            RuiDestroy( rui )\n</code></pre> <p>Drawgroups</p> <pre><code>        RUI_DRAW_WORLD\n        RUI_DRAW_HUD\n        RUI_DRAW_COCKPIT\n        RUI_DRAW_NONE\n</code></pre> <p>Trackers</p> <pre><code>        // VECTOR TYPES\n        RUI_TRACK_ABSORIGIN_FOLLOW                   // Create at absorigin, and update to follow the entity\n        RUI_TRACK_POINT_FOLLOW                       // Create on attachment point, and update to follow the entity\n        RUI_TRACK_OVERHEAD_FOLLOW                    // Create at the top of the entity's bbox\n        RUI_TRACK_EYEANGLES_FOLLOW\n\n        // FLOAT TYPES\n        RUI_TRACK_HEALTH                   // Health as fraction from 0 to 1\n        RUI_TRACK_FRIENDLINESS                   // 0 if ent is enemy, 1 if it's friendly\n        RUI_TRACK_PLAYER_SUIT_POWER                   // Player's suit power from 0 to 1\n        RUI_TRACK_PLAYER_GRAPPLE_POWER                   // Player's grapple power from 0 to 1\n        RUI_TRACK_PLAYER_SHARED_ENERGY                   // Players shared energy value\n        RUI_TRACK_WEAPON_CHARGE_FRACTION                   // Weapon charge as fraction from 0 to 1\n        RUI_TRACK_WEAPON_SMART_AMMO_LOCK_FRACTION                   // Smart ammo weapon lock fraction from 0 to N\n        RUI_TRACK_WEAPON_READY_TO_FIRE_FRACTION                   // Weapon cooldown as fraction from 0 to 1\n        RUI_TRACK_WEAPON_RELOAD_FRACTION                   // Weapon reloading as fraction from 0 to 1\n        RUI_TRACK_WEAPON_DRYFIRE_FRACTION                   \n        RUI_TRACK_WEAPON_CLIP_AMMO_FRACTION                   // Weapon clip ammo as fraction from 0 to 1\n        RUI_TRACK_WEAPON_REMAINING_AMMO_FRACTION                   // Weapon remaining ammo as fraction from 0 to 1\n        RUI_TRACK_WEAPON_CLIP_AMMO_MAX                   \n        RUI_TRACK_WEAPON_STOCKPILE_AMMO_MAX                   \n        RUI_TRACK_WEAPON_LIFETIME_SHOTS                   \n        RUI_TRACK_WEAPON_AMMO_REGEN_RATE                   \n        RUI_TRACK_BOOST_METER_FRACTION                   // Player boost meter as fraction from 0 to 1\n        RUI_TRACK_GLIDE_METER_FRACTION                   // Player glide meter as fraction from 0 to 1\n        RUI_TRACK_SHIELD_FRACTION                   // Shield health as fraction from 0 to 1\n        RUI_TRACK_STATUS_EFFECT_SEVERITY                   // Status effect severity as fraction from 0 to 1; attachmentIndex used as status effect index\n        RUI_TRACK_SCRIPT_NETWORK_VAR                   // Value of a script network variable (use GetNetworkedVariableIndex())\n        RUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL                   // Value of a script network variable without an entity (use GetNetworkedVariableIndex())\n        RUI_TRACK_SCRIPT_NETWORK_VAR_LOCAL_VIEW_PLAYER                   // Value of a script network variable on the local view player (changes automatically during kill replay) (use GetNetworkedVariableIndex())\n        RUI_TRACK_FRIENDLY_TEAM_SCORE                   \n        RUI_TRACK_FRIENDLY_TEAM_ROUND_SCORE                   // The value of score2 for friendlies\n        RUI_TRACK_ENEMY_TEAM_SCORE                   \n        RUI_TRACK_ENEMY_TEAM_ROUND_SCORE                   // The value of score2 for enemies\n        RUI_TRACK_MINIMAP_SCALE                   \n        RUI_TRACK_SOUND_METER                   // Sound meter as fraction from 0 to 1.\n\n        // INT TYPES\n        RUI_TRACK_MINIMAP_FLAGS,\n        RUI_TRACK_MINIMAP_CUSTOM_STATE,\n        RUI_TRACK_TEAM_RELATION_VIEWPLAYER,                   // ENEMY: -1, NEUTRAL: 0, FRIENDLY: 1\n        RUI_TRACK_TEAM_RELATION_CLIENTPLAYER,                   // ENEMY: -1, NEUTRAL: 0, FRIENDLY: 1\n        RUI_TRACK_SCRIPT_NETWORK_VAR_INT,                   // Value of a script network variable (use GetNetworkedVariableIndex())\n        RUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL_INT,                   // Value of a script network variable without an entity (use GetNetworkedVariableIndex())\n        RUI_TRACK_SCRIPT_NETWORK_VAR_LOCAL_VIEW_PLAYER_INT,                   // Value of a script network variable on the local view player (changes automatically during kill replay) (use GetNetworkedVariableIndex())\n\n        // GAMETIME TYPES\n        RUI_TRACK_LAST_FIRED_TIME,\n        RUI_TRACK_MINIMAP_THREAT_SECTOR,\n\n        // IMAGE TYPES\n        RUI_TRACK_WEAPON_MENU_ICON,\n        RUI_TRACK_WEAPON_HUD_ICON\n</code></pre> <p>rui : public var</p> <p>void RuiSetResolution(rui, screenSizeX, screenSizey)</p> <pre><code>        screenSizeX = GetScreenSize()[0]\n        screenSizeY = GetScreenSize()[1]\n</code></pre> <p>void RuiSetDrawGroup( rui, drawGroup )</p> <p>void RuiSetString( rui, argName, value )</p> <p>void RuiSetBool( rui, argName, value )</p> <p>void RuiSetInt( rui, argName, value )</p> <p>void RuiSetFloat( rui, argName, value )</p> <p>void RuiSetFloat2( rui, argName, value )  </p> <p>value is a vector; only x and y are used</p> <p>void RuiSetFloat3( rui, argName, value )</p> <p>void RuiSetColorAlpha( rui, argName, color, alpha )  </p> <p>color is a vector</p> <p>void RuiDestroyIfAlive( rui )</p>"},{"location":"Modding/reference/respawn/titan/","title":"Titan","text":"<p>Functions for getting titan, and methods of the titan object</p> <pre><code>            entity soul = player.IsTitan() ? player.GetTitanSoul() : player.GetPetTitan().GetTitanSoul() \n            // getting the titan depends on wether the player is in the titan or not\n</code></pre> <p>titan : public entity</p> <p>unknown GetAISettingsName()</p> <p>entity GetOffhandWeapon()</p> <p>float GetTitanSoulNetFloat( string )</p> <p>e.g. \"coreAvailableFrac\"</p> <p>void SetShieldHealth()</p> <p>bool HasSoul()</p> <p>bool IsArcTitan()</p> <p>bool IsDoomed()</p> <p>bool IsPetTitan()</p> <p>bool IsPhaseShifted()</p> <p>bool IsTitanNPC()</p>"},{"location":"Modding/reference/respawn/topology/","title":"Topologies","text":"<p>RUI elements are rendered on topologies.</p> <p>The position of topologies are relative to the position of their parent.</p> <p>Since the number of topologies that can be created is very limited and Vanilla uses most of the slots already, try to minimize your topology uses. Instead of creating new ones, check if you can use one that already exists:</p> <pre><code>            clGlobal.topoFullScreen\n            clGlobal.topoCockpitHudPermanent\n            clGlobal.topoTitanCockpitLowerHud\n            clGlobal.topoTitanCockpitInstrument1 // yes, with a 1\n            clGlobal.topoTitanCockpitHud\n            clGlobal.topoCockpitHud\n</code></pre>"},{"location":"Modding/reference/respawn/topology/#creating-topologies","title":"Creating Topologies","text":"<p>void RuiTopology_CreatePlane( vector origin, vector angles, vector right, vector down, bool doClipping )</p> <p>This creates a simple topology at the specified origin relative to the parent position.</p> <p>The parameters <code>right</code> and <code>down</code> specify the dimensions of the topology relative to the origin. For example, passing <code>&lt;GetScreenSize()[0],0,0&gt;</code> and <code>&lt;0,GetScreenSize()[1],0&gt;</code> will create a topology that covers the entire screen. Note that in this example the origin is the top left corner. The unit used is pixels.</p> <p>void RuiTopology_CreateSphere( vector origin, vector angles, vector right, vector down, COCKPIT_RUI_RADIUS, COCKPIT_RUI_WIDTH, COCKPIT_RUI_HEIGHT, float subDiv  )</p> <p>Similar to <code>RuiTopology_CreatePlane</code> but creates an arched sphere instead of a plane. Unlike in <code>RuiTopology_CreatePlane</code>, right and down are angles and not relative positions. The width and height are instead controlled by their respective parameters.</p> <p>void RuiTopology_Destroy( var topology )</p> <p>This destroys the passed topology. However, ruis that are already drawn on top of it do not get destroyed.</p> <p>void RuiTopology_SetParent( var topology, entity anchor, string attachName = \"\" )</p> <p>Parents the given topology to the anchor entity. The topology moves and rotates relative to the parent.</p> <p>Set the position of the topology to <code>&lt;0,0,0&gt;</code> to render at the parent's position.</p> <p>void RuiTopology_UpdatePos( topo, updateOrg, right, down )</p> <p>Update the position and dimensions of the topology</p> <p>void RuiTopology_ShareWithCode( topology, ruiCode ) </p>"},{"location":"Modding/reference/respawn/topology/#drawcalls","title":"Drawcalls","text":"<p>Drawcalls determine how and where RUIs on a topology are being rendered.</p> <ul> <li><code>RUI_DRAW_NONE</code>: Don't render rui at all</li> <li><code>RUI_DRAW_HUD</code>: Render rui on screen. Uses screen coordinates in pixels.</li> <li><code>RUI_DRAW_WORLD</code>: Render rui in worldspace on a two dimensional surface facing the direction of the topology.</li> <li><code>RUI_DRAW_COCKPIT</code>: Similiar to <code>RUI_DRAW_HUD</code> but follows the cockpit headbob movement.</li> </ul> <p>Drawcalls are not set for a topology but for each rui individually</p>"},{"location":"Modding/reference/respawn/topology/#hud-topology-example","title":"HUD Topology example","text":"<pre><code>    // Cover the top left quadrant of the screen with a basic image\n    float[2] s = GetScreenSize()\n    var topo = RuiTopology_CreatePlane( &lt;0,0,0&gt;, &lt;s[0] / 2,0,0&gt;, &lt;0,s[1] / 2,0&gt;, true ) // RUIs scale with the topology they are being drawn on so make sure to use the correct dimensions\n    RuiCreate( $\"ui/basic_image.rpak\", topo, RUI_DRAW_HUD, 0 )\n</code></pre>"},{"location":"Modding/reference/respawn/topology/#worldspace-topology-example","title":"Worldspace Topology example","text":"<pre><code>    // REMEMBER TO DESTROY ALL TOPOS, RUIS AND PROPS YOU CREATE WHEN YOU NO LONGER NEED THEM\n    // ripped from respawn\n    var function Worldspace_CreateRUITopology( vector org, vector ang, float width, float height )\n    {\n        // adjust so the RUI is drawn with the org as its center point\n        org += ( (AnglesToRight( ang )*-1) * (width*0.5) )\n        org += ( AnglesToUp( ang ) * (height*0.5) )\n\n        // right and down vectors that get added to base org to create the display size\n        vector right = ( AnglesToRight( ang ) * width )\n        vector down = ( (AnglesToUp( ang )*-1) * height )\n\n        return RuiTopology_CreatePlane( org, right, down, true )\n    }\n\n    void function WorldSpaceTopoTest()\n    {\n        // To rotate a topology without manually calculating and updating position and dimensions you can parent the topology to  a client side prop\n        entity player = GetLocalClientPlayer()\n        entity weapon = player.GetActiveWeapon()\n\n        vector fwd = AnglesToForward( weapon.GetAngles() )\n        vector right = AnglesToRight( weapon.GetAngles() )\n        vector up = AnglesToUp( weapon.GetAngles() )\n        vector conf = &lt; 20, -40, 30 &gt; // float next to the player's weapon\n\n        int attachIndex = weapon.LookupAttachment( \"muzzle_flash\" )\n        entity anchor = CreateClientSidePropDynamic( weapon.GetAttachmentOrigin( attachIndex ) + fwd * conf.x + right * conf.y + up * conf.z, &lt;0,0,0&gt;, $\"models/dev/empty_model.mdl\") // props need a model but this one is invisible so we don't need to set visibility manually\n        var topo = Worldspace_CreateRUITopology( &lt;0,0,0&gt;, &lt;0,90,0&gt;, 128, 64 ) // origin &lt;0,0,0&gt; so the topo sits at the origin of the prop\n\n        var tm_box = RuiCreate( $\"ui/helmet_scanning_percentbar.rpak\", topo, RUI_DRAW_WORLD, 0 )\n        RuiSetString( tm_box, \"stage3TextTop\", \"Top\" )\n        RuiSetString( tm_box, \"stage3TextBottom\", \"Bottom\" )\n\n        anchor.SetParent( weapon )\n        RuiTopology_SetParent( topo, anchor )\n    }\n</code></pre>"},{"location":"Modding/reference/respawn/native_server/","title":"Native Server Functions","text":""},{"location":"Modding/reference/respawn/native_server/codecallback/","title":"Code Callbacks","text":"<p>Warning</p> <p>Not all of these are fully implemented, either check the asset dump or try it out.</p> <p>void CodeCallback_PlayerDecoyDie( entity, int )</p> <p>void CodeCallback_PlayerDecoyDissolve( entity, int )</p> <p>void CodeCallback_PlayerDecoyRemove( entity, int )</p> <p>void CodeCallback_PlayerDecoyStateChange( entity, int, int )</p> <p>void CodeCallback_ScriptedDialogue( entity guy, int dialogueID )</p> <p>void CodeCallback_LeechStart( entity player, entity target )</p> <p>var CodeCallback_ClientCommand( entity player, array&lt; string &gt; args )</p> <p>void CodeCallback_DamagePlayerOrNPC( entity ent, var damageInfo )</p> <p>void CodeCallback_DamageEntity( entity ent, var damageInfo )</p> <p>void CodeCallback_OnEntityDestroyed( entity ent )</p> <p>void CodeCallback_PreSpawn( entity ent )</p> <p>void CodeCallback_OnSpawned( entity ent )</p> <p>void CodeCallback_OnPlayerKilled( entity player, var damageInfo )</p> <p>void CodeCallback_OnNPCKilled( entity npc, var damageInfo )</p> <p>void CodeCallback_OnEntityKilled( entity npc, var damageInfo )</p> <p>void CodeCallback_OnEntityChangedTeam( entity ent )</p> <p>void CodeCallback_NPCMeleeChargedPlayerOrNPC( entity ent, var damageInfo )</p> <p>int CodeCallback_GetWeaponDamageSourceId( entity weapon )</p> <p>void CodeCallback_WeaponFireInCloak( entity player )</p> <p>void CodeCallback_OnServerAnimEvent( entity ent, string name )</p> <p>void CodeCallback_OnNPCLookAtHint( entity npc, entity hint )</p> <p>bool CodeCallback_OnTouchHealthKit( entity player, entity ent )</p> <p>void CodeCallback_OnInventoryChanged( entity player )</p> <p>void CodeCallback_OnMeleeKilled( entity target )</p> <p>void CodeCallback_StartRodeo( entity player, entity rodeoTarget) </p> <p>void CodeCallback_ForceEndRodeo( entity player )</p> <p>void CodeCallback_EmbarkTitan( entity player, entity titan) </p> <p>bool CodeCallback_EmbarkTitanFromGrapple( entity player, entity titan )</p> <p>void CodeCallback_OnWeaponAttack( entity player, entity weapon, string weaponName, int ammoUsed )</p> <p>Warning</p> <p>This code callback does not work</p> <p>void CodeCallback_OnPrecache()</p> <p>void CodeCallback_OnVehiclePass( table params )</p> <p>bool CodeCallback_ForceAIMissPlayer( entity npc, entity player )</p> <p>void CodeCallback_GamerulesThink()</p> <p>void CodeCallback_OnPlayerRespawned( entity player )</p> <p>void CodeCallback_OnClientConnectionStarted( entity player )</p> <p>void CodeCallback_OnClientConnectionCompleted( entity player )</p> <p>void CodeCallback_OnClientDisconnected( entity player, string reason )</p> <p>void CodeCallback_PlayerHasBeenConnectedForDuration( entity player, float durationInSeconds )</p> <p>void CodeCallback_OnClientSendingPersistenceToNewServer( entity player )</p> <p>void CodeCallback_MatchIsOver()</p> <p>void CodeCallback_OnPlayerMatchmakingChanged( entity player )</p> <p>void CodeCallback_OnPlayerJump( entity player )</p> <p>void CodeCallback_OnPlayerDoubleJump( entity player ) </p> <p>void CodeCallback_OnPlayerDodge( entity player )</p> <p>void CodeCallback_OnPlayerLeaveGround( entity player )</p> <p>void CodeCallback_OnPlayerTouchGround( entity player )</p> <p>void CodeCallback_OnPlayerMantle( entity player )</p> <p>void CodeCallback_OnPlayerBeginWallrun( entity player )</p> <p>void CodeCallback_OnPlayerEndWallrun( entity player )</p> <p>void CodeCallback_OnPlayerBeginWallhang( entity player )</p> <p>void CodeCallback_OnPlayerEndWallhang( entity player )</p> <p>void CodeCallback_OnPlayerInputCommandChanged( entity player, int cmdsHeld, int cmdsPressed, int cmdsReleased )</p> <p>void CodeCallback_OnPlayerInputAxisChanged( entity player, float horizAxis, float vertAxis )</p> <p>void CodeCallback_OnPlayerGrappled( entity attacker, entity victimPlayer )</p> <p>void CodeCallback_OnProjectileGrappled( entity attacker, entity projectile )</p> <p>void CodeCallback_OnLoadSaveGame()</p> <p>void CodeCallback_OnClientReloadConnectionCompleted( entity player )</p> <p>bool CodeCallback_OnSavedSaveGame()</p> <p>bool CodeCallback_IsSaveGameSafeToCommit()</p> <p>void CodeCallback_OnTetherRemove( entity player, int tetherID )</p> <p>void CodeCallback_OnTetherDamageMilestone( entity player, int tetherID, int damageMileStoneIndex, float health )</p> <p>void CodeCallback_ClaimClientSidePickup_MatchCandy( entity player, int amount, int flags, int recieptID )</p> <p>void CodeCallback_WeaponDropped( entity weapon )</p> <p>void CodeCallback_OnWeaponReload( entity weapon )</p> <p>void CodeCallback_GivePersistentItem( entity player, string itemName, int count )</p> <p>void CodeCallback_OnWeaponTouch( entity player, entity weapon, int ammoRecieved ) </p> <p>bool CodeCallback_CanUseEntity( entity player, entity ent )</p> <p>bool CodeCallback_OnUseEntity( entity player, entity ent )</p> <p>void CodeCallback_OnUsePressed( entity player )</p> <p>void CodeCallback_OnUseReleased( entity player )</p> <p>bool CodeCallback_IsLeechable( entity player, entity target )</p> <p>void CodeCallback_Ping( entity player )</p> <p>void CodeCallback_OnMeleePressed( entity player )</p> <p>void CodeCallback_OnMeleeReleased( entity player )</p> <p>void CodeCallback_OnMeleeAttackAnimEvent( entity player )</p> <p>void CodeCallback_AnimationDone( entity ent )</p> <p>void CodeCallback_AnimationInterrupted( entity ent )</p> <p>void CodeCallback_PlayerClassChanged( entity ent )</p> <p>bool CodeCallback_CanUseZipline(entity player, entity zipline, vector ziplineClosestPoint )</p> <p>void CodeCallback_ZiplineMount( entity player, entity zipline )</p> <p>void CodeCallback_ZiplineStart( entity player, entity zipline )</p> <p>void CodeCallback_ZiplineMove( entity player, entity zipline )</p> <p>void CodeCallback_ZiplineStop( entity player )</p> <p>bool CodeCallback_IsValidRodeoTarget( entity player, entity rodeoTarget )</p> <p>var CodeCallback_OnRodeoAttach( entity rider, entity rodeoTarget )</p> <p>void CodeCallback_TitanRiderEntVarChanged( entity soul, int rodeoSlotIndex, entity oldRider, entity newRider )</p> <p>bool CodeCallback_OnVortexHitBullet( entity weapon, entity vortexSphere, var damageInfo )</p> <p>bool CodeCallback_OnVortexHitProjectile( entity weapon, entity vortexSphere, entity attacker, entity projectile, vector contactPos )</p> <p>void CodeCallback_OnTurretCancelPressed( entity player )</p> <p>void CodeCallback_ForceScriptError( entity ent, string errorMsg )</p> <p>void CodeCallback_EnterPhaseShift( entity ent )</p> <p>void CodeCallback_ExitPhaseShift( entity ent )</p> <p>string CodeCallback_CheckPassThroughAddsMods( entity player, entity hitEnt, string currWeaponName )</p> <p>bool CodeCallback_IsValidMeleeExecutionTarget( entity attacker, entity target )</p> <p>bool CodeCallback_IsValidMeleeAttackTarget( entity attacker, entity target )</p> <p>void CodeCallback_OnGrapple( entity attacker, entity target, vector hitpos, vector hitNormal )</p>"},{"location":"Modding/reference/respawn/native_server/collision/","title":"Collision &amp; Tracing","text":"<p>bool AABBIntersectsAABB( vector a1, vector a2, vector a3, vector b1, vector b2, vector b3, number c1 )</p> <p>bool OBBIntersectsOBB( vector a1, vector a2, vector a3, vector a4, vector b1, vector b2, vector b3, vector b4, number c1 )</p> <p>bool TraceLOSMultiple( array startsArray, array endsArray, entity ignoreEntity, int mask, int group )</p> <p>Do muliple LOS checks, early out if any return true. Runs on multiple threads.</p> <p><code>mask</code>: <code>TRACE_MASK_*</code></p> <p><code>group</code>: <code>TRACE_COLLISION_GROUP_*</code></p> <p>TraceResults TraceLine( vector startPos, vector endPos, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0 )</p> <p>Does a trace and returns struct of result values.</p> <p>TraceResults TraceLineHighDetail( vector startPos, vector endPos, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0 )</p> <p>Does a high-detail (per poly on static models) trace and returns struct of result values.</p> <p>TraceResults TraceHull( vector startPos, vector endPos, vector hullMins, vector hullMaxs, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0 )</p> <p>Does a hull trace and returns table of result values.</p> <p>TraceResults TraceLineNoEnts( vector startPos, vector endPos, int traceMask = 0 )</p> <p>Does a trace and returns table of result values.</p> <p>float TraceLineSimple( vector startPos, vector endPos, entity ignoreEnt )</p> <p>Does a trace and returns the distance from <code>startPos</code> to hit.</p> <p>float TraceHullSimple( vector startPos, vector endPos, vector hullMins, vector hullMaxs, entity ignoreEnt )</p> <p>Does a trace and returns the distance from <code>startPos</code> to hit.</p> <p>void DoTraceCoordCheck( bool check )</p> <p>array TraceGetEntsAlongLine( vector startPos, vector endPos, int traceMask = 0, int collisionGroup = 0 ) <p>Does a trace and returns all ents along a line.</p> <p>bool CheckPassThroughDir( entity ent, vector dir, vector endPos )</p> <p>bool IsPointInFrontofLine( vector point, vector startPos, vector endPos )</p> <p>array FindVisibleEntitiesInCone( vector coneApex, vector coneAxis, float coneHeight, float coneAngleToAxis, array ignoredEntities, int traceMask, int flags, entity antilagPlayer, entity weapon = null ) <p>Returns an array of entities that are inside of a cone and visible to the apex</p> <p>VortexBulletHit ornull VortexBulletHitCheck( entity attacker, vector startPos, vector endPos )</p> <p>Check for vortexSphere collisions between two points.</p>"},{"location":"Modding/reference/respawn/native_server/convars/","title":"ConVars","text":""},{"location":"Modding/reference/respawn/native_server/convars/#getters","title":"Getters","text":"<p>string GetConVarString( string cv )</p> <p>Gets the value of a convar as a string</p> <p>int GetConVarInt( string cv )</p> <p>Gets the value of a convar as an integer</p> <p>float GetConVarFloat( string cv )</p> <p>Gets the value of a convar as a float</p> <p>bool GetConVarBool( string cv )</p> <p>Gets the value of a convar as a boolean</p> <p>bool EverythingUnlockedConVarEnabled()</p>"},{"location":"Modding/reference/respawn/native_server/convars/#setters","title":"Setters","text":"<p>void SetConVarString( string cv, string value )</p> <p>Sets the value of a convar with a string</p> <p>void SetConVarInt( string cv, int value )</p> <p>Sets the value of a convar with an integer</p> <p>void SetConVarFloat( string cv, float value )</p> <p>Sets the value of a convar with a float</p> <p>void SetConVarBool( string cv, bool value )</p> <p>Sets the value of a convar with a boolean</p> <p>void SetConVarToDefault( string cv )</p> <p>Sets the value of a convar to its internal default value</p>"},{"location":"Modding/reference/respawn/native_server/createent/","title":"Create Entites","text":"<p>Created entites do not spawn until they are dispatched with <code>DispatchSpawn</code>. Some script wrappers may dispatch entites themselves.</p> <p>Getting entities is documented here</p>"},{"location":"Modding/reference/respawn/native_server/createent/#internal-factories","title":"Internal Factories","text":"<p>entity CreateProp( string type, vector origin, string s1, number n1 )</p> <p>void DispatchSpawn( entity ent )</p> <p>Tells the specified entity to spawn. Should only be called once per entity.</p> <p>entity Entities_CreateByClassname( string className )</p> <p>entity Entities_CreateProjectileByClassname( string entName, string weaponClassName )</p> <p>entity Entities_CreateByTemplate( string template )</p> <p>array Entities_CreateByTemplateMultiple( string template )</p> <p>Create zero or more entities from templates that match the given string, and return them as an array. Wildcards allowed.</p> <p>All array contents are entites but the array is not typed itself.</p> <p>array Entities_CreateByPointTemplates( string matchingString , vector origin, vector angles )</p> <p>Create zero or more entities from point-templates that match the given string, and return them as an array. Wildcards allowed</p> <p>entity CreateWeaponEntityByName( string weaponName, vector origin, vector angles )</p> <p>entity CreateWeaponEntityByNameConstrained( string name, vector origin, vector angles )</p> <p>entity CreateWeaponEntityByNameWithPhysics( string name, vector origin, vector angles )</p>"},{"location":"Modding/reference/respawn/native_server/createent/#interactable-props","title":"Interactable Props","text":"<p>entity CreateTurretEnt( vector origin, vector angles, entity ownerEnt, asset turretModel, string turretSettingsName )</p> <p>entity CreateControlPanelEnt( vector origin, vector angles, entity ownerEnt, asset model )</p>"},{"location":"Modding/reference/respawn/native_server/createent/#script-wrappers","title":"Script Wrappers","text":"<p>Note</p> <p>These are defined in <code>ai/_ai_spawn.gnut</code></p>"},{"location":"Modding/reference/respawn/native_server/createent/#titans","title":"Titans","text":"<p>entity CreateArcTitan( int team, vector origin, vector angles, array settingsMods = [] ) <p>entity CreateAtlas( int team, vector origin, vector angles, array settingsMods = [] ) <p>entity CreateHenchTitan( string titanType, vector origin, vector angles )</p> <p>entity CreateNPCTitan( string settings, int team, vector origin, vector angles, array settingsMods = [] ) <p>entity CreateOgre( int team, vector origin, vector angles, array settingsMods = [] )"},{"location":"Modding/reference/respawn/native_server/createent/#drones","title":"Drones","text":"<p>entity CreateFragDrone( int team, vector origin, vector angles )</p> <p>entity CreateFragDroneCan( int team, vector origin, vector angles )</p> <p>Creates an unarmed drone</p> <p>entity CreateGenericDrone( int team, vector origin, vector angles )</p> <p>entity CreateRocketDrone( int team, vector origin, vector angles )</p> <p>entity CreateShieldDrone( int team, vector origin, vector angles )</p>"},{"location":"Modding/reference/respawn/native_server/createent/#common","title":"Common","text":"<p>entity CreateElitePilot( int team, vector origin, vector angles )</p> <p>entity CreateElitePilotAssassin( int team, vector origin, vector angles )</p> <p>entity CreateSoldier( int team, vector origin, vector angles )</p> <p>entity CreateRocketDroneGrunt( int team, vector origin, vector angles )</p> <p>entity CreateShieldDroneGrunt( int team, vector origin, vector angles )</p> <p>entity CreateSpectre( int team, vector origin, vector angles )</p> <p>entity CreateStalker( int team, vector origin, vector angles )</p> <p>entity CreateStryder( int team, vector origin, vector angles, array settingsMods = [] ) <p>entity CreateSuperSpectre( int team, vector origin, vector angles )</p> <p>entity CreateZombieStalker( int team, vector origin, vector angles )</p> <p>entity CreateZombieStalkerMossy( int team, vector origin, vector angles )</p> <p>entity CreateMarvin( int team, vector origin, vector angles )</p> <p>entity CreateWorkerDrone( int team, vector origin, vector angles )</p> <p>entity CreateProwler( int team, vector origin, vector angles )</p> <p>entity CreateGunship( int team, vector origin, vector angles )</p> <p>entity CreateNPC( string baseClass, int team, vector origin, vector angles )</p> <p>entity CreateNPCFromAISettings( string aiSettings, int team, vector origin, vector angles )</p>"},{"location":"Modding/reference/respawn/native_server/damagedef/","title":"DamageDef","text":"<p>int DamageDef_GetCount()</p> <p>string DamageDef_GetName( int id )</p> <p>string DamageDef_GetObituary( int id )</p> <p>bool DamageDef_GetDeathProtection( int id )</p> <p>var Dev_DamageDef_GetSettingByKeyField( int id, string key )</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/","title":"DamageInfo","text":"<p>DamageInfos are variables holding information about damage inflicted on an entity.</p> <p>Because damageInfo instances are implemented as userdata they can't be typed.</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/#getters","title":"Getters","text":"<p>entity DamageInfo_GetAttacker( var damageInfo )</p> <p>Returns the attacker of this damageInfo</p> <p>entity DamageInfo_GetInflictor( var damageInfo )</p> <p>Returns the inflictor of this damageInfo</p> <p>entity DamageInfo_GetWeapon( var damageInfo )</p> <p>Returns the weapon that dealt this damage</p> <p>bool DamageInfo_GetForceKill( var damageInfo )</p> <p>Get if this damage is supposed to kill the victim regardless of health</p> <p>float DamageInfo_GetDamage( var damageInfo )</p> <p>Get the inflicted damage</p> <p>float DamageInfo_GetDamageCriticalHitScale( var damageInfo )</p> <p>vector DamageInfo_GetDamagePosition( var damageInfo )</p> <p>Returns the position where the damage originated.   Usually this is the barrel attachment of the weapon that inflicted the damage.</p> <p>int DamageInfo_GetHitGroup( var damageInfo )</p> <p>int DamageInfo_GetHitBox( var damageInfo )</p> <p>string DamageInfo_GetDeathPackage( var damageInfo )</p> <p>int DamageInfo_GetDamageType( var damageInfo )</p> <p>int DamageInfo_GetCustomDamageType( var damageInfo )</p> <p>int DamageInfo_GetDamageSourceIdentifier( var damageInfo )</p> <p>Returns the <code>eDamageSourceId</code></p> <p><code>damageSourceId</code> is an <code>int</code> that references an <code>enum</code> and can be used to identify what source damage came from. </p> <p><code>damageSourceId</code> is mostly found as an argument in some kill and damage related functions. Respawn has created a function that will attempt to localise the damageSourceId inputed. To add your own custom <code>damageSourceID</code> , see: :doc:<code>../../northstar/customdamagesources</code></p> <p>Other useful functions can be found in the <code>damageinfo</code> section of this page and in :doc:<code>entities</code></p> <p><code>GetObitFromdamageSourceId</code> is a global function that attempts to localise the <code>damageSourceId</code> inputed, if it cannot get a localised string it will simply return the localisation string of the source.</p> <p>float DamageInfo_GetViewPunchMultiplier( vare damageInfo )</p> <p>float DamageInfo_GetDistFromAttackOrigin( var damageInfo )</p> <p>Get the distance from where the bullet/projectile was fired.</p> <p>float DamageInfo_GetDistFromExplosionCenter( var damageInfo )</p> <p>If it's a radius damage, gives the distance from the center of the blast. Otherwise defaults to zero.</p> <p>vector DamageInfo_GetDamageForce( var damageInfo )</p> <p>Get damage force vector.</p> <p>bool DamageInfo_IsRagdollAllowed( var damageInfo )</p> <p>Checks if code is allowing this entity to ragdoll on death</p> <p>int DamageInfo_GetDamageFlags( var damageInfo )</p> <p>Get all DAMAGEFLAG_* flags.</p> <p>bool DamageInfo_HasDamageFlags( var damageInfo, int damageFlags )</p> <p>\"Returns true if contains all given DAMAGEFLAG_* flags.</p> <p>string DamageInfo_GetDamageWeaponName( var damageInfo )</p> <p>Returns weapon name, even if weapon entity is gone</p> <p>bool DamageInfo_ShouldRecordStatsForWeapon( var damageInfo )</p> <p>Returns if stats should be recorded for damage weapon</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/#setters","title":"Setters","text":"<p>void DamageInfo_SetForceKill( var damageInfo, bool force )</p> <p>Sets whether this damage should force a kill</p> <p>void DamageInfo_SetDamage( var damageInfo, float damage )</p> <p>Set the amount of damage</p> <p>void DamageInfo_SetCustomDamageType( var damageInfo, int damageType )</p> <p>Overrides the damage type that was set by script when firing the weapon.</p> <p>void DamageInfo_AddCustomDamageType( var damageInfo, int damageType )</p> <p>Add a damage flag.</p> <p>void DamageInfo_RemoveCustomDamageType( var damageInfo, int damageType )</p> <p>Remove damage flag.</p> <p>void DamageInfo_SetDamageSourceIdentifier( var damageInfo, int identifier )</p> <p>Sets the damage source identifier.</p> <p>void DamageInfo_SetDeathPackage( var damageInfo, string package )</p> <p>Set what death (anim) package to use if this damage kills the guy.</p> <p>void DamageInfo_SetDamageForce( var damageInfo, vector force )</p> <p>Set damage force vector</p> <p>void DamageInfo_SetFlinchDirection( var damageInfo, number direction )</p> <p>Set which direction the target should flinch in.</p> <p>void DamageInfo_AddDamageFlags( var damageInfo, int flags )</p> <p>Add a DAMAGEFLAG_* flag.</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/#utils","title":"Utils","text":"<p>bool IsCriticalHit( entity attacker, entity victim, number hitBox, number damage, int damageType )</p> <p>bool IsRodeoHitBox( entity e, number f )</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/#helpers","title":"Helpers","text":"<p>bool HeavyArmorCriticalHitRequired( var damageInfo )</p> <p>.. note::</p> <pre><code>SERVER only\n</code></pre> <p>bool CritWeaponInDamageInfo( var damageInfo )</p> <p>.. note::</p> <pre><code>SERVER only\n</code></pre> <p>float GetCriticalScaler( ent, damageInfo )</p> <p>.. note::</p> <pre><code>SERVER only\n</code></pre> <p>bool IsValidHeadShot( var damageInfo = null, entity victim = null, entity attacker = null, entity weapon = null, int hitGroup = -1, float attackDist = -1.0, entity inflictor = null )</p> <p>bool IsMaxRangeShot( damageInfo )</p> <p>bool IsMidRangeShot( damageInfo )</p> <p>bool IsInstantDeath( var damageInfo )</p> <p>bool IsTitanCrushDamage( damageInfo )</p> <p>bool IsSuicide( entity attacker, entity victim, int damageSourceId )</p> <p>string GetObitFromdamageSourceId( int damageSourceId )</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/#damage-flag-overview","title":"Damage Flags","text":"<p>You can get a bitflag of all damage types used with <code>DamageInfo_GetDamageType</code>.</p> Damage flags <p>List of all Damage flags</p> Variable name Value DF_GIB 1 DF_DISSOLVE 2 DF_INSTANT 3 DF_NO_SELF_DAMAGE 4 DF_IMPACT 5 DF_BYPASS_SHIELD 6 DF_RAGDOLL 7 DF_TITAN_STEP 8 DF_RADIUS_DAMAGE 9 DF_ELECTRICAL 10 DF_BULLET 11 DF_EXPLOSION 12 DF_MELEE 13 DF_NO_INDICATOR 14 DF_KNOCK_BACK 15 DF_STOPS_TITAN_REGEN 16 DF_DISMEMBERMENT 17 DF_MAX_RANGE 18 DF_SHIELD_DAMAGE 19 DF_CRITICAL 20 DF_SKIP_DAMAGE_PROT 21 DF_HEADSHOT 22 DF_VORTEX_REFIRE 23 DF_RODEO 24 DF_BURN_CARD_WEAPON 25 DF_KILLSHOT 26 DF_SHOTGUN 27 DF_SKIPS_DOOMED_STATE 28 DF_DOOMED_HEALTH_LOSS 29 DF_DOOM_PROTECTED 30 DF_DOOM_FATALITY 31 DF_NO_HITBEEP 32 Damage types <pre><code>    global enum damageTypes\n    {\n        gibs = (DF_GIB)\n        largeCaliberExp  = (DF_BULLET | DF_GIB | DF_EXPLOSION)\n        gibBullet = (DF_BULLET | DF_GIB)\n        instant = (DF_INSTANT)\n        dissolve = (DF_DISSOLVE)\n        projectileImpact = (DF_GIB)\n        pinkMist = (DF_GIB) //If updated from DF_GIB, change the DF_GIB in Arc Cannon to match.\n        ragdoll = (DF_RAGDOLL)\n        titanStepCrush = (DF_TITAN_STEP)\n        arcCannon = (DF_DISSOLVE | DF_GIB | DF_ELECTRICAL )\n        electric = (DF_ELECTRICAL) //Only increases Vortex Shield decay for bullet weapons atm.\n        explosive = (DF_RAGDOLL | DF_EXPLOSION )\n        bullet = (DF_BULLET)\n        largeCaliber = (DF_BULLET | DF_KNOCK_BACK)\n        shotgun = (DF_BULLET | DF_GIB | DF_SHOTGUN )\n        titanMelee = (DF_MELEE | DF_RAGDOLL)\n        titanBerserkerMelee = (DF_MELEE | DF_RAGDOLL)\n        titanEjectExplosion = (DF_GIB | DF_EXPLOSION)\n        dissolveForce = (DF_DISSOLVE | DF_KNOCK_BACK | DF_EXPLOSION)\n        rodeoBatteryRemoval = (DF_RODEO | DF_EXPLOSION | DF_STOPS_TITAN_REGEN )\n    }\n</code></pre>"},{"location":"Modding/reference/respawn/native_server/datatables/","title":"DataTables","text":"<p>var GetDataTable( asset datatablepath )</p> <p>Gets the given datable asset</p> <p>var GetDataTableColumnByName( var datatable, string columnName )</p> <p>Finds the column in the datatable with the given name. -1 if none.</p> <p>int GetDataTableRowCount( var dtatatable )</p> <p>Returns the number of rows of a given datatable</p> <p>bool GetDatatableBool( var dtatable, int row, int column )</p> <p>Gets a bool from the given row/column of a datatable</p> <p>int GetDataTableInt( var datatable, int row, int column )</p> <p>Gets an integer from the given row/column of a datatable</p> <p>float GetDataTableFloat( var datatable, int row, int column )</p> <p>Gets a float from the given row/column of a datatable</p> <p>vector GetDataTableVector( var datatable, int row, int column )</p> <p>Gets a vector from the given row/column of a datatable</p> <p>string GetDataTableString( var datatable, int row, int column )</p> <p>Gets a string from the given row/column of a datatable</p> <p>asset GetDataTableAsset( var datatable, int row, int column )</p> <p>Gets an asset from the given row/column of a datatable</p> <p>bool GetDataTableRowMatchingBoolValue( var datatable, int column, bool value )</p> <p>Finds and returns the first row of the datatable for which the bool in the given column matches the given value. -1 if none.</p> <p>int GetDataTableRowMatchingIntValue( var datatable, int column, int value )</p> <p>Finds and returns the first row of the datatable for which the int in the given column matches the given value. -1 if none.</p> <p>int GetDataTableRowLessThanOrEqualToIntValue( var datatable, int column, int value )</p> <p>Finds and returns the first row of the datatable for which the int in the given column is less than or equal to the given value. -1 if none.</p> <p>int GetDataTableRowGreaterThanOrEqualToIntValue( var datatable, int column, int value )</p> <p>Finds and returns the first row of the datatable for which the int in the given column is greater than or equal to the given value. -1 if none.</p> <p>int GetDataTableRowMatchingFloatValue( var datatable, int column, float value )</p> <p>Finds and returns the first for of the datatable for which the float in the given colmn matches the given value. -1 if none.</p> <p>int GetDataTableRowLessThanOrEqualToFloatValue( var datatable, int column, float value )</p> <p>Finds and returns the first row of the datatable for which the float in the given column is less than or equal to the given value. -1 if none.</p> <p>int GetDataTableRowGreaterThanOrEqualToFloatValue( var datatable, int column, float value )</p> <p>Finds and returns the first row of the datatable for which the float in the given column is greater than or equal to the given value. -1 if none.</p> <p>int GetDataTableRowMatchingVectorValue( var datatable, int column, vector value )</p> <p>Finds and returns the first row of the datatable for which the vector in the given column matches the given value. -1 if none.</p> <p>int GetDataTableRowMatchingStringValue( var datatable, int column, string value )</p> <p>Finds and returns the first row of the datatable for which the string in the given column matches the given value. -1 if none.</p> <p>int GetDataTableRowMatchingAssetValue( car datatable, int column, asset value )</p> <p>Finds and returns the first row of the dtatable for which the asset in the given column matches the given value. -1 if none.</p>"},{"location":"Modding/reference/respawn/native_server/debugdraw/","title":"Debug Drawing","text":"<p>Note</p> <p>Only <code>DebugDrawLine</code>, <code>DebugDrawBox</code> and <code>DebugDrawScreenText</code> are native functions.</p> <p>The rest are defined in scripts using these.</p> <p>In Titanfall it is possible to draw shapes in 3D, from the SERVER and CLIENT VM, using the debug draw functions, however in order for them to actually render you will need to set <code>sv_cheats 1</code> and <code>enable_debug_overlays 1</code> in your launch config or console.</p> <p>These debug drawing functions are available:</p> <p>void DebugDrawLine( vector start, vector end, int r, int b, int g, bool drawThroughObject, float time)</p> <p>void DebugDrawCylinder( vector origin, vector angles, float radius, float height, int r, int g, int b, bool throughGeo, float time )</p> <p>array DebugDrawCircle( vector origin, vector angles, float radius, int r, int g, int b, bool throughGeo, float time, int segments = 16 ) <p>void DebugDrawMark( vector origin, float radius, array color, bool alwaysDraw, float drawTime ) <p>void DebugDrawSphere( vector origin, float radius, int r, int g, int b, bool throughGeo, float time, int segments = 16 )</p> <p>void DrawArrow( vector origin, vector angles = &lt;0,0,0&gt;, float time = 5.0, float scale = 50, vector rgb = &lt;0,0,0&gt; )</p> <p>void DrawStar( vector origin, int size, float time = 1.0, bool throughWorld = false )</p> <p>void DebugDrawBoxSimple( vector origin, vector min = &lt; -4.0, -4.0, -4.0&gt;, vector max = &lt;4.0, 4.0, 4.0&gt;, int r = 255, int g = 255, int b = 100, int alpha = 255, float time = 0.2 )</p> <p>void DrawBox( vector org, vector mins, vector maxs, int r, int g, int b, bool throughSolid, float time )</p> <p>void DebugDrawCube( vector cubeCenter, float cubeSize, int r, int g, int b, bool throughSolid, float time )</p> <p>void DebugDrawBox( vector org, vector min, vector max, int r, int g, int b, int a, float time)</p> <p>void DrawAngledBox( vector org, vector ang, vector mins, vector maxs, int r, int g, int b, bool throughSolid, float time )</p> <p>void DrawBoxFromEye( vector org, vector mins, vector maxs, int r, int g, int b, bool throughSolid, float time )</p> <p>vector[8] GetBoxCorners( vector org, vector ang, vector mins, vector maxs )</p> <p>void DebugDrawRotatedBox( vector origin, vector mins, vector maxs, vector angles, int r, int g, int b, bool throughGeo, float duration )</p> <p>void DebugDrawCircleTillSignal( entity ent, string signalName, vector origin, float radius, int r, int g, int b )</p> <p>void DebugDrawOriginMovement( entity ent, int r, int g, int b, float time = 9999.0, float trailTime = 5.0 )</p> <p>void DebugDrawSpawnpoint( entity spawnpoint, int r, int g, int b, bool throughSolid, float time )</p> <p>void DrawArrowOnTag( entity ent, string ornull tag = null, float time = 5.0, float scale = 50, vector rgb = &lt;0,0,0&gt; )</p> <p>void DrawArrowOnTagThread( entity ent, string ornull tag, float time, float scale, vector rgb = &lt;0,0,0&gt; )</p> <p>void DrawTag( entity ent, string tag )</p> <p>void DrawOrg( entity ent )</p> <p>void DrawAttachment( entity pod, string attachment, float time = 0.1, vector ornull color = null )</p> <p>void DrawAttachmentForever( entity pod, string attachment )</p> <p>void DrawEntityOrigin( entity ent, float time = 0.1, vector ornull color = null )</p> <p>void DrawOrigin( vector origin, float time = 0.1, vector ornull color = null )</p> <p>vector[16] DebugDrawTrigger( vector origin, float radius, int r, int g, int b )</p> <p>void DebugDrawCircleOnEnt( entity ent, float radius, int r, int g, int b, float time )</p> <p>void DebugDrawSphereOnEnt( entity ent, float radius, int r, int g, int b, float time )</p> <p>void _DebugThreadDrawCircleOnEnt( entity ent, float radius, int r, int g, int b, float time, vector anglesDelta = Vector( 0, 0, 0 ) )</p> <p>void DebugDrawCircleOnTag( entity ent, string tag, float radius, int r, int g, int b, float time )</p> <p>void DebugDrawSphereOnTag( entity ent, string tag, float radius, int r, int g, int b, float time )</p> <p>void _DebugThreadDrawCircleOnTag( entity ent, string tag, float radius, int r, int g, int b, float time, vector anglesDelta = Vector( 0, 0, 0 ) )</p> <p>void DrawTracerOverTime( vector origin, vector dir, float time )</p> <p>void DebugDrawWeapon( entity weapon )</p> <p>void DebugDrawAngles( vector position, vector angles, float duration = 9999.0 )</p> <p>void DrawAnglesForMovingEnt( entity ent, float duration, string optionalTag = \"\" )</p> <p>void DrawLineFromEntToEntForTime( entity ent1, entity ent2, float duration, int r = 255, int g = 255, int b = 0 )</p> <p>void DrawLineFromVecToEntForTime( vector vec, entity ent, float duration, int r = 255, int g = 255, int b = 0 )</p> <p>void DrawLineForPoints( array points, vector color, float duration ) <p>void DebugScreenText( float posX, float posY, string text )</p> <p>Error</p> <p>This function is stripped. It does nothing.</p>"},{"location":"Modding/reference/respawn/native_server/dev/","title":"Developer Functions","text":"<p>Warning</p> <p>Most of these functions are stripped and have no functionality.</p>"},{"location":"Modding/reference/respawn/native_server/dev/#command-line","title":"Command Line","text":"<p>bool Dev_CommandLineHasParam( string param )</p> <p>string Dev_CommandLineParmValue( string param )</p> <p>void Dev_CommandLineRemoveParam( string param )</p> <p>void Dev_CommandLineAddParm( string param )</p>"},{"location":"Modding/reference/respawn/native_server/dev/#developer-utils","title":"Developer Utils","text":"<p>array GetModelViewerList() <p>Returns list of files in <code>scripts/model_view_list.txt</code>, which is written by reRun (respawn internal tool)</p> <p>void NativeFuncTest( number a, bool b, number c )</p> <p>int GetDeveloperLevel()</p> <p>int GetBugReproNum()</p> <p>bool DevLobbyIsFrozen()</p> <p>void TriggerBreakpoint()</p> <p>void SpamLog( string text )</p> <p>Prints to the game's spam logfile (usually stored in DevNet).</p> <p>void CodeWarning( string s )</p>"},{"location":"Modding/reference/respawn/native_server/dev/#performance","title":"Performance","text":"<p>void PerfInitLabel( string s, int n )</p> <p>void PerfStart( int n )</p> <p>void PerfEnd( int n)</p> <p>void PerfClearAll()</p> <p>void PerfReset()</p> <p>void PerfDump()</p> <p>void RProfStart( string, int n )</p> <p>void RProfEnd( int n )</p>"},{"location":"Modding/reference/respawn/native_server/dev/#devp4","title":"DevP4","text":"<p>Error</p> <p>Stripped in Northstar for security.</p> <p>void DevP4Checkout( string s )</p> <p>void DevP4Add( string s )</p>"},{"location":"Modding/reference/respawn/native_server/dev/#devtextbuffer","title":"DevTextBuffer","text":"<p>Error</p> <p>Stripped in Northstar for security.</p> <p>void DevTextBufferWrite( string s )</p> <p>Append string to a temp buffer. Dev only.</p> <p>void DevTextBufferClear()</p> <p>void DevTextBufferDumpToFile( string file )</p> <p>Dump temp buffer out to specified path/filename.</p>"},{"location":"Modding/reference/respawn/native_server/dev/#match-stat-loggers","title":"Match Stat Loggers","text":"<p>void LogPlayerMatchStat_KilledAPilot( entity e )</p> <p>void LogPlayerMatchStat_Death( entity e )</p> <p>void LogPlayerMatchStat_EarnedXP( entity e )</p> <p>void LogPlayerMatchStat_UsedBurncard( entity e )</p> <p>void LogPlayerMatchStat_HappyHourMeritsGiven( entity e )</p> <p>void LogPlayerStat_BurncardDiscard( entity e )</p>"},{"location":"Modding/reference/respawn/native_server/entityio/","title":"Entity Actions","text":"<p>void DoEntFire( string target, string action, string value, number delay, entity activator, entity caller )</p> <p>void EntFireNow( string target, string action, string value, entity activator, entity caller )</p> <p>void EntFireByHandle( entity ent, string action, string value, number delay, entity activator, entity caller )</p> <p>void EntFireByHandleNow( entity ent, string action, string value, entity activator, entity caller )</p>"},{"location":"Modding/reference/respawn/native_server/gamerules/","title":"Gamerules","text":"<p>string GameRules_GetGameMode()</p> <p>int GameRules_GetTeamScore( int team )</p> <p>int GameRules_GetTeamScore2( int team )</p> <p>Used for round based game modes</p> <p>int GameRules_GetTeamKills( int team )</p> <p>int GameRules_GetTeamDeaths( int team )</p> <p>string GameRules_GetTeamName( int team )</p> <p>bool GameRules_TimeLimitEnabled()</p> <p>bool GameRules_AllowMatchEnd()</p> <p>int GameRules_GetClassMax( string class )</p> <p>void GameRules_SetGameMode( string gameMode )</p> <p>void GameRules_SetTeamScore( int team, int score )</p> <p>void GameRules_SetTeamScore2( int team, int score )</p> <p>Presumably used for round based game modes</p> <p>void GameRules_EndMatch()</p> <p>void GameRules_MarkGameStatePrematchEnding()</p> <p>void GameRules_MarkGameStateWinnerDetermined()</p> <p>void GameRules_ChangeMap( string mapName, string gameMode )</p> <p>string GameRules_GetRecentMap( number unk1 )</p> <p>string GameRules_GetRecentGameMode( number unk1 )</p> <p>int GameRules_GetRecentTeamScore( number unk1, int team )</p> <p>void GameRules_EnableGlobalChat( bool enabled )</p> <p>string GameRules_GetUniqueMatchID()</p> <p>void GameRules_SetDeadPlayersCanOnlySpeakToDeadPlayersInHudChat( bool b )</p>"},{"location":"Modding/reference/respawn/native_server/getent/","title":"Getting Entities","text":"<p>There are a multitude of selectors to get specific kinds of entities.</p> <p>Creating entities is documented here.</p>"},{"location":"Modding/reference/respawn/native_server/getent/#players","title":"Players","text":"<p>array GetPlayerArray() <p>Get array of all players</p> <p>array GetPlayerArrayEx( string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist ) <p>Get array of all players by class, team within dist. team -1 for any team, <code>\"any\"</code> for any class, otherwise <code>\"titan\"</code> or <code>\"pilot\"</code>, -1 for any dist</p> <p>array GetPlayerArrayOfTeam( int team ) <p>Get array of all players that are in a team</p> <p>array GetPlayerArrayOfEnemies( int team ) <p>Get array of all players that are not allied with the team</p> <p>array GetPlayerArray_Alive() <p>Get array of all players that are alive</p> <p>array GetPlayerArrayOfTeam_Alive( int team ) <p>Get array of all players in a team that are alive</p> <p>array GetPlayerArrayOfEnemies_Alive( int team ) <p>array GetPlayerArray_Pilots() <p>Get array of all players that are not titans</p> <p>array GetPlayerArrayOfTeam_Pilots( int team ) <p>array GetPlayerArrayOfEnemies_Pilots( int team ) <p>array GetPlayerArray_AlivePilots() <p>array GetPlayerArrayOfTeam_AlivePilots( int team ) <p>array GetPlayerArrayOfEnemies_AlivePilots( int team ) <p>array GetPlayerDecoryArray()"},{"location":"Modding/reference/respawn/native_server/getent/#connecting-players","title":"Connecting Players","text":"<p>array GetConnectingAndConnectedPlayerArray() <p>Get array of all players, even ones who are connecting</p> <p>int GetPendingClientsCount()</p>"},{"location":"Modding/reference/respawn/native_server/getent/#titans","title":"Titans","text":"<p>Get all players in a titan and souls.</p> <p>array GetTitanArray() <p>array GetTitanArrayOfTeam( int team ) <p>array GetTitanArrayOfEnemies( int team ) <p>array GetTitanSoulArray() <p>int GetTitanCountForTeam( int team )</p> <p>int GetTeamPlayerCount( int team )</p>"},{"location":"Modding/reference/respawn/native_server/getent/#npcs-props","title":"NPCs &amp; Props","text":"<p>int GetSurfacePropForEntity( entity ent )</p> <p>entity GetEntByIndex( int index )</p> <p>array GetNPCArray() <p>array GetNPCArrayOfTeam( int team ) <p>array GetNPCArrayOfEnemies( int team ) <p>array GetNPCArrayEx( string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist ) <p>Get array of all NPCs by class, team, within dist. team -1 for any team, <code>\"any\"</code> for any class, otherwise <code>\"titan\"</code> or <code>\"pilot\"</code>, -1 for any dist</p> <p>GetNPCArrayWithSubclassEx( string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist, array subclasses ) <p>Get array of all NPCs by class, team, and subclass (array), within dist. team -1 for any team, <code>\"'any\"</code> for any class, -1 for any dist</p> <p>array GetNPCArrayByClass( string classname ) <p>Get array of all NPCs of class</p> <p>array ScriptGetNPCArrayByClassAndSubclass( string classname, array subclasses ) <p>Get array of all NPCs of class and subclass</p>"},{"location":"Modding/reference/respawn/native_server/getent/#projectiles","title":"Projectiles","text":"<p>array GetProjectileArray() <p>array GetProjectileArrayEx( string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist ) <p>Get array of all NPCs by class, team, within dist. team -1 for any team, <code>\"any\"</code> for any class, otherwise <code>\"titan\"</code> or <code>\"pilot\"</code>, -1 for any dist</p>"},{"location":"Modding/reference/respawn/native_server/getent/#find-entities","title":"Find Entities","text":"<p>entity Entities_First()</p> <p>entity Entities_Next( entity ent )</p> <p>entity Entities_FindByClassname( entity ent, string className )</p> <p>entity Entities_FindByName( entity ent, string name )</p> <p>entity Entities_FindInSphere( entity ent, vector sphereDir, float radius )</p> <p>entity Entities_FindByTarget( entity ent, string target )</p> <p>entity Entities_FindByNameNearest( string name, vector dir, float length )</p> <p>entity Entities_FindByNameWithin( entity ent, string name, vector v, float len )</p> <p>entity Entities_FindByClassnameNearest( string className, vector v, float f )</p> <p>entity Entities_FindByClassnameWithin( entity ent, string className, vector v, float f )</p> <p>entity GetEntByScriptName( string name )</p> <p>entity GetEntByScriptNameInInstance( string name, string instanceName )</p> <p>entity GetTeamEnt( int team )</p>"},{"location":"Modding/reference/respawn/native_server/getent/#get-multiple-entites","title":"Get Multiple Entites","text":"<p>array GetEntArrayByName_Expensive( string name ) <p>Get array of entitites matching a name</p> <p>array GetEntArrayByNameWildCard_Expensive( string name ) <p>Get array of entities matching a name with support for *</p> <p>array GetEntArrayByClass_Expensive( string className ) <p>Get array of entities matching a class</p> <p>array GetEntArrayByClassWildCard_Expensive( string classname ) <p>Get array of entities matching a class with support for *</p> <p>array GetEntArrayByScriptName( string name ) <p>Get array of entities matching a script name</p> <p>array GetEntArrayByScriptNameInInstance( string scriptName, string instanceName ) <p>Get array of entities matching a script name and instance</p> <p>array GetWeaponArray( bool onlyNotOwned ) <p>Get weapons in the world</p>"},{"location":"Modding/reference/respawn/native_server/hudmessages/","title":"HUD Messages","text":"<p>Functions to render text on the client screen.</p> <p>Because these can not be removed in demos and are somewhat ugly, it is recommended to use Serverside RUI instead</p> <p>void SendHudMessage( entity player, string text, int xPos, int yPos, int r1, int g1, int b1, number a1, number r2, number g2, number b2, number a2, number fadeTimeIn, number holdTime, number fadeTimeOut )</p> <p>Send a HUD message to the given player.</p> <p>void SendHudMessageToAll( string text, int xPos, int yPos, int r1, int g1, int b1, number a1, number r2, number g2, number b2, number a2, number fadeTimeIn, number holdTime, number fadeTimeOut )</p> <p>Send a HUD message to all players.</p> <p>void CenterPrintAll( string text )</p> <p>Prints white text in the center of the screen on all clients.</p>"},{"location":"Modding/reference/respawn/native_server/managedarrays/","title":"Script Managed Entity Arrays","text":"<p>int CreateScriptManagedEntArray()</p> <p>Returns the index of the new array</p> <p>void AddToScriptManagedEntArray( int index, entity ent )</p> <p>void RemoveFromScriptManagedEntArray( int index, entity ent )</p> <p>int GetScriptManagedEntArrayLen( int index )</p> <p>array GetScriptManagedEntArray( int index ) <p>Get the script managed ent array for the given index</p> <p>array GetScriptManagedEntArrayWithinCenter( int index, int notTeam, vector origin, float dist ) <p>Get the script managed ent array for the given index within distance of a point</p>"},{"location":"Modding/reference/respawn/native_server/math/","title":"Math","text":"<p>vector AngleNormalize( vector v )</p> <p>vector CalcRelativeVector( vector a, vector b )</p> <p>vector CalcRelativeAngles( vector a, vector b )</p> <p>bool BoxIntersectsBox( vector mins1, vector maxs1, vector mins2, vector maxs2 )</p> <p>float clamp( number a, number b, number c )</p> <p>float Interpolate( number startTime, number moveTime, number easeIn, number easeOut )</p> <p>Interpolate with cubic hermite during ease-in and ease-out times</p> <p>vector LerpVector( vector vecFrom, vector vecTo, float percent )</p> <p>Lineraly interpolate between two vectors</p> <p>vector GetRandom3DPointIn2DCircle( number radius, var base3D_or_null )</p> <p>Get a random 2d point in a circle, as a 3d point, with optional 3d base</p> <p>float Graph( number a, number b, number c, number d, number e )</p> <p>float GraphCapped( number a, number b, number c, number d, number e )</p> <p>vector GraphCappedVector( number a, number b, number c, vector d, vector e )</p> <p>float Smooth01( float f, int i )</p> <p>var SmoothCD( number a, number b, number c, number d, number e )</p> <p>var SmoothCDVector( vector a, vector b, vector c, number d, number e )</p> <p>vector GetApproxClosestHitboxToRay( entity ent, vector v1, vector v2 )</p>"},{"location":"Modding/reference/respawn/native_server/misc/","title":"Miscellaneous","text":"<p>bool IsServer()</p> <p>bool IsClient()</p> <p>bool IsToolsMode()</p> <p>bool IsFNF()</p> <p>bool IsGameFromReload()</p> <p>int GetCPULevel()</p> <p>bool IsEnemyTeam( int ownTeam, int otherTeam )</p> <p>Returns if <code>otherTeam</code> is an enemy of <code>ownTeam</code></p> <p>void SetMaxActivityMode( int mode )</p> <p>int CalculateHashForString( string s )</p> <p>void CreateRope( vector start, vector end, float length = 0, entity startEnt = null, entity endEnt = null, int startAttachment = 0, int endAttachment = 0, string material = \"\", int segmentCount = 0 )</p> <p>Creates a rope between two points or entities.</p> <p>float GetTeamSkill( int team )</p> <p>void SendToConsole( string cmd )</p> <p>Execute <code>cmd</code> on the local host</p> <p>void RecordAchievementEvent( string s1, number n1 )</p> <p>void ServiceEventQueue()</p> <p>void SetDucking( string s1, string s2, number n1 )</p> <p>void GrantClientSidePickup_MatchCandy( entity player, int amount, vector origin, int flags, int recieptID )</p> <p>void NoteMatchState( number a1, number a2, number a3, number a4, number a5, number a6, number a7, number a8, number a9 )</p> <p>void NoteLobbyState( number a1, string a2 )</p> <p>bool IsHighPerfDevServer()</p> <p>bool ShouldAwardHappyHourBonus( entity player )</p> <p>bool InPrediction()</p> <p>bool IsFirstTimePredicted()</p> <p>string GetMapName()</p> <p>Get the map name of the current map</p> <p>bool IsFastIterationEnabled()</p> <p>bool BuildingCubeMaps()</p> <p>bool IsTestMap()</p> <p>Returns value of IsTestMap from the level's script list .rson file</p>"},{"location":"Modding/reference/respawn/native_server/misc/#parents-children","title":"Parents &amp; Children","text":"<p>void AssertNoPlayerChildren( entity parent )</p> <p>void TryClearParent( entity parent )</p> <p>void SetForceDrawWhileParented( entity child, bool force )</p>"},{"location":"Modding/reference/respawn/native_server/misc/#visual-options","title":"Visual Options","text":"<p>void SetCrosshairTeamColoringDisabled( entity player, bool disabled )</p> <p>void SetHideOnCloak( entity ent, bool hide )</p>"},{"location":"Modding/reference/respawn/native_server/misc/#vpk","title":"VPK","text":"<p>void VPKNotifyFile( string file )</p>"},{"location":"Modding/reference/respawn/native_server/misc/#player-utils","title":"Player Utils","text":"<p>bool IsPlayerSafeFromNPCs( entity player )</p> <p>bool IsPlayerSafeFromProjectiles( entity player, vector origin )</p> <p>entity GetWindowHint( vector startPos, number radius, number height, vector dir, number distance, number gravity, number margin, entity ignoreEnt )</p> <p>Returns the best window hint.</p> <p>void ScreenFade( entity player, number r, number g, number b, number fadeTime, number fadeHold, int fadeFlags )</p> <p>Fade the player's scren.</p> <p>Fade flags start with <code>FFADE_</code></p>"},{"location":"Modding/reference/respawn/native_server/misc/#levels","title":"Levels","text":"<p>void SetXPForLevel( int a, int b )</p> <p>Sets the XP required for a player to get to a certain level</p> <p>int GetLevelForXP( int n )</p>"},{"location":"Modding/reference/respawn/native_server/misc/#entity-utils","title":"Entity Utils","text":"<p>float GetHealthFrac( entity ent )</p> <p>bool IsMagneticTarget( entity ent )</p> <p>Returns if an entity is a magnetic target</p> <p>bool IsTurret( entity ent )</p> <p>int GetHitgroupForHitboxOnEntity( var a, number b )</p> <p>void PutEntityInSafeSpot( entity ent, entity referenceEnt, entity movingGroundEnt, vector, safeStartingLocationForEntity, vector positionAtEndOfAnimationForEntity )</p> <p>float GetHealthFrac( entity ent )</p> <p>bool IsMagneticTarget( entity ent )</p> <p>Returns if an entity is a magnetic target</p> <p>bool IsTurret( entity ent )</p> <p>Is entity a turret</p>"},{"location":"Modding/reference/respawn/native_server/misc/#weapon-utils","title":"Weapon Utils","text":"<p>void Weapon_SetDespawnTime( number time )</p> <p>int GetImpactEffectTable( string weapon )</p> <p>float CalcWeaponDamage( entity owner, entity target, entity weapon, number distanceToTarget, int extraMods )</p>"},{"location":"Modding/reference/respawn/native_server/misc/#preinstall","title":"Preinstall","text":"<p>bool IsGameFullyInstalled()</p> <p>Returns true if the full game is installed. You can't start mp or any sp map but sp_training and sp_crashsite if this is false.</p> <p>bool IsGamePartiallyInstalled()</p> <p>Returns true if the game is partially installed. You can't start sp training this is false.</p> <p>float GetGameFullyInstalledProgress()</p> <p>Returns fraction 0.0 to 1.0 of downloading of full game progress.</p> <p>bool Script_IsRunningTrialVersion()</p> <p>Only call when we have an active user.</p>"},{"location":"Modding/reference/respawn/native_server/misc/#script-reloads","title":"Script Reloads","text":"<p>void ReloadScriptCallbacks()</p> <p>void ReloadingScriptsBegin()</p> <p>void ReloadingScriptsEnd()</p>"},{"location":"Modding/reference/respawn/native_server/netvar/","title":"Networked Data","text":""},{"location":"Modding/reference/respawn/native_server/netvar/#networked-variables","title":"Networked Variables","text":"<p>void RegisterNetworkedVariable( string name, int SNDC_category, int SNVT_type, var defaultValue = 0, float rangemin = 0, float rangemax = 0 )</p> <p>Registers a named networked variable.</p> <p>int GetNetworkedVariableIndex( string name )</p> <p>Gets the internal index used to reference a scripted network variable. For use with <code>FX_PATTACH_SCRIPT_NETWORK_VAR</code>.</p> <p>void SetGlobalNetBool( string name, bool value )</p> <p>void SetGlobalNetInt( string name, int value )</p> <p>void SetGlobalNetFloat( string name, float value )</p> <p>void SetGlobalNetFloatOverTime( string name, float value, float time )</p> <p>void SetGlobalNetTime( string name, float value )</p> <p>void SetGlobalNetEnt( string name, entity value )</p> <p>bool GetGlobalNetBool( string name )</p> <p>int GetGlobalNetInt( string name )</p> <p>float GetGlobalNetFloat( string name )</p> <p>float GetGlobalNetTime( string name )</p> <p>entity GetGlobalNetEnt( string name )</p>"},{"location":"Modding/reference/respawn/native_server/netvar/#remote-functions","title":"Remote Functions","text":"<p>Remote functions allow the <code>SERVER</code> to call registered script functions on the <code>CLIENT</code> and <code>UI</code> VM.</p> <p>void Remote_BeginRegisteringFunctions()</p> <p>Begin registration of remote functions.</p> <p>void Remote_EndRegisteringFunctions()</p> <p>Finish registration of remote functions.</p> <p>void AddCallback_OnRegisteringCustomNetworkVars( void functionref() callback )</p> <p>Note</p> <p>This function is not native. It's defined in Northstar.CustomServers</p> <p>Registers a callback when Remote functions are being registered.</p> <p>To register custom remote functions you are required to use this callback because functions can only be registered once.</p> <pre><code>  globalize_all_functions\n\n  void function MyMod_Init()\n  {\n    AddCallback_OnRegisteringCustomNetworkVars( MyModRegisterRemoteFunctions )\n  }\n\n  void function MyModRegisterRemoteFunctions()\n  {\n    Remote_RegisterFunction( \"ExampleRemoteFunction\" )\n  }\n\n  void function ExampleRemoteFunction() {}\n</code></pre> <p>void Remote_RegisterFunction( string name )</p> <p>Register a function name to be used in remote calls.</p> <p>void Remote_CallFunction_Replay( entity player, string functionName, ... )</p> <p>Note</p> <p>Allowed extra parameter types are null, bool, int, and float.</p> <p>Given a player, function name, and optional parameters, call function in client script.</p> <p>Then call it again if we rewind and play a kill replay.   The command will not reach the client at all if called during a span of time the player skips because they were watching a replay.</p> <p>void Remote_CallFunction_NonReplay( entity player, string functionName, ... )</p> <p>Note</p> <p>Allowed extra parameter types are null, bool, int, and float.</p> <p>Given a player, function name, and optional parameters, call function in client script.</p> <p>Does not get called again in replays.</p> <p>void Remote_CallFunction_UI( entity player, string functionName, ... )</p> <p>Note</p> <p>Allowed extra parameter types are null, bool, int, and float.</p> <p>Given a player, function name and optional parameters, call function in UI script.</p>"},{"location":"Modding/reference/respawn/native_server/netvar/#replays","title":"Replays","text":"<p>While not being networked themselves, these are used by remote functions.</p> <p>bool ShouldDoReplayIsForcedByCode()</p> <p>bool Replay_IsEnabled()</p>"},{"location":"Modding/reference/respawn/native_server/npc/","title":"NPCs","text":"<p>For settings, see AI Settings</p>"},{"location":"Modding/reference/respawn/native_server/npc/#npc-utils","title":"NPC Utils","text":"<p>void UpdateEnemyMemoryFromTeammates( entity guy )</p> <p>void UpdateEnemyMemoryWithinRadius( entity guy, number radius )</p> <p>void SetEnableNPCs( bool enabled )</p> <p>void ToggleNPCPathsForEntity( entity ent, bool pathable )</p> <p>Controls if <code>ent</code> is traversable by NPCs</p> <p>void ToggleNPCPathsForEntityAtPosition( entity ent, vector pos, bool pathable )</p> <p>void TransitionNPCPathsForEntity( entity ent, vector pos, bool b )</p> <p>void SetVisibleEntitiesInConeQueriableEnabled( entity ent, bool enabled )</p>"},{"location":"Modding/reference/respawn/native_server/npc/#npc-squads","title":"NPC Squads","text":"<p>void CreateNPCSquad( string name )</p> <p>int GetNPCSquadSize( string name )</p> <p>void SetNPCSquadMode( string name, number mode )</p> <p>array ScriptGetNPCArrayBySquad( string name )"},{"location":"Modding/reference/respawn/native_server/npc/#npc-navigation-nodes","title":"NPC Navigation Nodes","text":"<p>void NPCSetSearchPathUseDist( number distance )</p> <p>float NPCGetSearchPathUseDist()</p> <p>void NPCSetAimConeFocusParams( number a, number b )</p> <p>void NPCSetAimPatternFocusParams( number a, number b )</p> <p>void NPCSetReacquireParams( number a, number b )</p> <p>void NPCSetSquadNoFlankThreshold( string a, number b, number c )</p> <p>int GetNearestNodeToPos( vector pos )</p> <p>Returns a node index</p> <p>int GetBestNodeForPosInWedge( vector tPos, vector startPos, number yaw, number minFov, number maxFov, number fovPenalty, number some_index, number steps_maybe )</p> <p>Returns a node index</p> <p>vector GetNodePos( int nodeIndex )</p> <p>int GetNodeCount()</p> <p>bool GetNodeScriptData_Boolean( int nodeIndex, int otherNodeIndex )</p> <p>void SetNodeScriptData_Boolean( int nodeIndex, int otherNodeIndex, bool value )</p> <p>int GetAINScriptVersion()</p>"},{"location":"Modding/reference/respawn/native_server/npc/#navmeshes","title":"Navmeshes","text":"<p>bool NavMesh_IsUpToDate()</p> <p>vector ornull NavMesh_ClampPointForAI( vector point, entity npc )</p> <p>Clamps a goal point to the NavMesh for a given AI. Uses AIs hull size as test extents</p> <p>vector ornull NavMesh_ClampPointForAIWithExtents( vector pointToClamp, entity contextAI, vector extents )</p> <p>Clamps a goal point to the NavMesh for a given AI.   As extents increase in size more possible clamp positions become available,   but too large and the clamped position may be very far from the original point.</p> <p>vector ornull NavMesh_ClampPointForHull( vector pointToClamp, int hull )</p> <p>Clamps a goal point to the NavMesh for a given hull</p> <p>vector ornull NavMesh_ClampPointForHullWithExtents( vector pointToClamp, int hull, vector extents )</p> <p>Clamps a goal point to the NavMesh for a given hull.   As extents increase in size more possible clamp positions become available,   but too large clamped position may be very far from the original point.</p> <p>array NavMesh_GetNeighborPositions( vector point, int hull_maybe, int nNodesToCheck_maybe ) <p>Get nearby ground positions by following the NavMesh graph</p> <p>array NavMesh_RandomPositions( vector startPos, int hull, int numPositionsRequested, float minDist, float maxDist ) <p>Get n( &lt; 64 ) ground positions around a spot within <code>minDist</code> and <code>maxDist</code></p> <p>array NavMesh_RandomPositions_LargeArea( vector startPos, int hull, int numPositionsRequested, float minDist, float maxDist ) <p>Get up to n ground positions around a spot within <code>minDist</code> and <code>maxDist</code>. Gets center of random polygons.</p> <p>bool NavMesh_IsPosReachableForAI( entity npc, vector point )</p> <p>Checks if the npc can reach the position over graph</p> <p>vector GetBoundsMin( int hull )</p> <p>vector GetBoundsMax( int hull )</p>"},{"location":"Modding/reference/respawn/native_server/npc/#skits","title":"Skits","text":"<p>void SkitSetDistancesToClosestHarpoints()</p> <p>array GetSkitNodeArray_NearPlayers() <p>Get skit nodes sorted by nearest to average player position with some randomization</p> <p>array GetSkitNodeArray_NearHardpoints() <p>Get skit nodes sorted by nearest to hardpoints with some randomization</p> <p>array GetSkitNodeArray_NearPos() <p>Get skit nodes sorted by nearest to pos with some randomization</p>"},{"location":"Modding/reference/respawn/native_server/npc/#dangerous-areas","title":"Dangerous Areas","text":"<p>void AI_CreateDangerousArea( entity lifetimeEnt, entity weaponOrProjectile, float radius, int safeTeam, bool affectsNormalArmor, bool affectsHeavyArmor )</p> <p>Create a known dangerous are that AI should avoid if necessary.   The lifetime of the danger is tied to an entity</p> <p>void AI_CreateDangerousArea_Static( entity lifetimeEnt, entity weaponOrProjectile, float radius, int safeTeam, bool affectsNormalArmor, bool affectsHeavyArmor, vector staticOrigin )</p> <p>Same as AI_CreateDangerousArea except the origin is always in a single place</p> <p>void AI_CreateDangerousArea_DamageDef( int damageDef, entity lifetimeEnt, int safeTeam, bool affectsNormalArmor, bool affectsHeavyArmor )</p> <p>Create dangerous area using damage def</p>"},{"location":"Modding/reference/respawn/native_server/npc/#ain","title":"AIN","text":"<p>AIN on the valve wiki</p> <p>bool AINFileIsUpToDate()</p> <p>bool AINExists()</p> <p>void SetAINScriptVersion( int version )</p>"},{"location":"Modding/reference/respawn/native_server/npc/#spawners","title":"Spawners","text":"<p>array GetSpawnerArrayByClassName( string className ) <p>Get array of spawners matching a class name</p> <p>array GetSpawnerArrayByScriptName( string name ) <p>Get array of spawners matching a script name</p> <p>entity GetSpawnerByScriptName( string name )</p>"},{"location":"Modding/reference/respawn/native_server/operators/","title":"Operators","text":"<p>Warning</p> <p>Appears to be a scrapped feature.</p> <p>float Operator_FindFloorHeight( entity op, number n, bool b )</p> <p>void Operator_DiveEnable( entity op )</p> <p>void Operator_DiveDisable( entity op )</p> <p>bool Operator_IsDiving( entity op )</p> <p>void Operator_ForceDefaultFloorHeight( entity op, bool force )</p> <p>void Operator_SetDefaultFloorHeight( entity op, number height )</p> <p>void Operator_IgnoreWorldForMovement( entity op, bool ignore )</p> <p>void Operator_IgnoreWorldForFloorTrace( entity op, bool ignore )</p> <p>void Operator_MoveGridSizeScale( entity op, number scale )</p> <p>void Operator_MoveFloorHeightOffset( entity op, number offset )</p> <p>void Operator_JumpIsDodge( entity op, bool isDodge )</p> <p>void Operator_SetMaxJumpSpeed( entity op, number speed )</p> <p>void Operator_SetJumpAcceleration( entity op, number acc )</p>"},{"location":"Modding/reference/respawn/native_server/particles/","title":"Particles","text":"<p>Methods to create and manage particles</p> <p>int PrecacheParticleSystem( asset particle )</p> <p>int GetParticleSytemIndex( asset particle )</p> <p>string GetParticleSystemName( asset particle )</p> <p>void StartParticleEffectInWorld( number particleIndex, vector origin, vector angles )</p> <p>void StartParticleEffectInWorldWithControlPoint( number particleIndex, vector origin, vector angles, vector controlPoint )</p> <p>entity StartParticleEffectInWorld_ReturnEntity( number particleIndex, vector origin, vector angles )</p> <p>void StartParticleEffectOnEntity( entity ent, number particleIndex, number attachPoint, number attachID )</p> <p>void StartParticleEffectOnEntityWithControlPoint( entity ent, number particleIndex, number attachPoint, number attachID, number unk1, number unk2 )</p> <p>void StartParticleEffectOnEntityWithPos( entity ent, number particleIndex, number attachPoint, number attachID, vector origin, vector angles )</p> <p>void StartParticleEffectOnEntityWithPosWithControlPoint( entity ent, number particleIndex, number attachPoint, number attachID, vector unk2, vector unk3, number unk4, number unk5 )</p> <p>entity StartParticleEffectOnEntity_ReturnEntity( entity ent, number particleIndex, number attachPoint, number attachID )</p> <p>entity StartParticleEffectOnEntityWithPos_ReturnEntity( entity ent, number particleIndex, number attachPoint, number attachID, vector origin, vector angles )</p> <p>void EffectStop( entity effect )</p> <p>void EffectSleep( entity effect )</p> <p>void EffectWake( entity effect )</p> <p>void EffectSetControlPointVector( entity effect, number unk1, vector origin_maybe )</p> <p>void EffectSetControlPointAngles( entity effect, number unk1, vector angles )</p> <p>void EffectSetControlPointEntity( entity effect, number unk1, entity ent )</p> <p>void EffectAddTrackingForControlPoint( entity effect, number unk1, entity unk3, number unk4, number unk5 )</p>"},{"location":"Modding/reference/respawn/native_server/persistence/","title":"Persistence","text":"<p>int PersistenceGetEnumCount( string e )</p> <p>Get a count of how many distinct values the given enum has.</p> <p>int PersistenceGetEnumIndexForItemName( string a, string b )</p> <p>Get a count of how many distinct values the given enum has.</p> <p>int PersistenceGetEnumItemNameForIndex( string a, number b )</p> <p>Get a count of how many distinct values the given enum has.</p> <p>bool PersistenceEnumValueIsValid( string a, string b )</p> <p>Returns true if the given enum value contains the given value.</p> <p>int PersistenceGetArrayCount( string e )</p> <p>Get a count of how many elements the given item has.</p>"},{"location":"Modding/reference/respawn/native_server/playermelee/","title":"PlayerMelee","text":"<p>entity PlayerMeleeLungeConeTrace( entity plaer, int callback )</p> <p>Do a lunge cone trace returning the target closest to center of screen</p> <p>array PlayerMelee_FindVisibleEntitiesInCone( entity playerTitan ) <p>Returns an array of entities that are inside a cone and visible to the player</p> <p>table PlayerMelee_AttackTrace( entity player, float range, bool functionref( entity attacker, entity target ) isValidTargetFunc )</p> <p>Do a trace for potential melee targets in front of player.   Returns a table with keys <code>entity</code> and <code>position</code>, which is the hit entity and position</p> <p>bool PlayerMelee_IsExecutionReachable( entity attacker, entity target, number dist )</p> <p>bool PlayerMelee_IsServerSideEffects()</p> <p>void PlayerMelee_StartLagCompensateTarget( entity attacker, entity target )</p> <p>void PlayerMelee_StartLagCompensateTargetForLunge( entity attacker, entity target )</p> <p>void PlayerMelee_FinishLagCompensateTarget( entity attacker )</p>"},{"location":"Modding/reference/respawn/native_server/playlists/","title":"Playlists","text":"<p>int GetCurrentPlaylistGamemodesCount()</p> <p>int GetPlaylistGamemodesCount( string playlistName )</p> <p>string GetCurrentPlaylistGamemodeByIndex( int index )</p> <p>string GetPlaylistGamemodeByIndex( string playlistName, int modeIndex )</p> <p>string GetPlaylistGamemodeByIndexVar( string playlistName, int modeIndex, string index )</p> <p>string GetCurrentPlaylistGamemodeByIndexVar( int modeIndex, string unk1, bool unk2 )</p> <p>int GetCurrentPlaylistGamemodeByIndexMapsCount( int modeIndex )</p> <p>int GetPlaylistGamemodeByIndexMapsCount( string playlistName, int modeIndex )</p> <p>string GetCurrentPlaylistGamemodeByIndexMapByIndex( int modeIndex, int mapIndex )</p> <p>string GetPlaylistGamemodeByIndexMapByIndex( string playlistName, int modeIndex, int mapIndex )</p> <p>int GetCurrentPlaylistMapsCount()</p> <p>bool IsPrivateMatch()</p> <p>bool IsCoopMatch()</p> <p>bool GetLobbyTeamsShowAsBalanced()</p> <p>string GetGamemodeVarOrUseValue( string modeName, string gameModeVar, string useVar )</p> <p>int GetPlaylistCount()</p> <p>string GetPlaylistName( int index )</p> <p>string GetPlaylistVarOrUseValue( string playlistName, string plVar, string useVal )</p> <p>string GetPlaylistVarOrUseValueOriginal( string playlistName, string plVar, string useVal )</p> <p>string GetCurrentPlaylistName()</p> <p>var Code_GetCurrentPlaylistVar( string val )</p> <p>string Code_GetCurrentPlaylistVarOrUseValue( string val, string useVal )</p> <p>string GetCurrentPlaylistVarOrUseValueOriginal( string val, string useVal )</p> <p>int GetMaxPlayersForPlaylistName( string playlistName )</p> <p>int GetMaxTeamsForPlaylistName( string playlistName )</p> <p>void SetPlaylistVarOverride( string var, string val )</p> <p>void ClearPlaylistVarOverrides()</p> <p>void SetCurrentPlaylist( string playlistName )</p>"},{"location":"Modding/reference/respawn/native_server/precaching/","title":"Precaching","text":"<p>Before you can use any resource in the game it needs to be precached.</p> <p>bool WeaponIsPrecached( string weapon )</p> <p>bool ModelIsPrecached( asset model )</p> <p>void PrecacheWeapon( string weapon )</p> <p>Precache a weapon.</p> <p>void PrecacheModel( asset modelFile )</p> <p>Precache a model.</p> <p>void PrecacheMaterial( asset material )</p> <p>Precache a material</p> <p>void PrecacheImpactEffectTable( string effects )</p> <p>Precache an impact effects table.</p> <p>int PrecacheParticleSystem( asset particle )</p> <p>For more information about particles read the native particle documentation</p>"},{"location":"Modding/reference/respawn/native_server/recordedanimations/","title":"Recorded Animations","text":"<p>var LoadRecordedAnimation( asset recordedAnimPath )</p> <p>Loads an anim_recording asset generated by bakery.</p> <p>Can only load animations from rpaks.</p> <p>float GetRecordedAnimationDuration( var recordedAnim )</p> <p>Returns the duration in seconds of the recorded anim.</p> <p>vector GetRecordedAnimationStartForRefPoint( var recordedAnim, vector refOrg, vector refAng )</p> <p>Calculates the position of the first frame of the recorded animation if it were played so that its reference origin/angles line up with the given origin/angles.</p>"},{"location":"Modding/reference/respawn/native_server/rodeo/","title":"Rodeo &amp; Leeching","text":""},{"location":"Modding/reference/respawn/native_server/rodeo/#rodeo","title":"Rodeo","text":"<p>bool Rodeo_IsAttached( entity ent )</p> <p>void Rodeo_Detach( entity ent )</p> <p>void Rodeo_Allow( entity ent )</p> <p>void Rodeo_Disallow( entity ent )</p> <p>bool Rodeo_IsPreviousEntity( entity attacker, entity ent )</p> <p>void Rodeo_SetCooldown( entity ent, number cooldown )</p> <p>void Rodeo_OnFinishClimbOnAnimation( entity ent )</p> <p>This is to let code know the rodeoPilot has finished climbind on the rodeo and ready to fire</p>"},{"location":"Modding/reference/respawn/native_server/rodeo/#leeching","title":"Leeching","text":"<p>bool Leech_IsLeechable( entity ent )</p> <p>void Leech_SetLeechable( entity ent )</p> <p>void Leech_ClearLeechable( entity ent )</p>"},{"location":"Modding/reference/respawn/native_server/settings/","title":"Settings","text":""},{"location":"Modding/reference/respawn/native_server/settings/#player-settings","title":"Player Settings","text":"<p>var GetPlayerSettingsFieldForClassName( string className, string fieldName, var unknown = 0 )</p> <p>Returns the value for the requested field from the corresponding .set file.</p> <p>float GetPlayerSettingsFieldForClassName_Health( string className )</p> <p>Returns the value for the default health field from the corresponding .set file.</p> <p>float GetPlayerSettingsFieldForClassName_HealthShield( string className )</p> <p>Returns the value for the default health shield field from the corresponding .set file.</p> <p>float GetPlayerSettingsFieldForClassName_HealthDoomed( string className )</p> <p>Returns the value for the default health doomed field from the corresponding .set file.</p> <p>float GetPlayerSettingsFieldForClassName_HealthPerSegment( string className )</p> <p>table GetSettingsForPlayer_DodgeTable( entity player )</p> <p>Returns a table with all the dodge related active settings for a given player</p> <p>int PlayerSettingsNameToIndex( string className )</p> <p>string PlayerSettingsIndexToName( int settingsNum )</p> <p>asset GetPlayerSettingsAssetForClassName( string className, fieldName )</p> <p>Returns the value for the requested field from the corresponding .set file.</p> <p>var Dev_GetPlayerSettingByKeyField_Global( string a, string b )</p> <p>var Dev_GetPlayerSettingAssetByKeyField_Global( string a, string b )</p>"},{"location":"Modding/reference/respawn/native_server/settings/#weapon-settings","title":"Weapon Settings","text":"<p>var GetWeaponInfoFileKeyField_Global( string a, string b )</p> <p>var GetWeaponInfoFileKeyField_WithMods_Global( string weaponName, array modArray, string key ) <p>Given a weapon name, a list of weapon mods to apply, and key, returns the value of that field in that weapons info file.</p> <p>array GetWeaponMods_Global( string weaponName ) <p>Given a weapon name, returns a list of the mods available on that weapon</p> <p>void SetBodyGroupsForWeaponConfig( entity ent, string weaponName, array modArray ) <p>asset GetWeaponInfoFileKeyFieldAsset_Global( string weaponName, string key )</p> <p>Given a weaon name and key, resolves a string key to its value in that weapons info file. assumes no mods set.</p> <p>asset GetWeaponInfoFileKeyFieldAsset_WithMods_Global( string weaponName, array modArray, string key ) <p>Given a weapon name, a list of weapon mods to apply and key, returns the value of that field in that weapons info file.</p>"},{"location":"Modding/reference/respawn/native_server/settings/#ai-settings","title":"AI Settings","text":"<p>int GetAISettingHullType( string aiSettingsName )</p> <p>var Dev_GetAISettingAssetByKeyField_Global( string a, string b )</p> <p>var Dev_GetAISettingByKeyField_Global( string a, string b )</p>"},{"location":"Modding/reference/respawn/native_server/smartammo/","title":"Smart Ammo","text":"<p>void SetCustomSmartAmmoTarget( entity ent, bool target )</p> <p>void SetPreventSmartAmmoLock( entity ent, bool lockable )</p> <p>void SetSmartAmmoLockFromTitansOnly( entity ent, bool titanLockOnly )</p> <p>void SmartAmmo_SetCustomFractionSource( entity ent, entity src, number fraction )</p> <p>void SmartAmmo_ClearCustomFractionSource( entity ent, entity src )</p> <p>float SmartAmmo_GetCustomFractionSource( entity ent, entity src )</p> <p>int SmartAmmo_GetMaxTargetedBurst( entity weapon )</p> <p>float SmartAmmo_GetTargetingTime( entity ent, entity src )</p> <p>int SmartAmmo_GetTargetMaxLocks( entity ent, entity src )</p> <p>bool SmartAmmo_IsTrackingEntity( entity weapon, entity target )</p> <p>bool SmartAmmo_IsValidTarget( entity weapon, entity target )</p>"},{"location":"Modding/reference/respawn/native_server/sounds/","title":"Sounds","text":""},{"location":"Modding/reference/respawn/native_server/sounds/#playing-sounds","title":"Playing Sounds","text":"<p>void EmitSoundOnEntity( entity ent, string sound )</p> <p>void EmitSoundOnEntityNoSave( entity ent, string sound )</p> <p>void EmitSoundOnEntityAfterDelay( entity ent, string sound, number delay )</p> <p>void EmitSoundOnEntityOnlyToPlayerWithSeek( entity ent, entity reciever, string sound, number duration_maybe )</p> <p>void EmitSoundOnEntityExceptToPlayerWithSeek( entity ent, entity reciever, string sound, number duration_maybe )</p> <p>void EmitSoundOnEntityToTeam( entity ent, string sound, int team )</p> <p>void EmitSoundOnEntityToEnemies( entity ent, string sound, int team )</p> <p>void EmitSoundAtPosition( int team, vector origin, string sound )</p> <p>void EmitSoundAtPositionOnlyToPlayer( int team, vector origin, entity player, string sound )</p> <p>void EmitSoundAtPositionExceptToPlayer( int team, vector origin, entity player, strign sound )</p> <p>void StopSoundOnEntity( entity ent, string sound )</p> <p>void StopSoundAtPosition( vector pos, string sound )</p> <p>void FadeOutSoundOnEntity( entity ent, string sound, number fadeOut )</p> <p>void EmitSoundOnEntityOnlyToPlayer( entity ent, entity reciever, string sound )</p> <p>void EmitSoundOnEntityOnlyToPlayerWithFadeIn( entity ent, entity reciever, string sound, number fadeIn )</p> <p>void EmitSoundOnEntityExceptToPlayer( entity ent, entity exception, string sound )</p> <p>void EmitSoundOnEntityExceptToPlayerNotPredicted( entity ent, entity exception, string sound )</p> <p>bool DoesAliasExist( string dialogueAlias )</p> <p>int GetSoundTags( string sound )</p> <p>void SetRapidShiftOffset( number offset )</p>"},{"location":"Modding/reference/respawn/native_server/sounds/#ai-sounds","title":"AI Sounds","text":"<p>Sounds the AI can react to</p> <p>void EmitAISound( int soundFlags, int contextFlags, vector pos, float radius, float duration )</p> <p>Create a new sound event that AI can response to.</p> <p>void EmitAISoundWithOwner( entity owner, int soundFlags, int contextFlags, vector pos, float radius, float duration )</p> <p>Create a sound event that AI can respond to, specifying the owner of the sound.</p> <p>void EmitAISoundToTarget( entity target, int soundFlags, int contextFlags, vector pos, float radius, float duration )</p> <p>Create a sound event that AI can respond to, specifying who the sound should target.</p> <p>void EmitAISoundWithOwnerToTarget( entity ownerEnt, entity targetEnt, int soundFlags, int contextFlags, vectorPos, float radius, float duration )</p> <p>Create a sound event that AI can respond to, specifying who the sound should target, and the owner of the sound.</p>"},{"location":"Modding/reference/respawn/native_server/sp/","title":"Singleplayer","text":""},{"location":"Modding/reference/respawn/native_server/sp/#savegames","title":"SaveGames","text":"<p>void SaveGame_Create( string saveName, int saveVersion, int start_point )</p> <p>Do a save.</p> <p>void SaveGame_CreateWithCommitDelay( string saveName, int saveVersion, float delay, int trycount )</p> <p>Do a save.</p> <p>Will call back <code>bool CodeCallback_SaveGameIsSafeToCommit()</code> to validate if it is ok to commit the save file.</p> <p>void SaveGame_Commit()</p> <p>If there is an outstanding save commit, accept it asap.</p> <p>void SaveGame_Reject()</p> <p>If there is an outstanding save commit, reject it asap.</p> <p>void SaveGame_Load( string saveName )</p> <p>Do a restore.</p> <p>bool SaveGame_IsValid( string saveName )</p> <p>Checks if a file is ok to use.</p> <p>int SaveGame_GetVersion( string saveName )</p> <p>Return the script version of a save load.</p> <p>int SaveGame_GetStartPoint( string saveName )</p> <p>Return the script start point of a save load.</p> <p>string SaveGame_GetMapName( string saveName )</p> <p>Return the map name of a save load.</p>"},{"location":"Modding/reference/respawn/native_server/sp/#level-loading","title":"Level Loading","text":"<p>void ChangeLevel( string mapName, LevelTransitionStruct transitionStruct )</p> <p>Loads a new level. The data in <code>transitionStruct</code> can be read in the next level with <code>GetLevelTransitionStruct()</code>.</p> <p>LevelTransitionStruct ornull GetLevelTransitionStruct()</p> <p>Reads the transition data set by <code>ChangeLevel()</code> on the previous map.   Return <code>null</code> if this is the first map or the previous map didn't supply any data.</p>"},{"location":"Modding/reference/respawn/native_server/sp/#timeshift","title":"Timeshift","text":"<p>void SetTimeshiftOfDay_Night()</p> <p>void SetTimeshiftOfDay_Day()</p> <p>void SetTimeshiftArmDeviceSkin( int skinIndex )</p>"},{"location":"Modding/reference/respawn/native_server/sp/#bt-loadouts","title":"BT Loadouts","text":"<p>void SetBTLoadoutUnlocked( int loadout )</p> <p>void SetBTLoadoutsUnlockedBitfield( int unlockedBits )</p> <p>int GetBTLoadoutsUnlockedBitfield()</p> <p>bool IsBTLoadoutUnlocked( int loadout )</p>"},{"location":"Modding/reference/respawn/native_server/spawnpoints/","title":"Spawnpoints","text":""},{"location":"Modding/reference/respawn/native_server/spawnpoints/#getters","title":"Getters","text":"<p>void SpawnPoints_SetRatingMultipliers_Enemy( number a1, number a2, number a3, number a4 )</p> <p>void SpawnPoints_SetRatingMultipliers_Friendly( number a1, number a2, number a3, number a4 )</p> <p>void SpawnPoints_SetRatingMultiplier_PetTitan( number muliplier )</p> <p>array SpawnPoints_GetPilot() <p>Get pilot spawn points</p> <p>array SpawnPoints_GetTitan() <p>Get titan spawn points</p> <p>array SpawnPoints_GetDropPod() <p>Get droppod spawn points</p> <p>array SpawnPoints_GetPilotStart( int team ) <p>Get pilot start spawn points for a team</p> <p>array SpawnPoints_GetTitanStart( int team ) <p>Get titan start spawn points for a team</p> <p>array SpawnPoints_GetDropPodStart( int team ) <p>Get droppod start spawn for a team</p>"},{"location":"Modding/reference/respawn/native_server/spawnpoints/#sorting","title":"Sorting","text":"<p>void SpawnPoints_SortPilot()</p> <p>void SpawnPoints_SortTitan()</p> <p>void SpawnPoints_SortDropPod()</p> <p>void SpawnPoints_SortPilotStart()</p> <p>void SpawnPoints_SortTitanStart()</p> <p>void SpawnPoints_SortDropPodStart()</p>"},{"location":"Modding/reference/respawn/native_server/spawnpoints/#ratings","title":"Ratings","text":"<p>void SpawnPoints_InitRatings( entity point, number rating )</p> <p>void SpawnPoints_DiscardRatings()</p>"},{"location":"Modding/reference/respawn/native_server/statuseffects/","title":"Status Effects","text":"<p>!!! cpp-function \"int StatusEffect_AddTimed( entity ent, int eStatusEffect, float severity01, float \"duration, float easeOut )</p> <p>Adds a status effect that will stop automatically after a given time.</p> <p>int StatusEffect_AddEndless( entity ent, int eStatusEffect, float severity01 )</p> <p>Adds a status effect</p> <p>bool StatusEffect_Stop( entity ent, int effectHandle )</p> <p>Stops a status effect given its handle (return value of StatusEffect_AddTimed or StatusEffect_AddEndless).</p> <p>int StatusEffect_StopAll( entity ent, int eStatusEffect )</p> <p>Stops all status effects of a given type. Returns the number that were stopped.</p> <p>float StatusEffect_Get( entity ent, int eStatusEffect )</p> <p>array StatusEffect_GetAll( entity ent )"},{"location":"Modding/reference/respawn/native_server/stryder/","title":"Stryder","text":"<p>Stryder is in a sense like the masterserver Northstar uses but for vanilla. It handles player data, matchmaking, servers and more.</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#lobbies","title":"Lobbies","text":"<p>Note</p> <p>Not exclusive to vanilla lobbies. These may be used in northstar as well</p> <p>Methods for pregame lobbies.</p> <p>string GetLobbyType()</p> <p>entity GetPlayerByIndex( number index )</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#parties","title":"Parties","text":"<p>void SendPlayersToPartyScreen( var unk1 )</p> <p>Sends a group of players off to the party screen, possibly by allocating a server first</p> <p>void SendAllPlayersBackToPartyScreen()</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#stryder-api","title":"Stryder API","text":"<p>Methods for communication with the vanilla master server</p> <p>void SendTrainingGauntletStatsToBackend( entity player, number numRunsBeforeBeatRequiredTime, number numChallengeRuns, number bestTime )</p> <p>bool IsMatchmakingServer()</p> <p>bool ShouldSendDevStats()</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#pin","title":"PIN","text":"<p>Some proprietary telemetry system used by respawn.</p> <p>void CreatePINTelemetryHeader( int versionMajor, int versionMinor, table keyValuePairs )</p> <p>void AddPINTelemetryEvent( string eventName, table headerKeyValueParis, table bodyKeyValuePairs )</p> <p>string GetPINPlatformName()</p> <p>Gets the platform name the way PIN likes it.</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#matchmaking","title":"Matchmaking","text":"<p>void BeginPrivateMatchSearchForPlayer( entity player )</p> <p>void MatchmakePlayer( entity player )</p> <p>void AbortMatchSearchesForPlayer( string unk1, entity player )</p> <p>string GetDatacenterName()</p> <p>Gets the name of this server's datacenter</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#balancing","title":"Balancing","text":"<p>void MarkTeamsAsBalanced_On()</p> <p>void MarkTeamsAsBalanced_Off()</p>"},{"location":"Modding/reference/respawn/native_server/time/","title":"Time","text":"<p>For async code read Threads, Signals and Flags.</p> <p>float Time()</p> <p>Get ms since the VM has been started</p> <p>void TimerStart()</p> <p>float TimerStop()</p> <p>Does what it says on the tin</p> <p>int GetUnixTimestamp()</p> <p>float FrameTime()</p> <p>float PlatformTime()</p> <p>float IntervalPerTick()</p> <p>int FrameCount()</p>"},{"location":"Modding/reference/respawn/native_server/weapons/","title":"Weapon Utilities","text":""},{"location":"Modding/reference/respawn/native_server/weapons/#explosions","title":"Explosions","text":"<p>void Explosion( vector center, entity attacker, entity inflictor, number damage, number damageHeavyArmor, number innerRadius, number outerRadius, int flags, vector projectileLaunchOrigin, number explosionForce, int scriptDamageFlags, int scriptDamageSourceIdentifier, string impactEffectTableName )</p> <p>\"Creates an explosion. Does damage in an area, moves physics objects, plays effects.</p> <p>void Explosion_DamageDefSimple( int damageDefID, vector center, entity attacker, entity inflictor, vector projectileLaunchOrigin )</p> <p>Creates an explosion. Does damage in an area, moves physics objects, plays effects.</p> <p>void Explosion_DamageDef( int damageDefID, vector center, entity attacker, entity inflictor, number damage, number damageHeavyArmor, vector innerRadius, vector outerRadius, vector projectileLaunchOrigin )</p> <p>Same as Explosion_DamageDefSimple but specify damage and radius.</p> <p>void RadiusDamage( vector center, entity attacker, entity, inflictor, number damage, number damageHeavyArmor, number innerRadius, number outerRadius, int flags, number distanceFromAttacker, number explosionForce, int scriptDamageFlags, int scriptDamageSourceIdentifier )</p> <p>Does silent, invisible damage in a spherical area.</p> <p>void RadiusDamage_DamageDefSimple( int damageDefID, vector center, entity attacker, entity inflictor,  number distanceFromAttacker )</p> <p>Does silent, invisible damage in a spherical area.</p> <p>void RadiusDamage_DamageDef( int damageDefId, vector center, entity attacker, entity inflictor, number damager, number damageHeavyArmor, number innerRadius, number outerRadius, number distanceFromAttacker )</p> <p>Same as RadiusDamage_DamageDefSimple but specify damage and radius.</p>"},{"location":"Modding/reference/respawn/native_server/weapons/#weapon-utils","title":"Weapon Utils","text":"<p>void Weapon_SetDespawnTime( number time )</p> <p>int GetImpactEffectTable( string weapon )</p> <p>float CalcWeaponDamage( entity owner, entity target, entity weapon, number distanceToTarget, int extraMods )</p>"},{"location":"Modding/repak/","title":"Asset Types","text":""},{"location":"Modding/repak/map/","title":"Map Files","text":""},{"location":"Modding/repak/map/#examples","title":"Examples:","text":""},{"location":"Modding/repak/map/#1-bare-minimum-no-assets","title":"1. Bare Minimum - No Assets","text":"<p><code>example1.json</code></p> <pre><code>    {\n        \"version\": 7\n    }\n</code></pre> <pre><code>    root\n    \u251c\u2500\u2500 RePak.exe\n    \u251c\u2500\u2500 example1.json\n    \u2514\u2500\u2500 build\n        \u2514\u2500 example1.rpak\n</code></pre> <p>Note</p> <p>This example map file is honestly pretty useless. It has no assets, because there is no <code>files</code> field.</p> <p>It also will have the name <code>new.rpak</code> and will be created in the <code>./build</code> folder.</p>"},{"location":"Modding/repak/map/#2-single-texture-single-starpak","title":"2. Single Texture + Single Starpak","text":"<p><code>example2.json</code></p> <pre><code>    {\n        \"name\": \"example2\",\n        \"assetsDir\": \"../depot\",\n        \"outputDir\": \"../output\",\n        \"version\": 7,\n        \"starpakPath\": \"example2.starpak\",\n        \"files\":\n        [\n            {\n                \"$type\": \"txtr\",\n                \"path\": \"textures/models/my_texture\"\n            }\n        ]\n    }\n</code></pre> <pre><code>    root\n    \u251c\u2500\u2500 RePak.exe\n    \u251c\u2500\u2500 maps\n    |   \u2514\u2500 example2.json\n    \u251c\u2500\u2500 depot\n    |   \u2514\u2500 textures\n    |       \u2514\u2500 models\n    |           \u2514\u2500 my_texture.dds\n    \u2514\u2500\u2500 output\n        \u251c\u2500 example2.starpak\n        \u2514\u2500 example2.rpak\n</code></pre> <p>Note</p> <p>This example map file creates an RPak named <code>example2.rpak</code> which contains 1 texture asset. This texture will have it's higher resolution mip levels stored in example2.starpak</p> <p>Note</p> <p>The texture will replace any vanilla textures that have the same path. ( <code>textures/models/my_texture</code> )</p> <p>This is useful for creating basic skins and camos.</p>"},{"location":"Modding/repak/map/#3-multiple-textures-multiple-starpaks","title":"3. Multiple Textures + Multiple Starpaks","text":"<p><code>example3.json</code></p> <pre><code>    {\n        \"name\": \"example3\",\n        \"assetsDir\": \"../depot\",\n        \"outputDir\": \"../output\",\n        \"version\": 7,\n        \"starpakPath\": \"example3.starpak\",\n        \"files\":\n        [\n            {\n                \"$type\": \"txtr\",\n                \"path\": \"textures/models/my_texture_col\"\n            },\n            {\n                \"$type\": \"txtr\",\n                \"path\": \"textures/models/my_texture_nml\"\n            },\n            {\n                \"$type\": \"txtr\",\n                \"starpakPath\": \"example3-spc.starpak\",\n                \"path\": \"textures/models/my_texture_spc\"\n            }\n        ]\n    }\n</code></pre> <pre><code>    root\n    \u251c\u2500\u2500 RePak.exe\n    \u251c\u2500\u2500 maps\n    |   \u2514\u2500 example3.json\n    \u251c\u2500\u2500 depot\n    |   \u2514\u2500 textures\n    |       \u2514\u2500 models\n    |           \u251c\u2500 my_texture_col.dds\n    |           \u251c\u2500 my_texture_nml.dds\n    |           \u2514\u2500 my_texture_spc.dds\n    \u2514\u2500\u2500 output\n        \u251c\u2500 example3.starpak\n        \u251c\u2500 example3-spc.starpak\n        \u2514\u2500 example3.rpak\n</code></pre> <p>Note</p> <p>This example map file creates an RPak named <code>example3.rpak</code> which contains 3 texture assets. These textures each have their higher resolution mip levels stored in starpaks.</p> <p><code>my_texture_col</code> and <code>mp_texture_nml</code> use <code>example3.starpak</code>, as they do not specify their own <code>starpakPath</code>. This makes them use the default <code>starpakPath</code> that is defined at the file scope, instead of in the individual textures.</p> <p><code>my_texture_spc</code> uses <code>example3-spc.starpak</code>, as it specifies it's own <code>starpakPath</code>.</p> <p>Note</p> <p>This RPak is a good example of a skin that would normally require the skin tool to install. The advantage of this method is that the skin can be uninstalled or temporarily disabled when packed as a mod.</p>"},{"location":"Modding/repak/map/#structure","title":"Structure:","text":""},{"location":"Modding/repak/map/#name","title":"<code>name</code>","text":"<p>The <code>name</code> field of a map file determines the name of the resulting RPak.</p> <p>The <code>name</code> is appended with <code>.rpak</code> and defaults to <code>new</code> if no <code>name</code> is provided. This results in a default RPak called <code>new.rpak</code>.</p> <p>Warning</p> <p>In the event that no <code>name</code> is provided in the map file, RePak will output the following warning to the console:</p> <p><code>Map file should have a 'name' field containing the string name for the new rpak, but none was provided. Defaulting to 'new.rpak' and continuing...\\n</code></p>"},{"location":"Modding/repak/map/#assetsdir","title":"<code>assetsDir</code>","text":"<p>The <code>assetsDir</code> field of a map file determines the root path which the program combines with the <code>path</code> for assets in order to find the correct file. This path may be a relative path, or an absolute path.</p> <p>The <code>assetsDir</code> provided in the map file is appended with a slash ( <code>\\</code> ) if necessary</p> <p>Warning</p> <p>If no <code>assetsDir</code> is provided, it defaults to the working directory ( <code>.\\</code> ) as well as outputting the following warning to the console:</p> <p><code>No assetsDir field provided. Assuming that everything is relative to the working directory.\\n</code></p>"},{"location":"Modding/repak/map/#outputdir","title":"<code>outputDir</code>","text":"<p>The <code>outputDir</code> field of a map file determines the folder that the program will write the RPak and StaRPak files to once they have been created. This path may be a relative path, or an absolute path.</p> <p>The <code>outputDir</code> provided in the map file is appended with a slash ( <code>\\</code> ) if necessary</p> <p>If no <code>outputDir</code> is provided in the map file, RePak defaults to <code>.\\build\\</code></p>"},{"location":"Modding/repak/map/#version","title":"<code>version</code>","text":"<p>The <code>version</code> field of a map file determines the RPak version that RePak will create.</p> <p>Error</p> <p>If no <code>version</code> field is provided, RePak will output the following error and the program will stop:</p> <p><code>Map file doesn't specify an RPak version\\nUse 'version: 7' for Titanfall 2 or 'version: 8' for Apex\\n</code></p> <p>Error</p> <p>If an invalid <code>version</code> field is provided, RePak will output the following error and the program will stop:</p> <p><code>Invalid RPak version specified\\nUse 'version: 7' for Titanfall 2 or 'version: 8' for Apex\\n</code></p>"},{"location":"Modding/repak/map/#list-of-known-version-values","title":"List of known <code>version</code> values:","text":"<ul> <li><code>6</code>: Titanfall 2: Tech Test [UNSUPPORTED]</li> <li><code>7</code>: Titanfall 2</li> <li><code>8</code>: Apex Legends</li> </ul>"},{"location":"Modding/repak/map/#starpakpath","title":"<code>starpakPath</code>","text":"<p>The <code>starpakPath</code> field of a map file determines the default starpak path for textures (and other streamed assets) to use.</p> <p>Note</p> <p>If the starpak name ends in <code>_hotswap.starpak</code> (e.g. <code>my_thing_hotswap.starpak</code>) then Titanfall 2 will view it as optional. This allows the starpak to be moved, removed, or replaced while the game is running and streaming the texture. This can be useful for debugging.</p> <p>Note</p> <p>RePak will not throw any errors if no <code>starpakPath</code> field is specified, however the individual textures may throw errors if they do not have a <code>starpakPath</code> specified</p>"},{"location":"Modding/repak/map/#files","title":"<code>files</code>","text":"<p>The <code>files</code> field of a map file is an array of JSON objects, each one representing an RPak asset.</p> <p>RePak will not throw any errors if no <code>files</code> field is specified, however the resulting RPak will contain no assets, rendering it useless.</p>"},{"location":"Modding/repak/assets/datatable/","title":"Datatables","text":""},{"location":"Modding/repak/assets/datatable/#examples","title":"Examples:","text":""},{"location":"Modding/repak/assets/datatable/#1-example-datatable-asset","title":"1. Example Datatable Asset","text":"<pre><code>    {\n        \"$type\": \"dtbl\",\n        \"path\": \"datatable/custom_datatable\",\n    }\n</code></pre>"},{"location":"Modding/repak/assets/datatable/#2-example-datatable-csv-file","title":"2. Example Datatable <code>.csv</code> File","text":"<code>setFile</code> <code>titanRef</code> <code>difficulty</code> <code>isPrime</code> <code>coreBuildingIcon</code> <code>titan_buddy</code> <code>bt</code> <code>1</code> <code>0</code> <code>rui\\titan_loadout\\core\\titan_core_burst_core</code> <code>titan_atlas_tracker</code> <code>tone</code> <code>2</code> <code>0</code> <code>rui\\titan_loadout\\core\\titan_core_salvo</code> <code>titan_ogre_meteor</code> <code>scorch</code> <code>3</code> <code>0</code> <code>rui\\titan_loadout\\core\\titan_core_flame_wave</code> <code>string</code> <code>string</code> <code>int</code> <code>bool</code> <code>asset</code>"},{"location":"Modding/repak/assets/datatable/#asset-structure","title":"Asset Structure:","text":""},{"location":"Modding/repak/assets/datatable/#type","title":"<code>$type</code>","text":"<p>For an asset to be a datatable asset, the <code>$type</code> field must be <code>\"dtbl\"</code>.</p>"},{"location":"Modding/repak/assets/datatable/#path","title":"<code>path</code>","text":"<p>The <code>path</code> field of a datatable asset is used to determine the location in the RPak's <code>assetsDir</code> that the <code>.csv</code> file is in.</p> <p>Warning</p> <p>If the .csv file has no columns, RePak will output the following warning to the console, before skipping the asset. <code>Attempted to add dtbl asset with no columns. Skipping asset...</code></p> <p>Warning</p> <p>If the .csv file has fewer than 2 rows, RePak will output the following warning to the console, before skipping the asset. <code>Attempted to add dtbl asset with invalid row count. Skipping asset... DTBL    - CSV must have a row of column types at the end of the table</code></p>"},{"location":"Modding/repak/assets/datatable/#file-structure","title":"File Structure:","text":"<p>The file must be a valid <code>.csv</code> file, with at least 2 rows, and at least 1 column.</p> <p>The final row of the <code>.csv</code> determines the type of each column, and each entry must be one of the following values:</p> <ul> <li><code>bool</code> - either <code>0</code> (false) or <code>1</code> (true)</li> <li><code>int</code> - any integer value</li> <li><code>float</code> - any float value</li> <li><code>vector</code> - three float values in the format <code>&lt;val1,val2,val3&gt;</code></li> <li><code>string</code> - any string value</li> <li><code>asset</code> - any string value (must be a valid asset)</li> <li><code>assetnoprecache</code> - any string value (must be a valid asset)</li> </ul>"},{"location":"Modding/repak/assets/material/","title":"Materials - TODO","text":""},{"location":"Modding/repak/assets/material/#examples","title":"Examples:","text":""},{"location":"Modding/repak/assets/material/#asset-structure","title":"Asset Structure:","text":""},{"location":"Modding/repak/assets/texture/","title":"Textures","text":"<p>Textures are the foundation of some RPak asset types. They cannot be used directly by the game, but are instead referenced by other asset types which the game can use by itself.</p> <p>The image used by a texture must be in the .dds format and must be in one of the following compression types:</p> <ul> <li>BC1 SRGB</li> <li>BC2 SRGB</li> <li>BC3 SRGB</li> <li>BC7</li> <li>BC7 SRGB</li> <li>DXT1</li> <li>DXT3</li> <li>DXT5</li> <li>BC4U</li> <li>BC5U UNORM</li> </ul> <p>Warning</p> <p>SRGB DDS compression types are preferred, as they can prevent the texture's colour from looking \"washed out\"</p>"},{"location":"Modding/repak/assets/texture/#examples","title":"Examples:","text":""},{"location":"Modding/repak/assets/texture/#1-basic-texture-asset-no-streaming","title":"1. Basic Texture Asset - No streaming","text":"<pre><code>    {\n        \"$type\": \"txtr\",\n        \"path\": \"textures/models/humans/test_texture\",\n        \"disableStreaming\": true\n    }\n</code></pre> <p>Note</p> <p>The image file in this texture asset will be called <code>test_texture.dds</code> and will be at <code>&lt;ASSETSDIR&gt;/textures/models/humans/test_texture.dds</code></p> <p>Note</p> <p>Because <code>disableStreaming</code> is <code>true</code>, this texture will not be stored in a .starpak file, and all mip levels will be stored in the .rpak file</p>"},{"location":"Modding/repak/assets/texture/#2-streamed-texture-asset","title":"2. Streamed Texture Asset","text":"<pre><code>    {\n        \"$type\": \"txtr\",\n        \"path\": \"textures/models/humans/test_texture_2\",\n        \"starpakPath\": \"test_texture_2.starpak\"\n    }\n</code></pre> <p>Note</p> <p>The image file in this texture asset will be called <code>test_texture_2.dds</code> and will be at <code>&lt;ASSETSDIR&gt;/textures/models/humans/test_texture_2.dds</code></p> <p>Note</p> <p>Because <code>disableStreaming</code> is not present, this texture will have it's higher resolution mip levels stored in <code>test_texture_2.starpak</code>, as defined by the <code>starpakPath</code>. It will not use the default <code>starpakPath</code> if one is defined outside of the <code>files</code> array</p>"},{"location":"Modding/repak/assets/texture/#asset-structure","title":"Asset Structure:","text":""},{"location":"Modding/repak/assets/texture/#type","title":"<code>$type</code>","text":"<p>For an asset to be a texture asset, the <code>$type</code> field must be <code>\"txtr\"</code>.</p>"},{"location":"Modding/repak/assets/texture/#path","title":"<code>path</code>","text":"<p>The <code>path</code> field of a texture asset is used to determine the location in the RPak's <code>assetsDir</code> that the image file is in.</p> <p>It is also used as the asset's unique identifier, allowing other assets to reference and use it.</p> <p>The <code>path</code> field must start with <code>textures/</code> and must not end with a file extension.</p> <p>Error</p> <p>If RePak is unable to locate a file at the given <code>path</code>, it will output the following error to the console:</p> <p><code>Failed to find texture source file %s. Exiting...</code> where <code>%s</code> is the <code>path</code> field of the texture.</p> <p>Error</p> <p>If the file at the given <code>path</code> is not a .dds file, RePak will output the following error to the console:</p> <p><code>Attempted to add txtr asset '%s' that was not a valid DDS file (invalid magic).</code> where <code>%s</code> is the <code>path</code> field of the texture.</p> <p>Error</p> <p>If an unsupported .dds compression type is used, RePak will output the following error to the console:</p> <p><code>Attempted to add txtr asset '%s' that was not using a supported DDS type. Exiting...</code> where <code>%s</code> is the <code>path</code> field of the texture.</p>"},{"location":"Modding/repak/assets/texture/#starpakpath","title":"<code>starpakPath</code>","text":"<p>The <code>starpakPath</code> field of a texture asset determines the path of the starpak in which the higher resolution mip levels should be stored.</p> <p>If no <code>starpakPath</code> value is specified, RePak will default to using the default <code>starpakPath</code>, defined at file scope in the map file.</p> <p>The <code>starpakPath</code> field should be a string, and importantly, should end in <code>.starpak</code>.</p> <p>Note</p> <p>If the starpak name ends in <code>_hotswap.starpak</code> (e.g. <code>my_thing_hotswap.starpak</code>) then Titanfall 2 will view it as optional. This allows the starpak to be moved, removed, or replaced while the game is running and streaming the texture. This can be useful for debugging.</p> <p>Error</p> <p>If the <code>starpakPath</code> is not present, and no <code>starpakPath</code> is defined at file scope, RePak will output the following error to the console.</p> <p><code>attempted to add asset '%s' as a streaming asset, but no starpak files were available. to fix: add 'starpakPath' as an rpak-wide variable or: add 'starpakPath' as an asset specific variable</code> where %s is the <code>path</code> of the texture asset</p>"},{"location":"Modding/repak/assets/texture/#disablestreaming","title":"<code>disableStreaming</code>","text":"<p>The <code>disableStreaming</code> field of a texture asset determines if the texture should use a starpak to store the higher resolution mip levels.</p> <p>It should be a boolean value, with <code>true</code> disabling the use of a starpak,</p> <p><code>disableStreaming</code> defaults to <code>false</code> if it is not present.</p>"},{"location":"Modding/repak/assets/uiatlas/","title":"UI Image Atlases","text":"<p>UI Image Atlases (<code>uimg</code>) are what the game uses to store multiple UI assets, they reference a single texture asset, known as the <code>atlas</code> and have an array of <code>textures</code> which defines the different usable UI assets.</p>"},{"location":"Modding/repak/assets/uiatlas/#examples","title":"Examples:","text":""},{"location":"Modding/repak/assets/uiatlas/#1-basic-ui-image-atlas-with-2-textures","title":"1. Basic UI Image Atlas with 2 Textures","text":"<pre><code>    {\n        \"$type\":\"uimg\",\n        \"path\":\"rui/atlas/example1\",\n        \"atlas\":\"rui/example1\",\n        \"textures\":\n        [\n            {\n                \"path\":\"rui/example1/texture1\",\n                \"width\":128,\n                \"height\":128,\n                \"posX\":0,\n                \"posY\":0\n            },\n            {\n                \"path\":\"rui/example1/texture2\",\n                \"width\":128,\n                \"height\":128,\n                \"posX\":128,\n                \"posY\":0\n            }\n        ]\n    }\n</code></pre> <p>Note</p> <p>This UI Image Atlas expects a texture with the path of <code>rui/example1</code> which is at least 256x128</p>"},{"location":"Modding/repak/assets/uiatlas/#2-full-map-file-with-a-ui-image-atlas","title":"2. Full Map File With a UI Image Atlas","text":"<pre><code>    {\n        \"name\":\"blue_fire\",\n        \"assetsDir\":\"../depot\",\n        \"outputDir\":\"../rpaks\",\n        \"version\": 7,\n        \"files\":[\n            {\n                \"$type\":\"txtr\",\n                \"path\":\"rui/blue_fire\"\n            },\n            {\n                \"$type\":\"uimg\",\n                \"path\":\"rui/atlas/blue_fire\",\n                \"atlas\":\"rui/blue_fire\",\n                \"textures\":[\n                    {\n                        \"path\":\"blue_fire/hud/flame_wall\",\n                        \"width\":128,\n                        \"height\":128,\n                        \"posX\":0,\n                        \"posY\":0\n                    },\n                    {\n                        \"path\":\"blue_fire/menu/flame_wall\",\n                        \"width\":128,\n                        \"height\":128,\n                        \"posX\":128,\n                        \"posY\":0\n                    },\n                    {\n                        \"path\":\"blue_fire/hud/flame_shield\",\n                        \"width\":128,\n                        \"height\":128,\n                        \"posX\":0,\n                        \"posY\":128\n                    },\n                    {\n                        \"path\":\"blue_fire/menu/flame_shield\",\n                        \"width\":128,\n                        \"height\":128,\n                        \"posX\":128,\n                        \"posY\":128\n                    }\n                ]\n            }\n        ]\n    }\n</code></pre> <p>Note</p> <p>This map file is a shortened version of the one used in EXRILL's Blue Fire mod</p>"},{"location":"Modding/repak/assets/uiatlas/#asset-structure","title":"Asset Structure:","text":""},{"location":"Modding/repak/assets/uiatlas/#type","title":"<code>$type</code>","text":"<p>For an asset to be a UI Image Atlas asset, the <code>$type</code> field must be <code>\"uimg\"</code>.</p>"},{"location":"Modding/repak/assets/uiatlas/#path","title":"<code>path</code>","text":"<p>The <code>path</code> field for a UI Image Atlas asset is mostly unused, and as such can be set to almost any value. It is used when logging information about the asset.</p>"},{"location":"Modding/repak/assets/uiatlas/#atlas","title":"<code>atlas</code>","text":"<p>The <code>atlas</code> field for a UI Image Atlas asset determines which texture asset it will use.</p> <p>Error</p> <p>If the uimg asset doesn't contain a valid <code>atlas</code> field, RePak will output one of the following errors to the console:</p> <p><code>Required field 'atlas' not found for uimg asset '%s'. Exiting...</code></p> <p><code>'atlas' field is not of required type 'string' for uimg asset '%s'. Exiting...</code></p> <p>where <code>%s</code> is the <code>path</code> field of the UI Image Atlas</p> <p>Error</p> <p>If the texture asset cannot be found, RePak will output the following message to the console before exiting:</p> <p><code>Atlas asset was not found when trying to add uimg asset '%s'. Make sure that the txtr is above the uimg in your map file. Exiting...\"</code></p> <p>where <code>%s</code> is the <code>path</code> field of the UI Image Atlas</p>"},{"location":"Modding/repak/assets/uiatlas/#textures","title":"<code>textures</code>","text":"<p>The <code>textures</code> array in a UI Image Atlas asset defines the different UI textures that the atlas contains. Any number of UI textures may be contained within one UI Image Atlas.</p>"},{"location":"Modding/repak/assets/uiatlas/#path_1","title":"<code>path</code>","text":"<p>An entry in the <code>textures</code> array must have a <code>path</code> field, as the game must use it to identify and show the texture.</p> <p>Error</p> <p>If the entry in the <code>textures</code> array doesn't contain a valid <code>path</code> field, RePak will output one of the following errors to the console:</p> <p><code>Required field 'path' not found for a texture in uimg asset '%s'. Exiting...</code></p> <p><code>'path' field is not of required type 'string' for a texture in uimg asset '%s'. Exiting...</code></p> <p>where <code>%s</code> is the <code>path</code> field of the UI Image Atlas</p>"},{"location":"Modding/repak/assets/uiatlas/#width-and-height","title":"<code>width</code> and <code>height</code>","text":"<p>An entry in the <code>textures</code> array must have both a <code>width</code> and a <code>height</code> field, these values should both be integers.</p> <p>Error</p> <p>If the entry in the <code>textures</code> array doesn't contain a valid <code>width</code> or a valid <code>height</code> field, RePak will output one of the following errors to the console:</p> <p><code>Required field 'width' not found for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>Required field 'height' not found for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>'width' field is not of required type 'number' for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>'height' field is not of required type 'number' for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p>where the first <code>%s</code> is the <code>path</code> field of the texture, and the second <code>%s</code> is the <code>path</code> field of the UI Image Atlas</p>"},{"location":"Modding/repak/assets/uiatlas/#posx-and-posy","title":"<code>posX</code> and <code>posY</code>","text":"<p>An entry in the <code>textures</code> array must have both a <code>posX</code> and a <code>posY</code> field, these values should both be integers. These fields determine the location of the top-left pixel in the UI texture.</p> <p>Error</p> <p>If the entry in the <code>textures</code> array doesn't contain a valid <code>posX</code> or a valid <code>posY</code> field, RePak will output one of the following errors to the console:</p> <p><code>Required field 'posX' not found for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>Required field 'posY' not found for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>'posX' field is not of required type 'number' for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>'posY' field is not of required type 'number' for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p>where the first <code>%s</code> is the <code>path</code> field of the texture, and the second <code>%s</code> is the <code>path</code> field of the UI Image Atlas</p>"},{"location":"Modding/reverse-engineering/introduction/","title":"Introduction","text":"<p>The documentation for reverse engineering Titanfall2, adding new hooks to Northstar using information gathered during reverse engineering etc. is very much incomplete.</p> <p>If you have experience with reversing Titanfall2 to develop for Northstar or just reverse engineering experience in general, feel free to add more information here, be it tools, workflows, etc.</p>"},{"location":"Modding/squirrel/","title":"squirrel_re","text":"<p>Squirrel is the programming language used by Respawn. A lot of the logic for the game is written in squirrel scripts because of how convenient it is, even for people with little programming knowledge.</p> <p>Squirrel is an dynamically typed interpreted language that is compiled to bytecode when loading. The version of squirrel used by Respawn is heavily modified. Most notable is the added optional static typing of the language.</p> <p>Respawn's fork branched off at version 2.3 of vanilla squirrel so newer features do not exist, like generators.</p> <p>Because of how different Respawn's fork of squirrel is, the language is often called \"squirrel_re\" (the official name found in Apex Legends).</p>"},{"location":"Modding/squirrel/#syntax-highlighting","title":"Syntax Highlighting","text":""},{"location":"Modding/squirrel/#notepad","title":"Notepad++","text":"<p>For Notepad++, define a custom language for Squirrel. Luckily, samisalreadytaken has written a squirrel highlighter.</p> <ol> <li>Download Squirrel.xml</li> <li>At the top, edit <code>ext=\"nut\"</code> to <code>ext=\"nut gnut\"</code> so it works with gnut files as    well</li> <li>Open Notepad++</li> <li>Navigate to Language &gt; User Defined Language &gt; Define your language</li> <li>Click import, and select Squirrel.xml</li> </ol> <p>(If the colors/style are not to your taste) 1. Select <code>Squirrel</code> in User Language at the top 2. Navigate through the tabs to find what you want to change 3. Click its '<code>Styler</code>' button and make the changes you wish to</p>"},{"location":"Modding/squirrel/#vscode","title":"VSCode","text":"<p>RespawnSquirrel has been added to the vscode marketplace, you can download it here:</p> <p>https://marketplace.visualstudio.com/items?itemName=FrothyWi-Fi.rspn-squirrel</p> <p>Otherwise you can simply search \"Respawn Squirrel\" in the extensions tab</p>"},{"location":"Modding/squirrel/#kate","title":"Kate","text":"<p>Kate syntax highlighting for Squirrel</p>"},{"location":"Modding/squirrel/async/","title":"Threads, Signals and Flags","text":""},{"location":"Modding/squirrel/async/#threads","title":"Threads","text":"<p>Squirrel allows scripts to spin off function calls in a thread. All subsequential function calls will be threaded as well.</p> <p>In threaded functions, it's possible to halt a threaded function with <code>wait</code> statements, signals, flags and by suspending a thread object.</p> <p>You can use the <code>IsNewThread()</code> function to determine if the current function is threaded off.</p> <p>For more information, check out the squirrel documentation on threads and sq functions of threads. squirrel_re is very similar to vanilla squirrel in this regard.</p> <p>A thread is considered finished, after the threaded function returned a value. This may be <code>null</code>.</p>"},{"location":"Modding/squirrel/async/#spinning-off-a-thread","title":"Spinning off a thread","text":"<p>To create a new coroutine, call a function with the <code>thread</code> keyword before.</p> <pre><code>    thread void function(){}()\n    thread MyFunction()\n</code></pre> <p>To get a thread object, use the <code>newthread</code> function.</p> <pre><code>    void function CoroutineExample()\n    {\n        suspend( \"passback\" ) // passback is optional\n        print( \"threaded statement\" )\n    }\n\n    var co = newthread( CoroutineExample )\n    var suspendedReturn = co.call() // you NEED to use .call, invoking the function with () won't work\n    co.wakeup() // continue thread\n</code></pre>"},{"location":"Modding/squirrel/async/#wait","title":"wait","text":"<p>The <code>wait</code> statement halts threads for a set amount of time specified after the <code>wait</code> keyword. Integers and floats are accepted as times in seconds.</p> <pre><code>    void function WaitExample( float n )\n    {\n        wait 1 // wait 1 second\n        wait n // wait n seconds\n    }\n\n    thread WaitExample( 0.5 ) // thread will halt for a total 1.5 seconds\n</code></pre> <p>To wait a single frame, don't use <code>wait 0</code> since it doesn't actually wait a game frame. For example, if you have a client loop that does wait 0 even if the game is paused the loop will still run. Use <code>WaitFrame()</code> instead.</p> <p>When using infinite loops it's important to work with <code>wait</code> statements to avoid the game freezing.</p> <p>If you want to wait until a thread is finished, you can spin off the thread that you wait for with the <code>waitthread</code> keyword.</p> <pre><code>    void function ParentThread()\n    {\n        printt( \"pre spinoff \" + string( Time() ) )\n        waitthread void function()\n        {\n            printt( \"mid spinoff \" + string( Time() ) )\n            wait 1\n        }\n        printt( \"post spinoff\" + string( Time() ) )\n    }\n</code></pre>"},{"location":"Modding/squirrel/async/#onthreadend","title":"OnThreadEnd","text":"<p>Use the <code>OnThreadEnd</code> function to execute a callback after a thread has ended. This is useful for cleanup functions that remove entities after they're used or similar.</p> <pre><code>    void function PlayIncomingFX( vector origin, int teamNum )\n    {\n        wait 1.50\n        EmitSoundAtPosition( teamNum, origin, \"Titan_1P_Warpfall_Start\" )\n\n        local colorVec = Vector( 0, 255, 0 )\n        entity cpoint = CreateEntity( \"info_placement_helper\" )\n        SetTargetName( cpoint, UniqueString( \"pickup_controlpoint\" ) )\n        DispatchSpawn( cpoint )\n        cpoint.SetOrigin( colorVec )\n        entity glowFX = PlayFXWithControlPoint( INCOMING_SPAWN_FX, origin, cpoint, -1, null, null, C_PLAYFX_LOOP )\n\n        OnThreadEnd(\n            function() : ( glowFX, cpoint )\n            {\n                if ( IsValid( glowFX ) )\n                    glowFX.Destroy()\n                if ( IsValid( cpoint ) )\n                    cpoint.Destroy()\n            }\n        )\n\n        wait 1.25\n    }\n</code></pre>"},{"location":"Modding/squirrel/async/#example-script","title":"Example Script","text":"<pre><code>    void function SetPositionDelayed( entity ent, vector pos, float delay )\n    {\n        wait delay\n        ent.SetOrigin( pos )\n    }\n\n    SetPositionDelayed( player, &lt;0, 0, 100&gt;, 5.0 )\n    SetPositionDelayed( player, &lt;0, 0, 50&gt;, 2.5 ) // this will finish sooner.\n</code></pre>"},{"location":"Modding/squirrel/async/#signals-and-flags","title":"Signals and flags","text":"<p>Signals and flags allow threads to wait for events before running some code.</p>"},{"location":"Modding/squirrel/async/#signals","title":"Signals","text":"<p>void RegisterSignal( string signal )</p> <p>Registers a Signals to use on any entity. It's required to register signals before using them.</p> <p>CBaseEntity</p> <p>Entities</p> <p>void Signal( string signal, table results = null ) <p>Trigger a signal on this entity. The passed <code>results</code> will be returned by <code>WaitSignal</code>.</p> <p>void EndSignal( string signal )</p> <p>Ends this thread when the identifier is signaled on this entity</p> <p>table WaitSignal( string signal ) <p>Halts this thread until a signal is activated for this entity</p> <p>void ConnectOutput( string signal, void functionref( entity trigger, entity activator, entity caller, var value ) callback )</p> <p>Register a callback that executes when the <code>signal</code> has been fired on this Entity</p> <p>void DisconnectOutput( string event, void functionref( entity trigger, entity activator, entity caller, var value ) callback )</p> <p>Disconnects the callback from the signal.</p> <p>void AddOutput( string outputName, string | entity target, string inputName, string parameter = \"\", float delay = 0, float maxFires = 0 )</p> <p>Connects an output on this entity to an input on another entity via code.  The <code>target</code> can be a name or a named entity.</p> <p>void Fire( string signal, string param = \"\", float delay = 0, entity activator = null, entity caller = null )</p> <p>Fire a signal on this entity, with optional parm and delay</p> <p>void FireNow( string output, string param = \"\", float delay = 0, entity activator = null, entity caller = null )</p> <p>Fire a signal on this entity, with optional parm and delay (synchronous)</p> <p>It's also possible to trigger and catch signals with methods that aren't properties of an entity.</p> <p>void Signal( var obj, string signal, table results = null ) <p>Trigger a signal on <code>ent</code>. The passed <code>results</code> will be returned by <code>WaitSignal</code>.</p> <p>table WaitSignal( entity ent, ... ) <p>Wait for any of the passed signals to be triggered.</p> <pre><code>    // Wait for the NPC to die, delete, or get leeched, then remove the npc from the array\n    WaitSignal( ent, \"OnDeath\", \"OnDestroy\", \"OnLeeched\" )\n</code></pre> <p>void EndSignal( var obj, string signal )</p> <p>Ends this thread when the identifier is signaled on <code>ent</code></p>"},{"location":"Modding/squirrel/async/#example","title":"Example","text":"<p>For example, if we want to tell a player not to give up after being killed several times, we can write it this way:</p> <pre><code>    // First, we register signal we want to use\n    RegisterSignal(\"OnMultipleDeaths\")\n\n\n    void function WatchForDeaths (entity player) \n    {\n        int deathsCount = 0\n\n        while( GamePlayingOrSuddenDeath() )\n        {\n            if ( player.isDead() )  // This doesn't exist, don't try this at home\n            {\n                deathsCount += 1\n\n                if (deathsCount &gt;= 42)\n                {\n                    // This sends \"OnMultipleDeaths\" signal on player entity\n                    player.Signal( \"OnMultipleDeaths\" )\n                } \n            }\n        }\n    }\n\n\n    void function DontGiveUp (entity player)\n    {\n        // This is a blocking call\n        player.WaitSignal(\"OnMultipleDeaths\");\n\n        // This will not run until entity received \"OnMultipleDeaths\" signal\n        SendHudMessage( player, \"Don't give up!\", -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )\n    }\n\n    // Launch our methods in dedicated threads\n    entity player = GetPlayerArray()[0]\n    thread WatchForDeaths( player )\n    thread DontGiveUp( player )\n</code></pre> <p>In this example, the <code>DontGiveUp</code> method is launched at the same time as <code>WatchForDeaths</code>; but it will not  run until player died 42 times.</p> <p>When you want your thread to die on a given event, you can use <code>entity.EndSignal( \"OnMultipleDeaths\" )</code>; when said signal  is set, thread will end (after calling any <code>OnThreadEnd</code> methods).</p>"},{"location":"Modding/squirrel/async/#flags","title":"Flags","text":"<p><code>Flags</code> work pretty much the same way as <code>Signals</code>, except they can be set up without target entity:</p> <p>void FlagInit( string flag, bool isSet = false )</p> <p>Create a flag</p> <p>void FlagWait( string flag )</p> <p>Halts a thread until a flag is set. Callee must be threaded off.</p> <p>void FlagWaitAll( ... )</p> <p>Halts until every passed flag is set. Callee must be threaded off.</p> <p>void FlagWaitWithTimeout( string flag, float timeOut )</p> <p>Halts until the passed flag is set or the timer runs out. Callee must be threaded off.</p> <p>void FlagSet( string flag )</p> <p>Raise a flag</p> <p>void FlagSetOnFlag( string flagset, string flagwait, float delay = 0 )</p> <p>Set <code>flagset</code> after <code>flagwait</code> is set and the delay is met.</p> <p>void FlagClear( string flag )</p> <p>Reset a flag</p> <p>void FlagWaitClearAll( ... )</p> <p>Resets all passed flags.</p> <p>void FlagClearOnFlag( string flagclear, string flagwait )</p> <p>Reset <code>flagclear</code> when <code>flagwait</code> is set. </p> <p>void FlagWaitClearWithTimeout( string flag, float timeOut )</p> <p>Resets a flag after the timer runs out.</p> <p>void FlagWaitClearAny( ... )</p> <p>Wait until any passed flag is cleared.</p> <p>void FlagClearEnd( string flag )</p> <p>void FlagToggle( string flag )</p> <p>Raise a flag if it is reset, or reset it if it's raised.</p> <p>void FlagEnd( string flag )</p> <p>Ends this thread when the flag is set</p> <p>bool Flag( string flag )</p> <p>Returns the current state of a flag.</p> <p>bool FlagExists( string flag )</p> <p>Returns <code>true</code> if the flag is initialized</p> <p>array GetFlagsFromString( string str ) <p>Splits the flag on <code>\" \"</code></p> <p>array GetFlagsFromField( entity ent, var field ) <p>Splits the value of the keyvalues of the entity on the index <code>field</code> on <code>\" \"</code></p>"},{"location":"Modding/squirrel/async/#example_1","title":"Example","text":"<pre><code>    void function FlagExample()\n    {\n        FlagInit( \"BombHasExploded\" )\n\n        thread BombTicker()\n\n        FlagWait( \"BombHasExploded\" )\n        print( \"bomb just exploded\" )\n    }\n\n    void function BombTicker()\n    {\n        Assert( IsNewThread(), \"BombTicker must be threaded off\" )\n        wait RandomFloatRange( 3, 9 )\n        FlagSet( \"BombHasExploded\" )\n    }\n</code></pre>"},{"location":"Modding/squirrel/class/","title":"Classes","text":"<p>Note</p> <p>The version Respawn is using differs in some places from classes that are in use in Squirrel 3.x</p> <p>This is by no means complete. Please add anything you know.</p>"},{"location":"Modding/squirrel/class/#declaring-classes","title":"Declaring Classes","text":"<p>To declare a class, first add the <code>untyped</code> keyword and the class as a variable at file level.</p> <pre><code>    untyped\n    var ExampleClass\n</code></pre> <p>The <code>untyped</code> declaration is required because instances have an unknown type and it's not possible to use classes as types.</p> <p><code>var [classname]</code> represents the class. After declaring the class inside of a function you can use it in the script. You can use any type that can hold vars to store classes. Refer to Namespaces for more info.</p> <p>If needed, add the global keyword for the variable to make the class usable everywhere in the vm.</p> <p>It's not possible to declare classes on local variables. It's required to declare the class inside of a function.</p> <p>Most classes use a constructor. A constructor is a function of the instance that gets executed on object creation.</p> <pre><code>    void function initClient() {\n        class ExampleClass {\n            constructor(){print(\"Instance of ExampleClass created\");}\n        }\n    }\n</code></pre> <p>You can require parameters in the constructor. Keep in mind that you have to pass those when creating an object.</p> <p>Function parameters are passed as type <code>var</code>, but the type keyword is not required. <code>constructor( parameter ){}; func( parameter ){};</code> and <code>constructor( var parameter ){}; func( var parameter ){};</code> are both correct.</p> <pre><code>    class ExampleClass {\n            propertyString = null // Actual type is var\n            propertyInt = null // Actual type is var\n            constructor( var pString, var pInt ) {\n                this.propertyString = expect string(pString);\n                this.propertyInt = expect int(pInt);\n            }\n    }\n\n    // See section \"Declaring Objects\" for more information on object creation\n    var obj = ExampleClass( \"foo\", 1 );\n    printt(obj.propertyString, obj.propertyString ) // foo, 1\n    var lObj = ExampleClass(); tObj = ExampleClass( \"\" , 0 , 0); // Both throw an error compile time because parameters don't match with the constructor\n</code></pre> <p>Usually objects have properties. To define them, just add their identifier into the class without type declaration. The properties will be of type <code>var</code>. However, you are required to set a default value of a property. This may be <code>null</code>.</p> <p>Every object has a reference to itself called <code>this</code>. You can change parameters of an object by reference.</p> <pre><code>    void function initClient() {\n        class ExampleClass {\n            property = null\n            constructor( var parameter ) {\n                this.property = expect int(parameter);\n            }\n        }\n    }\n</code></pre> <p>You can't use the class name as a type. Use <code>var</code> instead. You can't <code>expect</code> them either.</p>"},{"location":"Modding/squirrel/class/#declaring-functions-of-classes","title":"Declaring Functions of Classes","text":"<p>Functions of a class have to return a value of type <code>var</code>. This may be <code>null</code>. Define functions like this:</p> <pre><code>    global var ExampleClass;\n    void function initClassF(){\n        class ExampleClass {\n            variable = \"default value\"\n\n            // Set field 'variable' of this instance to passed parameter\n            function setV( pV ){\n                this.variable = pV\n            }\n\n            // Return field 'variable' of this instance\n            function getV(){\n                return this.variable; // return value can be of any type\n            }\n        }\n        var inst = ExampleClass();\n        print(inst.getV()); // -&gt; default value\n        inst.setV(\"new value\");\n        print(inst.getV()); // -&gt; new value\n    }\n</code></pre>"},{"location":"Modding/squirrel/class/#inserting-properties-into-classes","title":"Inserting Properties Into Classes","text":"<p>It's possible to insert more properties into a class at runtime. To achieve this, use the <code>&lt;-</code> operator.</p> <pre><code>    // Using `ExampleClass` and `exampleObject` from example above\n    ExampleClass.newProperty &lt;- \"New property in class\"\n    // The value of the new index may be of any type.\n    ExampleClass.newFunc &lt;- function(){return \"Function return value\";}\n</code></pre> <p>Note</p> <p>It is not possible to insert new fields into an instance or a class after instantiation</p> <pre><code>    var ExampleErrorClass;\n\n    func(){\n        class ExampleErrorClass {};\n        var eInst = ExampleErrorClass()\n        eInst.e &lt;- \"Instance error value\"; // Asserts error: class instances do not support the new slot operator\n        ExampleErrorClass.e &lt;- \"Class error value\"; // Fails because an instance of class ExampleErrorClass has already been created. Asserts error: trying to modify a class that has already been instantiated\n    }\n</code></pre> <p>Inserting functions is also possible using the <code>::</code> operator</p> <pre><code>    function ExampleClass::AddOne( var param /* parameters have to be var */ ){ return expect int( param ) + 1 }\n    var e = ExampleClass()\n    print( expect int( e.AddOne( 1 ) ) ) // prints 2\n</code></pre> <p>This allows mods to extend functionality of classes declared in the base game and other mods that have already been loaded.</p> <p>For example, extending functionality of the CPlayer class might look like this:</p> <pre><code>    global function InitCPlayerInsert\n\n    void function InitCPlayerInsert()\n    {\n            CPlayer.afkCount &lt;- 0 // Insert new property into the CPlayer class\n            CPlayer.maxAFKCount &lt;- 3\n            function CPlayer::AFK(){ // Kick a player when they are afk multiple times in a match\n                    if ( this.afkCount &gt;= this.maxAFKCount )\n                            ClientCommand( this, \"disconnect You have been AFK too often in a match\")\n                    else\n                    {\n                            this.afkCount++\n                            SendHudMessage( this, format( \"You are AFK!\\nYou will get kicked after %i more violations\", this.maxAFKCount - this.afkCount ), -1, 0.4, 255, 255, 255, 0, 0.5, 5, 0.9 )\n                    }\n            }\n\n            // To trigger the method, do GetPlayerArray()[0].AFK()\n    }\n</code></pre> <p>This will allow scripts to run the <code>AFK</code> method on CPlayer entities, which will kick a player after 3</p> <p>Make sure to load this script after the class has been declared and before it's instantiated!</p> <p>Note that any properties added to classes don't apply to other classes that are inherited from a modified class.</p>"},{"location":"Modding/squirrel/class/#instantiating-objects","title":"Instantiating Objects","text":"<p>To create an instance, do:</p> <pre><code>    class ExampleClass {\n        property = null\n        constructor( var parameter ) {\n            this.property = expect int(parameter);\n        }\n    }\n\n    var exampleObject = ExampleClass(1);\n    int n = exampleObject.property // n = 1\n    exampleObject.property++;\n    n = exampleObject.property // n = 2\n</code></pre> <p>It's also possible to create an instance without calling the constructor.</p> <pre><code>    // Using 'ExampleClass' from previous examples\n    var e = ExampleClass.instance()\n    e.constructor(1) // Constructor is a normal function so you can call it manually.\n</code></pre> <p>Like the example above shows you can manipulate properties of a class directly. There is no way to make a private property.</p> <p>Methods from a class can be accessed without an instance. Note that the class itself doesn't have a reference to itself, meaning that the <code>this</code> keyword refers to the root table.</p> <pre><code>    var class = ExampleClass\n    var instance = class.constructor()\n</code></pre>"},{"location":"Modding/squirrel/class/#cloning-instances","title":"Cloning Instances","text":"<p>Unlike other types, passing an object does not pass a copy of the object, but a reference to itself. This means that any modifications inside of a function are applied to the original object.</p> <pre><code>    void function initClass(){\n        class Container {\n            content = null\n            constructor ( var pString ) {\n                this.content = expect string(pString);\n            }\n        }\n        var con = Container(\"original string\")\n        manipulateContainer( con )\n        print(con.content) // -&gt; manipulated string\n    }\n\n    void function manipulateContainer( var con ){\n        con.content = \"manipulated string\";\n    }\n</code></pre> <p>You can avoid this by using cloned objects. Use the <code>clone</code> keyword to create a copy of an object.</p> <pre><code>    // Assumes the 'Container' class from the previous example has already been declared\n    void function initClass(){\n        var originalObj = Container(\"original string\")\n        var clonedObj = clone originalObj\n        manipulateContainer( clonedObj )\n        printt(orignalObj.content, clonedObj.content) // -&gt; original string, manipulated string\n    }\n\n    void function manipulateContainer( var con ){\n        con.content = \"manipulated string\";\n    }\n</code></pre>"},{"location":"Modding/squirrel/class/#namespaces","title":"Emulating Namespaces","text":"<p>Instead of declaring classes as a global var, you can use other types such as tables to hold multiple class objects that emulate the behaviour of namespaces to a certain extend.</p> <pre><code>    global table&lt;string, var&gt; fakeNamespace = {\n            class1 = null,\n            class2 = null\n    }\n</code></pre> <p>This allows you to group classes together in a single global variable.</p> <p>You can use the classes inside of the table like this:</p> <pre><code>    // Create a class object in field\n    class fakeNamespace.class1 { constructor(){ print(\"constructing instance of class1\") } }\n    class fakeNamespace.class2 { constructor(){ print(\"constructing instance of class2\") } }\n\n    // Access class object in field\n    var c1 = fakeNamespace.class1()\n    var c2 = fakeNamespace.class2()\n\n    // Insert functions into class object in field\n    fakeNamespace.class1.testfunc &lt;- var function(){ print( \"inserted function in class1\" ) }\n</code></pre> <p>You can also declare classes in an array:</p> <pre><code>    array&lt;var&gt; classes // This has to be at file level\n\n    // This has to be inside of a function:\n    classes.append( class { constructor(){ print( \"inline constructor\" ) } )\n    var instance = classes[0]()\n</code></pre> <p>And in a similar fashion in structs:</p> <pre><code>    struct {\n            var class1 = null\n            var class2 = null\n    } classes // This has to be at file level\n\n    // This has to be inside of a function:\n    classes.class1 = class { constructor(){ print( \"inline constructor\" ) } )\n    classes.class2 = class { constructor(){ print( \"inline constructor\" ) } )\n    var c1 = classes.class1()\n    var c2 = classes.class2()\n</code></pre> <p>Warning</p> <p>Respawn's fork doesn't appear to support inheritance. Using the <code>extend</code> keyword won't compile.</p> <pre><code>    class Child extends Parent{}\n</code></pre> <p>Make sure you check out the squirrel documentation on classes and built in class instance methods for more information.</p>"},{"location":"Modding/squirrel/functions/","title":"Functions &amp; Closures","text":"<p>Functions are an integral part of any programming language. They allow to repeat blocks of code whenever and however often is needed.</p>"},{"location":"Modding/squirrel/functions/#declaring-functions","title":"Declaring Functions","text":"<p>Functions in squirrel are defined with this syntax: <code>&lt;return type&gt; function &lt;name&gt;(&lt;parameters&gt;) &lt;body&gt;</code></p> <p>For example, a simple function that returns either <code>true</code> or <code>false</code> would look like this:</p> <pre><code>  bool function CoinFlip()\n  {\n    return RandomInt( 2 ) == 0 // generate a random number from 0 - 1\n  }\n</code></pre> <p>It is not possible to have multiple functions that share the same name (often called \"overriding\" functions). Every function needs to have an unique name from any global or local variable or function.</p>"},{"location":"Modding/squirrel/functions/#returning-data","title":"Returning Data","text":"<p>If you need some data after a function is finished (for example after a calculation), you need to return that data.</p> <p>You can return anything, however the type of the returned variable needs to match with the return type of the function.</p> <pre><code>   string function GetNorthstarName()\n   {\n    return \"Northstar\" // this would be valid\n    return 1 // this would be invalid because the function needs to return a string\n   }\n</code></pre> <p>Keep in mind that no code after a return statement will get executed.</p> <p>If you don't want to return any value, use <code>void</code> as the return type. This indicates that your function returns <code>null</code>.</p> <p>If nothing is returned by a function, <code>null</code> will get returned implicitly.</p> <pre><code>  void function ReturnNull()\n  {\n    // return null regardless what happens, this all does the same\n    switch( RandomInt( 3 ) )\n    {\n      case 0:\n        return\n      case 1:\n        return null\n    }\n\n    // only if a 2 was rolled, code here will be executed before the other paths already returned.\n    // because a return statement is lacking, null is getting returned implicitly.\n  }\n</code></pre> <p>In <code>untyped</code> files you may leave out the return type. In those cases the return type will default to <code>var</code>.</p>"},{"location":"Modding/squirrel/functions/#parameters","title":"Parameters","text":"<p>Parameters are the input a function gets when called. They are local variables whose values come from the calling function.</p> <pre><code>   void function main()\n   {\n    int refcount = 0\n    refcount = IncreaseRefcount( refcount )\n    Assert( refcount == 1 )\n   }\n\n   int function IncreaseRefcount( int n )\n   {\n    return n + 1\n   }\n</code></pre>"},{"location":"Modding/squirrel/functions/#optional-parameters","title":"Optional parameters","text":"<p>Sometimes you need parameters that are optional for a function, like extra options. If a parameter name is followed by <code>= &lt;default-value&gt;</code>, that parameter is not required to call the function.</p> <p>Optional parameters need to be the last parameters of a function.</p> <pre><code>   void function main()\n   {\n    array a = [ 1, 2, 3, 4 ]\n    PopN( a )\n    PopN( a, 2 )\n\n    Assert( a.len() == 1 )\n   }\n\n   void function PopN( array arr, int n = 1 )\n   {\n    for ( int i; i &lt; n; i++ )\n    {\n      arr.pop()\n    }\n   }\n</code></pre>"},{"location":"Modding/squirrel/functions/#vargs","title":"vargs","text":"<p>With vargs you can pass a function an unlimited amount of parameters. The parameters will be inside a pseudo array called <code>vargv</code>. The length of the vargs the function receives will be stored inside a variable called <code>vargc</code>.</p> <p>You can denote a function to have vargs with adding <code>...</code> to the end of the parameter list.</p> <pre><code>   string function CombineStuff( string base, ... )\n   {\n    string s = base\n    for ( int i; i &lt; argc; i++ )\n    {\n      base += vargv[i].tostring()\n    }\n   }\n</code></pre>"},{"location":"Modding/squirrel/functions/#closures","title":"Closures","text":"<p>Closures are functions that are anonymous (unnamed) functions created in a specific script context that can use variables from the parent scope.</p> <pre><code>   void function main()\n   {\n    void functionref() fn = void function(){ print( \"I'm a closure\" ) } // create a closure\n    fn() // call the closure\n   }\n</code></pre> <p>Closures can capture variables from their parent scope.</p> <pre><code>   void function PlayFXOnEntity( entity ent )\n   {\n      int fxHandle = StartParticleEffectOnEntity( ent, PILOT_THROWN_TICK_WARNING, FX_ATTACH_POINT_FOLLOW, ent.LookupAttachment( \"head_base\" )\n      OnThreadEnd( void function() : ( fxHandle ){ EffectStop( fxHandle, false, true ) } ) // create a function to stop the fx effect and give it the fx handle it needs\n      ent.EndSignal( \"OnDestroy\" ) // stop the thread when the entity dies\n      WaitForever()\n   }\n</code></pre>"},{"location":"Modding/squirrel/intro/","title":"Introduction","text":"<p>Squirrel is a high level imperative, object-oriented programming language used in Titanfall to script large amounts of content in the game.</p> <p>Respawn modified large parts of the language to fit their needs, for example adding a static type compiler to the language.</p> <p>Squirrel still allows you to write dynamically typed code but this is discouraged if possible.</p> <p>The syntax of squirrel is very similar to C++ or Javascript and very easy to learn.</p> <p>The programmer doesn't need to think about memory management in scripts since all objects are refcounted and the garbage collector can be invoked manually.</p> <pre><code>   int function fibonacci( int n )\n   {\n    if ( n &lt; 2 )\n      return n\n\n    return fibonacci( n - 1 ) + fibonacci( n - 2 )\n   }\n</code></pre> <p>The language provides easy interfaces for coroutines and asynchronous code.</p> <pre><code>   void main()\n   {\n    thread timer( 1.0, timercallback ) \n   }\n\n   void function timercallback( int iteration )\n   {\n    print( iteration ) \n   }\n\n   // call the callback function every n seconds\n   void function timer( float n, void functionref( int ) callback )\n   {\n    int iterations\n    while ( true )\n    {\n      wait n\n      iterations += 1\n      callback( iterations )\n    }\n   }\n</code></pre> <p>Signals and Flags allow you to control code execution based on events that happen elsewhere in the code or in the ingame world.</p> <pre><code>   void main()\n   {\n    AddCallback_OnPlayerRespawned( OnPlayerRespawned )\n   }\n\n   void function OnPlayerRespawned( entity player )\n   {\n    thread CountPlayerTimeAlive( Time() ) // execute this function as threaded so we can use Signals in there\n   }\n\n   void function CountPlayerTimeAlive( entity player, float time )\n   {\n    player.WaitSignal( \"OnDestroy\" ) // wait until the player dies or disconnects\n    print( Time() - time ) // print how long the player was alive\n   }\n</code></pre>"},{"location":"Modding/squirrel/networking/","title":"Communicating between CLIENT, UI and SERVER scripts","text":"<p>All VMs (<code>CLIENT</code>, <code>UI</code>, <code>SERVER</code>) are seperate from each other and do not share any variables, even when running on the same machine.</p> <p>However, there are different interfaces to communicate between all VMs.</p>"},{"location":"Modding/squirrel/networking/#server-to-client-vm","title":"<code>SERVER</code> to <code>CLIENT</code> vm","text":""},{"location":"Modding/squirrel/networking/#remote-functions","title":"Remote Functions","text":"<p>Remote functions allow the <code>SERVER</code> vm to call a function from the <code>CLIENT</code> vm with parameters.</p> <p>To use remote functions, you have to make a registration on both the <code>CLIENT</code> and the <code>SERVER</code> vm with <code>Remote_RegisterFunction</code>.</p> <p>Northstar provides the </p> <p>AddCallback_OnRegisteringCustomNetworkVars( void functionref() identifierFn)</p> <p>callback in which you can use the </p> <p>Remote_RegisterFunction(string identifier)</p> <p>function. It's not possible to register remote functions after <code>Remote_EndRegisteringFunctions</code> has been called. The callback exists to allow multiple mods to register remote vars.</p> <p>Warning</p> <p>You can only pass parameters of the types <code>null</code>, <code>int</code>, <code>float</code> or <code>bool</code>.</p> <p>It is possible to communicate entities using eHandles. To get an eHandle, use the <code>entity.GetEncodedEHandle()</code> function. To get the corresponding entity of a handle, use <code>entity ent = GetEntityFromEncodedEHandle( eHandle )</code>. eHandles are of type <code>int</code>.</p>"},{"location":"Modding/squirrel/networking/#example","title":"Example","text":"<p>mod.json extract:</p> <pre><code>        \"Scripts\": [\n        {\n            \"Path\": \"sh_spaceships.nut\",\n            \"RunOn\": \"CLIENT || SERVER\", // execute the same function on both CLIENT and SERVER\n            \"ClientCallback\": {\n                \"Before\": \"Spaceship_Network\"\n            },\n            \"ServerCallback\": {\n                \"Before\": \"Spaceship_Network\"\n            }\n        },\n        {\n            // more script registrations ...\n</code></pre> <p>sh_spaceships.nut:</p> <p>The networked <code>CLIENT</code> function has to be global</p> <pre><code>    #if CLIENT\n    global function Server_GetNetworkedVariable // make the networked function only global on CLIENT\n    #endif //CLIENT\n\n    global function Spaceship_Network // this gets executed on both CLIENT &amp; SERVER\n\n    void function Spaceship_Network()\n    {\n        AddCallback_OnRegisteringCustomNetworkVars( RegisterNetworkVars ) // you can only register remote functions inside of this callback\n    }\n\n    void function RegisterNetworkVars()\n    {\n        // this has to be executed on both CLIENT and SERVER, else they will be out of sync and the client disconnects\n        Remote_RegisterFunction( \"Server_GetNetworkedVariable\" ) // register a remote function. Note that the parameters are not declared here\n    }\n\n    #if CLIENT\n    void function Server_GetNetworkedVariable( int number ) // you can declare as many or few parameters as you wish\n    {\n        printt(\"got integer\", number)\n    }\n    #endif //CLIENT\n</code></pre> <p>Calling the <code>CLIENT</code> function <code>Server_GetNetworkedVariable</code> on <code>SERVER</code> vm:</p> <pre><code>    // player: CPlayer entity that should execute the function\n    // func: function identifier string\n    // ...: any parameters passed to the function\n    Remote_CallFunction_NonReplay( entity player, string func, ... ) // NOT reexecuted in a replay\n    Remote_CallFunction_Replay( entity player, string func, ... ) // reexecuted in a replay\n\n    // for the previous example, this would be a valid remote function call:\n\n    Remote_CallFunction_NonReplay( player, \"Server_GetNetworkedVariable\", RandomIntRange( 1, 100 ) )\n</code></pre>"},{"location":"Modding/squirrel/networking/#server-to-client-command-callbacks","title":"Server to Client command callbacks","text":"<p>Allows the <code>SERVER</code> vm to create a <code>ServerToClientStringCommand</code> on a player which is linked to a Callback locally</p>"},{"location":"Modding/squirrel/networking/#register-a-server-command","title":"Register a server command","text":"<p>Note</p> <p>this has to be executed on the <code>Before</code> Client callback</p> <p>the formatting for the server command is like a normal console command. Arguments are seperated by spaces</p> <p>Register with the function clientside:</p> <p>AddServerToClientStringCommandCallback( string func, void functionref( array ) reference ) <p>and execute with the function serverside:</p> <p>ServerToClientStringCommand( entity player /CPlayer/, string command )</p>"},{"location":"Modding/squirrel/networking/#example_1","title":"Example","text":"<pre><code>    void function MessageUtils_ClientInit()\n    {\n        AddServerToClientStringCommandCallback( \"ServerHUDMessageShow\", ServerCallback_CreateServerHUDMessage )\n    }\n\n    void function ServerCallback_CreateServerHUDMessage ( array&lt;string&gt; args )\n    {\n        // client side command handle logic ...\n    }\n</code></pre>"},{"location":"Modding/squirrel/networking/#server-to-ui-vm","title":"<code>SERVER</code> to <code>UI</code> vm","text":"<p>Remote_CallFunction_UI( entity player, string functionName, ... )</p> <p>Given a player, function name, and optional parameters, call function in UI script. Allowed var types are null, bool, int, and float.</p>"},{"location":"Modding/squirrel/networking/#example_2","title":"Example","text":"<pre><code>    Remote_CallFunction_UI( player, \"ScriptCallback_UnlockAchievement\", achievementID )\n</code></pre>"},{"location":"Modding/squirrel/networking/#client-to-server-vm","title":"<code>CLIENT</code> to <code>SERVER</code> vm","text":""},{"location":"Modding/squirrel/networking/#client-to-server-command-callbacks","title":"Client to Server command callbacks","text":"<p>Register a client command callback serverside with </p> <p>!!! cpp-function \"AddClientCommandCallback( string command, bool functionref( entity player /CPlayer/, array \"args ) callback ) <p><code>player</code> is the player that called the command clientside. The callback function should return <code>true</code> if the command was accepted and <code>false</code> if it was invalid.</p> <p>The <code>CLIENT</code> vm can execute commands with the function:</p> <p>player.ClientCommand( string command )</p> <p>These will be handled by the <code>SERVER</code> if the command is registered.</p>"},{"location":"Modding/squirrel/networking/#clientcommand-notifications","title":"ClientCommand Notifications","text":"<p>Since version 1.5 mods can receive notifications when a client command has been handled. This is different from <code>AddClientCommandCallback</code></p> <p>void AddClientCommandNotifyCallback( string, void functionref( entity, array)) <p>Example usage with the :doc:<code>PrivateMatchLaunch</code> clientcommand</p> <pre><code>    void function init(){\n        AddClientCommandNotifyCallback(\"PrivateMatchLaunch\", started)\n    }\n\n    void function started(entity player, array&lt;string&gt; args){\n        print(player + \" started the match\")\n    }\n</code></pre> <p>Please refer to :ref:<code>list_client_commands</code> for a list of native client commands you could catch.</p>"},{"location":"Modding/squirrel/networking/#client-to-ui-vm","title":"<code>CLIENT</code> to <code>UI</code> vm","text":"<p>Create a global function in the <code>UI</code> vm and call it in the <code>CLIENT</code> vm with the function:</p> <p>RunUIScript( string identifier, ... ) </p> <p>You can also pass parameters to the function. <code>identifier</code> is the name of the function you want to call.</p>"},{"location":"Modding/squirrel/networking/#example_3","title":"Example","text":"<pre><code>    #if UI\n    global function CallMe\n\n    void function CallMe( int a, int b )\n    {\n        printt( a + b )\n    }\n    #elseif CLIENT\n    RunUIScript( \"CallMe\", 1, 2 ) // 3\n    #endif\n</code></pre>"},{"location":"Modding/squirrel/networking/#ui-to-client-vm","title":"<code>UI</code> to <code>CLIENT</code> vm","text":"<p>Create a global function in the <code>CLIENT</code> vm and call it in the <code>UI</code> vm with the function:</p> <p>RunClientScript( string identifier, ... )</p> <p>You can also pass parameters to the function. <code>identifier</code> is the name of the function you want to call.</p>"},{"location":"Modding/squirrel/networking/#example_4","title":"Example","text":"<pre><code>    #if CLIENT\n    global function CallMe\n\n    void function CallMe( int a, int b )\n    {\n        printt( a + b )\n    }\n    #elseif UI\n    RunClientScript( \"CallMe\", 1, 2 ) // 3\n    #endif\n</code></pre>"},{"location":"Modding/squirrel/sqvm/","title":"Squirrel VM","text":""},{"location":"Modding/squirrel/statements/","title":"Statements","text":""},{"location":"Modding/squirrel/statements/#if-statements","title":"If statements","text":"<p>If statements use a similar style to most programming languages and will execute their asigned code if the test placed inside returns the boolean value true. If I wanted to have something occur if, and only if, our previous <code>ReturnTrueOrFalse</code> function returned true, then you can use:</p> <pre><code>  if( ReturnTrueOrFalse() )\n</code></pre> <p>Conditional operators can also be used to make comparisons, such as <code>==</code> (equals), <code>&lt;</code> (less than), <code>&lt;=</code> (less than or equal), <code>!=</code> (not equal), etc., returning true if their condition is satisfied. For example, to execute code if a dice roll landed on 5:</p> <pre><code>  if( RandomInt( 6 ) + 1 == 5 )\n</code></pre> <p>Like other languages, if statements can be connected to <code>else if</code> and <code>else</code> statements. <code>else if</code> statements must be used immediately after an <code>if</code> or <code>else if</code> and will only check their condition if the preceding statements failed. <code>else</code> statements behave similarly, but always run if the preceding statements failed and must be last.</p> <p>Squirrel supports ternary operations like most languages. The value of the expression depends if a condition is truthy or not. However, if not used carefully this can worsen readability. The Syntax is <code>condition ? if_condition_true : if_condition_false</code>. This is especially useful when declaring variables or passing parameters.</p> <pre><code>  // shortenedUsername is \"longus...\"\" if username is \"longusername\" or \"short\" if username is \"short\"\n  string shortenedUsername = username.len() &gt; 9 ? username.slice(0,6) + \"...\" : username;\n</code></pre>"},{"location":"Modding/squirrel/statements/#loops","title":"Loops","text":"<p>Loops are used to execute the same code n times.</p>"},{"location":"Modding/squirrel/statements/#while-loops","title":"While Loops","text":"<p>A while loop runs as long as the condition evaluates to a truthy value.</p> <pre><code>  while( true )\n  {\n    // this will result in an endless loop because the probe condition will never be false \n  }\n\n  while( RandomInt( 2 ) )\n  {\n    // This will run until a 1 is generated by chance, because squirrel treats 0 as a falsy value and 1 as truthy.\n  }\n</code></pre>"},{"location":"Modding/squirrel/statements/#do-while-loop","title":"Do While Loop","text":"<p>A do while loop is the same as a while loop but the condition is checked after the body is executed.</p> <pre><code>  do\n  {\n    // this will execute only one time\n  } while( false )\n</code></pre>"},{"location":"Modding/squirrel/statements/#for-loop","title":"For Loop","text":"<p>A for loop also runs until a condition is met however it provides you with a counter variable.</p> <p>The Syntax is as follows: <code>for( int counter; condition; behaviour_after_body_execution )</code></p> <pre><code>  // prints 0, 1, 2, 3, 4\n  for( int i; i &lt; 5; i++ )\n  {\n    print( i )\n  }\n\n  array&lt;int&gt; arr = [ 14, 2, 18, 9 ]\n  // prints 14, 2, 18, 9\n  for( int i; i &lt; arr.len() * 2; i += 2 )\n  {\n    print( arr[i] )\n  }\n</code></pre>"},{"location":"Modding/squirrel/statements/#foreach-loop","title":"Foreach Loop","text":"<p>A foreach loop iterates over a <code>table</code> or an <code>array</code> and executes for each entry. The loop provides you with an optional counter for arrays or key for tables.</p> <pre><code>  array&lt;int&gt; arr = [ 1, 2, 3, 4 ]\n  table&lt;string, string&gt; map = {\n    key1 = \"mapped value 1\",\n    key2 = \"mapped value 2\"\n  }\n\n  // prints 0 1, 1 2, 2 3, 3 4\n  foreach( int index, int value in arr )\n  {\n    printt( index, value )\n  }\n\n  // prints key1 mapped value 1, key2 mapped value 2\n  foreach( string key, string value in map )\n  {\n    printt( key, value )\n  }\n</code></pre>"},{"location":"Modding/squirrel/statements/#implicit-conditional-behavior","title":"Implicit conditional behavior","text":"<p>Conditional statements, such as while loops and if statements, also implictly cast non-boolean inputs to booleans. For numbers, this means 0 is considered false and anything else is considered true. For instance variables like arrays and entities, <code>null</code> is considered false and anything else is considered true. For example, these inputs are considered true by the if statements:</p> <pre><code>  if(2)\n</code></pre> <pre><code>  array somelist = [0, 1]\n  if(somelist)\n</code></pre> <p>Be aware that empty arrays and strings, <code>[]</code> and <code>\"\"</code>, are considered true by this logic.</p>"},{"location":"Modding/squirrel/statements/#formatting-of-actions","title":"Formatting of actions","text":"<p>So great, we can loop and check things, but what can we do with this information? Squirrel uses <code>{}</code> to denote the contents of a series of actions caused by such a statement.</p> <p>For example, lets make our <code>ReturnTrueOrFalse</code> function, that randomly picks either true or false, first:</p> <pre><code>  bool function ReturnTrueOrFalse() {\n    return RandomInt(2) == 1\n  }\n</code></pre> <p>Note that while functions always need <code>{}</code>, single-line <code>if</code>/<code>else</code> statements and loops do not:</p> <pre><code>  if(ReturnTrueOrFalse())\n    printt(\"Only called if true\")\n</code></pre> <p>Now let's make a more complicated function that will use the previous script to determine true or false, printing a list each time it returns true:</p> <pre><code>  array&lt;int&gt; someinformation = [1,2,3,4,5,6]\n  void function ThisDoesStuff(){\n    while(ReturnTrueOrFalse()){\n      foreach( int information in someinformation){\n        printt(information)\n      }\n    }\n  }\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/","title":"C++ Interface","text":"<p>The Squirrel VMs can be manipulated and controlled by Northstar and Plugins.</p> <p>All functions and macros documented are defined and used in the Northstar Client. For plugins it's recommended to use F1F7Y's template that mirrors the definitions to an extend or rrplug if you prefer Rust. Note that this documentation only covers the C++ API available in the Launcher.</p> <p>For more information you can read the official library documentation. However be aware that implementations or behaviour might be different and features are missing in Respawn's Squirrel fork.</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/","title":"Objecthandling","text":"<p>Warning</p> <p>Parameters or descriptions may be wrong or incomplete</p> <p>This list is incomplete and only lists methods available in squirrel.h.</p> <p>Some descriptions are taken from the Squirrel Documentation</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#object-creation-and-handling","title":"Object creation and handling","text":"<p>SquirrelManager</p> <p>You can access all sq functions only with a <code>SquirrelManager</code> instance. You have one available inside the <code>ADD_SQFUNC</code> macro.</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#pushing-objects-to-the-stack","title":"Pushing Objects to the stack","text":"<p>void pushbool(HSquirrelVM* sqvm, const SQBool bVal)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target VM</li> <li><code>SQInteger bVal</code> the bool that will be pushed</li> </ul> <p>pushes a boolean to the stack</p> <p>void pushinteger(HSquirrelVM* sqvm, const SQInteger iVal)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target VM</li> <li><code>SQInteger iVal</code> the integer that will be pushed</li> </ul> <p>void pushfloat(HSquirrelVM* sqvm, const SQFloat fVal)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target VM</li> <li><code>SQInteger fVal</code> the float that will be pushed</li> </ul> <p>pushes a float to the stack</p> <p>void pushstring(HSquirrelVM* sqvm, const SQChar* sVal, int length = -1)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target VM</li> <li><code>SQChar* sVal</code> the string that will be pushed</li> <li><code>int len</code> length of the string <code>sVal</code> . If the parameter length is less than 0 the VM will calculate the length using <code>strlen</code></li> </ul> <p>pushes a string to the stack</p> <p>void pushasset(HSquirrelVM* sqvm, const SQChar* sVal, int length = -1)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target VM</li> <li><code>SQChar* sVal</code> the string that will be pushed</li> <li><code>int len</code> length of the string <code>sVal</code> . If the parameter length is less than 0 the VM will calculate the length using <code>strlen</code></li> </ul> <p>pushes an asset to the stack</p> <p>void pushvector(HSquirrelVM* sqvm, const Vector3 vVal)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target VM</li> <li><code>Vector3 vVal</code> the vector that will be pushed</li> </ul> <p>pushes a vector to the stack</p> <p>void pushobject(HSquirrelVM* sqvm, SQObject obj)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target VM</li> <li><code>SQObject obj</code> the object that will be pushed</li> </ul> <p>pushes an object like functions to the stack</p> <p>void pushroottable(HSquirrelVM* sqvm)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target VM</li> </ul> <p>pushes the current root table into the stack</p> <p>Note</p> <p><code>sq_pushnull</code> (<code>0x33D0</code>) and more aren't included in <code>squirrel.h</code> right now but may be in the future.</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#getting-objects-from-the-stack","title":"Getting Objects from the stack","text":"<p>SQBool getbool(HSquirrelVM* sqvm, const SQInteger stackpos)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger stackpos</code> stack position of the object</li> <li>Returns The value of the object</li> </ul> <p>SQInteger getinteger(HSquirrelVM* sqvm, const SQInteger stackpos)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger stackpos</code> stack position of the object</li> <li>Returns The value of the object</li> </ul> <p>SQFloat getfloat(HSquirrelVM* sqvm, const SQInteger stackpos)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger stackpos</code> stack position of the object</li> <li>Returns The value of the object</li> </ul> <p>SQChar* getstring(HSquirrelVM* sqvm, const SQInteger stackpos)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger stackpos</code> stack position of the object</li> <li>Returns The value of the object</li> </ul> <p>Vector3 getvector(HSquirrelVM* sqvm, const SQInteger stackpos)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger stackpos</code> stack position of the object</li> <li>Returns The value of the object</li> </ul> <p>SQChar* getasset(HSquirrelVM* sqvm, const SQInteger stackpos)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger stackpos</code> stack position of the object</li> <li>Returns The value of the object</li> </ul> <p>SQTable* getConstants(HSquirrelVM* sqvm)</p> <p>Note</p> <p>This function (`server.dll+0x5920```) is not available in the launcher or plugins at the moment.</p> <p>You can open a PR if you need it now.</p> <p>To define an integer constant you can use <code>defconst</code> instead.</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li>Returns the table of constants</li> </ul> <p>Pushes the constants table to the stack.</p> <p>Used to add global constants for scripts.</p> <pre><code>    getConstants(sqvm);\n\n    pushstring(sqvm, \"MY_CONSTANT\");\n    pushstring(sqvm, \"MY_VALUE\");\n    newslot(sqvm, -3, false);\n\n    removeFromStack(sqvm); // don't forget this!\n</code></pre> <p>int sq_getfunction(HSquirrelVM* sqvm, const SQChar* name, SQObject* returnObj, const SQChar* signature)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQChar* name</code> the function name to search for</li> <li><code>SQObject* returnObj</code> reference to the object to hold the function object</li> <li><code>SQChar* signature</code></li> </ul> <p>returns <code>0</code> if the function was found.</p> <pre><code>    SQObject functionobj {};\n    int result = sq_getfunction(m_pSQVM-&gt;sqvm, funcname, &amp;functionobj, 0);\n    if (result != 0) // This func returns 0 on success for some reason\n    {\n        NS::log::squirrel_logger&lt;context&gt;()-&gt;error(\"Call was unable to find function with name '{}'. Is it global?\", funcname);\n        return SQRESULT_ERROR;\n    }\n</code></pre> <p>T* getentity(HSquirrelVM* sqvm, SQInteger iStackPos)</p> <ul> <li><code>HSquirrelVM* sqvm</code> The target vm</li> <li><code>SQInteger iStackPos</code> Stack position of the entity</li> </ul> <p>void* __sq_getentityfrominstance(CSquirrelVM* sqvm, SQObject* pInstance, char** ppEntityConstant)</p> <ul> <li><code>CSquirrelVM* sqvm</code> The target vm</li> <li><code>SQObject* pInstance</code> Instance holding an entity</li> <li><code>char** ppEntityConstant</code> Entity constant like <code>ref</code>__sq_GetEntityConstant_CBaseEntity ` <p>char** __sq_GetEntityConstant_CBaseEntity()</p> <p>There are entity constants for other types, but seemingly CBaseEntity's is the only one needed</p> <p>SQRESULT __sq_getobject(HSquirrelVM* sqvm, SQInteger iStackPos, SQObject* obj)</p> <ul> <li><code>HSquirrelVM* sqvm</code> The target vm</li> <li><code>SQInteger iStackPos</code> Stack position of the object</li> <li><code>SQObject* obj</code> Pointer that will hold the object</li> </ul> <p><code>obj</code> will be overwritten to hold the squirrel object.</p> <p>This example adds a native function with the <code>ADD_SQFUNC</code> macro. The function takes a function reference as a callback and calls it immediately. More information about function calls are available here</p> <pre><code>    ADD_SQFUNC(\"void\", SQCallbackTest, \"void functionref()\", \"\", ScriptContext::UI)\n    {\n        SQObject fn; // Make an empty sqobject. This will hold the function object later\n        g_pSquirrel&lt;context&gt;-&gt;__sq_getobject(sqvm, 1, &amp;fn); // Assign the function object to the SQOBJECT\n        g_pSquirrel&lt;context&gt;-&gt;pushobject(sqvm, &amp;fn); // Push the function object for the call\n        g_pSquirrel&lt;context&gt;-&gt;pushroottable(sqvm); // Push the root table for the function stack\n        g_pSquirrel&lt;context&gt;-&gt;__sq_call(sqvm, 1, false, true); // call the function with one parameter (the 'this' object)\n\n        return SQRESULT_NULL;\n    }\n</code></pre> <p>SQRESULT get(HSquirrelVM* sqvm, const SQInteger stackpos)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger stackpos</code> stack position of the object</li> </ul> <p>Returns an <code>SQRESULT</code> that indicates whether or not the access was successful.</p> <p>pops a key from the stack and performs a get operation on the object at the position idx in the stack; and pushes the result in the stack.</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#stack-infos","title":"Stack Infos","text":"<p>SQRESULT sq_stackinfos(HSquirrelVM* sqvm, int level, SQStackInfos&amp; out)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>int level</code> stack depth of the info</li> <li><code>SQStackInfos&amp; out</code> instance that will hold the information</li> </ul> <p>Mod* getcallingmod(HSquirrelVM* sqvm, int depth = 0)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>int depth</code> stack depth of the origin mod</li> <li>Returns Pointer to the Mod object at the stack depth</li> </ul> <p>Note</p> <p>Not available in plugins</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#other","title":"Other","text":"<p>void defconst(CSquirrelVM* csqvm, const SQChar* pName, int nValue)</p> <ul> <li><code>CSquirrelVM* csqvm</code> the target vm</li> <li><code>SQChar* pName</code> the constant name</li> <li><code>int nValue</code> the constant value</li> </ul> <p>defines a global squirrel integer constant</p>"},{"location":"Modding/squirrel/cpp_api/objectmanipulation/","title":"Creating / Manipulating Objects","text":""},{"location":"Modding/squirrel/cpp_api/objectmanipulation/#arrays","title":"Arrays","text":"<p>SQRESULT newarray(HSquirrelVM* sqvm, const SQInteger size = 0)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger size</code> initial size of the array</li> </ul> <p>Returns a <code>SQRESULT</code></p> <p>creates a new array and pushes it to the stack</p> <pre><code>    newarray(sqvm, 0);\n    pushstring(sqvm, \"val1\");\n    arrayappend(sqvm, -2);\n    pushinteger(sqvm, 15);\n    arrayappend(sqvm, -2);\n\n    /*\n        The array on the stack now looks like this:\n        [ \"val1\", 15 ]\n    */\n</code></pre> <p>SQRESULT arrayappend(HSquirrelVM* sqvm, const SQInteger stackpos)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger stackpos</code> stack position of the array to append to</li> <li>Returns a <code>SQRESULT</code></li> </ul> <p>pops a value from the stack and pushes it to the back of the array at the position idx in the stack</p>"},{"location":"Modding/squirrel/cpp_api/objectmanipulation/#tables","title":"Tables","text":"<p>SQRESULT newtable(HSquirrelVM* sqvm)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> </ul> <p>Returns a <code>SQRESULT</code></p> <p>creates a new table and pushes it onto the stack.</p> <p>SQRESULT newslot(HSquirrelVM* sqvm, SQInteger stackpos, SQBool bstatic)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger stackpos</code> the index of the table to insert into</li> <li><code>SQBool bstatic</code> if <code>SQTrue</code> creates a static member. This parameter is only used if the target object is a class.</li> </ul> <p>pops a key and a value from the stack and performs a set operation on the table or class that is at position idx in the stack, if the slot does not exist it will be created.</p> <pre><code>    newtable(sqvm);\n    // slot 1\n    pushstring(sqvm, \"key\");\n    pushstring(sqvm, \"value\");\n    newslot(sqvm, -3);\n    // slot 2\n    pushstring(sqvm, \"key2\");\n    pushasset(sqvm, \"value2\");\n    newslot(sqvm, -3);\n    // slot 3\n    pushstring(sqvm, \"key3\");\n    newtable(sqvm);\n    pushstring(sqvm, \"sub\");\n    pushinteger(sqvm, 13);\n    newslot(sqvm, -3);\n    newslot(sqvm, -3);\n\n    /*\n        The table on the stack now looks like this:\n        {\n            key = \"value\"\n            key2 = $\"value2\"\n            key3 = { sub = 13 }\n        }\n    */\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/objectmanipulation/#structs","title":"Structs","text":"<p>Note</p> <p>These functions aren't available for plugins yet.</p> <p>SQRESULT::SQRESULT_NULL pushnewstructinstance(HSquirrelVM* sqvm, int fieldCount)</p> <ul> <li><code>HSquirrelVM* sqvm</code> The target vm</li> <li><code>int fieldCount</code> total number of fields the struct contains</li> </ul> <p>Creates and pushes a struct instance with <code>fieldCount</code> to the stack.</p> <p>SQRESULT::SQRESULT_NULL sealstructslot(HSquirrelVM* sqvm, int fieldIndex)</p> <ul> <li><code>HSquirrelVM* sqvm</code> The target vm</li> <li><code>int fieldIndex</code> Index of the field to fill</li> </ul> <p>Pops a value from the stack and fills the field at <code>fieldIndex</code> from the struct object that needs to be at the top of the stack.</p> <pre><code>    pushnewstructinstance(sqvm, 2); // create a struct instance with 2 slots\n    pushinteger(sqvm, 12);\n    sealstructslot(sqvm, 0);\n    pushstring(sqvm, \"example\", -1);\n    sealstructslot(sqvm, 1);\n\n    /*\n        Assuming the compiler expects this slot:\n        struct ExStruct { int i, string s }\n        , the struct on the stack looks like this\n\n        ExStruct {\n            i = 12,\n            s = \"example\"\n        }\n    */\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/objectmanipulation/#userdata","title":"Userdata","text":"<p>T* createuserdata(HSquirrelVM* sqvm, SQInteger size)</p> <ul> <li><code>HSquirrelVM* sqvm</code> The target vm</li> <li><code>SQInteger size</code> bit size of the userdata object</li> </ul> <p>When the function sq_newuserdata is called, Squirrel allocates a new userdata with the specified size, returns a pointer to his payload buffer and push the object in the stack; at this point the application can do whatever it want with this memory chunk, the VM will automatically take care of the memory deallocation like for every other built-in type. A userdata can be passed to a function or stored in a table slot. By default Squirrel cannot manipulate directly userdata; however is possible to assign a delegate to it and define a behavior like it would be a table. Because the application would want to do something with the data stored in a userdata object when it get deleted, is possible to assign a callback that will be called by the VM just before deleting a certain userdata. This is done through the API call sq_setreleasehook.</p> <p>SQRESULT setuserdatatypeid(HSquirrelVM* sqvm, const SQInteger stackpos, uint64_t typeId)</p> <ul> <li><code>HSquirrelVM* sqvm</code> The target vm</li> <li><code>SQInteger stackpos</code> Stack position of the userdata</li> </ul> <p>SQRESULT getuserdata(HSquirrelVM* sqvm, const SQInteger stackpos, T* data, uint64_t* typeId)</p> <ul> <li><code>HSquirrelVM* sqvm</code> The target vm</li> <li><code>SQInteger stackpos</code> Stack position of the userdata</li> <li><code>T* data</code> Pointer to an arbitrary variable the userdata gets mapped to</li> <li><code>uint64_t* typeid</code> Pointer to a variable edited to hold the userdata type</li> </ul>"},{"location":"Modding/squirrel/cpp_api/sq_functions/","title":"Squirrel Functions","text":""},{"location":"Modding/squirrel/cpp_api/sq_functions/#sq-api-register-native-functions-c-macro","title":"Adding Squirrel Functions","text":"<p>You can use the <code>ADD_SQFUNC</code> macro defined in <code>squirrelautobind.h</code> to easily add new Squirrel functions for specific contexts.</p> <p>Inside the macro you have access to the Squirrel Manager of the context the function has been called from and the SQVM.</p> <p>Parameters are the initial stack in the function context.</p> <p>macro ADD_SQFUNC(return_type, funcName, argTypes, helpText, runOnContext)</p> <ul> <li><code>return_type</code> The squirrel return type the compiler expects from this function</li> <li><code>funcName</code> The squirrel function name</li> <li><code>argTypes</code> The args with types the compiler expects</li> <li><code>helpText</code> A help text describing the function</li> <li><code>runOnContext</code> The contexts that have access to this function</li> </ul>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#examples","title":"Examples","text":"<p>Return a string from a native registered function:</p> <pre><code>    ADD_SQFUNC(\"string\", CPlugTest, \"\", \"returns \\\"native gaming\\\"\", ScriptContext::CLIENT | ScriptContext::SERVER)\n    {\n        g_pSquirrel&lt;context&gt;-&gt;pushstring(sqvm, \"native gaming\"); // push a string to the stack\n\n        return SQRESULT_NOTNULL; // Signal that the topmost item on the stack is returned by this function\n    }\n</code></pre> <p>Return a complex <code>ornull</code> type:</p> <pre><code>    ADD_SQFUNC(\"array&lt;int&gt; ornull\", CPlugComplex, \"int n\", \"returns null\", ScriptContext::CLIENT | ScriptContext::SERVER | ScriptContext::UI)\n    {\n        SQInteger n = g_pSquirrel&lt;context&gt;-&gt;getinteger(sqvm, 1);\n\n        if (n == 0)\n            return SQRESULT_NULL;\n\n        g_pSquirrel&lt;context&gt;-&gt;newarray(sqvm, 0);\n        g_pSquirrel&lt;context&gt;-&gt;pushinteger(sqvm, n);\n        g_pSquirrel&lt;context&gt;-&gt;arrayappend(sqvm, 2);\n        g_pSquirrel&lt;context&gt;-&gt;pushinteger(sqvm, n * 2);\n        g_pSquirrel&lt;context&gt;-&gt;arrayappend(sqvm, 2);\n\n        return SQRESULT_NOTNULL; // return the array [ n, n * 2 ] or NULL if n == 0\n    }\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#replacing-squirrel-functions","title":"Replacing Squirrel Functions","text":"<p>Note</p> <p>Replacing functions is not possible in plugins</p> <p>You can use the <code>REPLACE_SQFUNC</code> macro to replace an existing sq function.</p> <p>macro REPLACE_SQFUNC(funcName, runOnContext)</p> <ul> <li><code>funcName</code> The name of the function to replace</li> <li><code>runOnContext</code> The contexts that have access to this function</li> </ul> <p>It's also possible to add an override directly with the <code>AddFuncOverride</code> function of the <code>SquirrelManager</code> class.</p> <p>void AddFuncOverride(std::string name, SQFunction func)</p> <ul> <li><code>std</code>string name` The name of the function to override</li> <li><code>SQFunc func</code> A function object that replaces the logic</li> </ul> <pre><code>    // Replaces dangerous vanilla functions to only log their call with no further logic.\n    g_pSquirrel&lt;context&gt;-&gt;AddFuncOverride(\"DevTextBufferWrite\", SQ_StubbedFunc&lt;context, \"DevTextBufferWrite\"&gt;);\n    g_pSquirrel&lt;context&gt;-&gt;AddFuncOverride(\"DevTextBufferClear\", SQ_StubbedFunc&lt;context, \"DevTextBufferClear\"&gt;);\n    g_pSquirrel&lt;context&gt;-&gt;AddFuncOverride(\"DevTextBufferDumpToFile\", SQ_StubbedFunc&lt;context, \"DevTextBufferDumpToFile\"&gt;);\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#script-contexts","title":"Script Contexts","text":"<p>Scriptcontexts are used to define the VMs that have access to a native function. Available Contexts are</p> <ul> <li><code>ScriptContext::SERVER</code> - The SERVER sqvm</li> <li><code>ScriptContext::CLIENT</code> - The CLIENT sqvm</li> <li><code>ScriptContext::UI</code> - The UI vm</li> </ul>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#script-returns","title":"Script Returns","text":"<p>Squirrel functions need to return a <code>SQRESULT</code>. Valid results are</p> <ul> <li><code>SQRESULT_NULL</code> - This function returns <code>null</code>. Nothing is left over on the stack.</li> <li><code>SQRESULT_NOTNULL</code> - This functions returns the last item on the stack.</li> <li><code>SQRESULT_ERROR</code> - This function has thrown an error.</li> </ul>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#sq-api-calling-functions","title":"Calling","text":"<p>SQRESULT Call(const char* funcname)</p> <ul> <li><code>char* funcname</code> Name of the function to call</li> </ul> <p>Note</p> <p>This is a squirrel API wrapper added by northstar. It's not available for plugins and is supposed to abstract squirrel calls.</p> <p>This function assumes the squirrel VM is stopped/blocked at the moment of call</p> <p>Calling this function while the VM is running is likely to result in a crash due to stack destruction</p> <p>If you want to call into squirrel asynchronously, use <code>AsyncCall</code>_ instead.</p> <pre><code>    Call(\"PluginCallbackTest\"); // PluginCallbackTest()\n</code></pre> <p>SQRESULT Call(const char* funcname, Args... args)</p> <ul> <li><code>char* funcname</code> Name of the function to call</li> <li><code>Args... args</code> vector of args to pass to the function</li> </ul> <p>Note</p> <p>This is a squirrel API wrapper added by northstar. It's not available for plugins and is supposed to abstract squirrel calls.</p> <pre><code>    Call(\"PluginCallbackTest\", \"param\"); // PluginCallbackTest(\"param\")\n</code></pre> <p>SquirrelMessage AsyncCall(std::string funcname)</p> <ul> <li><code>char* funcname</code> Name of the function to call</li> </ul> <p>Note</p> <p>This is a squirrel API wrapper added by northstar. It's not available for plugins and is supposed to abstract squirrel calls.</p> <p>This function schedules a call to be executed on the next frame</p> <p>This is useful for things like threads and plugins, which do not run on the main thread.</p> <p>SquirrelMessage AsyncCall(std::string funcname, Args... args)</p> <ul> <li><code>char* funcname</code> Name of the function to call</li> <li><code>Args... args</code> vector of args to pass to the function</li> </ul> <p>Note</p> <p>This is a squirrel API wrapper added by northstar. It's not available for plugins and is supposed to abstract squirrel calls.</p> <p>SQRESULT _call(HSquirrelVM* sqvm, const SQInteger args)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger args</code> number of arguments to call this function with</li> </ul> <p><code>_call</code> adds one to the <code>args</code> count for <code>this</code>.</p> <p>Note</p> <p>This is a squirrel API wrapper added by northstar. It's not available for plugins and is supposed to abstract squirrel calls.</p> <pre><code>    SQObject functionobj {};\n    SQRESULT result = g_pSquirrel&lt;context&gt;-&gt;sq_getfunction(sqvm, \"PluginCallbackTest\", &amp;functionobj, 0); // Get a global squirrel function called \"PluginCallbackTest\"\n\n    if (result == SQRESULT_ERROR)\n    {\n        spdlog::error(\"Unable to find function. Is it global?\");\n        return SQRESULT_ERROR;\n    }\n\n    g_pSquirrel&lt;context&gt;-&gt;pushobject(sqvm, &amp;functionobj);\n    g_pSquirrel&lt;context&gt;-&gt;pushroottable(sqvm);\n    g_pSquirrel&lt;context&gt;-&gt;pushstring(sqvm, \"param\");\n    return g_pSquirrel&lt;context&gt;-&gt;_call(sqvm, 1); // PluginCallbackTest(\"param\")\n</code></pre> <p>SQRESULT __sq_call(HSquirrelVM* sqvm, SQInteger iArgs, SQBool bShouldReturn, SQBool bThrowError)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQInteger iArgs</code> number of parameters of the function</li> <li><code>SQBool bShouldReturn</code> if true the function will push the return value to the stack</li> <li><code>SQBool bThrowError</code> if true, if a runtime error occurs during the execution of the call, the vm will invoke the error handler</li> </ul> <p>calls a closure or a native closure. The function pops all the parameters and leave the closure in the stack; if retval is true the return value of the closure is pushed. If the execution of the function is suspended through sq_suspendvm(), the closure and the arguments will not be automatically popped from the stack.</p> <p>When using to create an instance, push a dummy parameter to be filled with the newly-created instance for the constructor's <code>this</code> parameter.</p>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#errors","title":"Errors","text":"<p>SQRESULT raiseerror(HSquirrelVM* sqvm, const SQChar* error)</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> <li><code>SQChar* error</code> string thrown</li> <li>Returns <code>SQRESULT_ERROR</code></li> </ul> <p>Throws an error with <code>error</code> being the thrown object.</p> <pre><code>    ADD_SQFUNC(\"void\", CPlugThrowTest, \"\", \"\", ScriptContext::UI)\n    {\n        return g_pSquirrel&lt;context&gt;-&gt;raiseerror(sqvm, \"test error\");\n    }\n\n    /* sq:\n    try {\n        CPlugThrowTest()\n    } catch(e) {\n        print(e) // \"test error\"\n    }\n    */\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/stack/","title":"Stack","text":"<p>Squirrel exchanges values with the virtual machine through a stack. This mechanism has been inherited from the language Lua. For instance to call a Squirrel function from native code it is necessary to push the function and the arguments in the stack and then invoke the function; also when Squirrel calls a native function the parameters will be in the stack as well.</p>"},{"location":"Modding/squirrel/cpp_api/stack/#stack-indexes","title":"Stack Indexes","text":"<p>Many API functions can arbitrarily refer to any element in the stack through an index. The stack indexes follow these conventions:</p> <ul> <li>1 is the stack base</li> <li>Negative indexes are considered an offset from top of the stack. For instance -1 is always the last item pushed to the stack</li> <li>0 is an invalid index</li> </ul> <p>See this example stack for reference:</p> Stack Positive index Negative index p4 4 -1 p3 3 -2 p2 2 -3 p1 1 -4"},{"location":"Modding/squirrel/cpp_api/stack/#stack-manipulation","title":"Stack manipulation","text":"<p>The Squirrel API offers several functions to push and retrieve data from the Stack.</p> <p>__int64 removeFromStack(HSquirrelVM* sqvm)</p> <p>Note</p> <p>This function (`server.dll+0x7000```) is not available in the launcher or plugins at the moment.</p> <p>You can open a PR if you need it now.</p> <ul> <li><code>HSquirrelVM* sqvm</code> the target vm</li> </ul> <p>pops the top item of the stack.</p>"},{"location":"Modding/squirrel/statements/","title":"Statements","text":"<p>Unlike vanilla programs, only a limited set of statements are allowed in the file scope.</p> <p>All logic needs to be written in function bodies.</p>"},{"location":"Modding/squirrel/statements/controlflow/","title":"Control Flow","text":"<p>Squirrel supports most basic control flow statements.</p>"},{"location":"Modding/squirrel/statements/controlflow/#if","title":"If","text":"<p><code>if</code> statements check if a condition evaluates to <code>true</code>.</p> <pre><code>   if ( expression )\n    body\n</code></pre> <p><code>null</code>, <code>0</code> and <code>0.0</code> evaluate to <code>false</code>.</p>"},{"location":"Modding/squirrel/types/","title":"Typing","text":"<p>At it's core, squirrel is a dynamically typed language with static typing mostly being a compile time feature.</p> <p>The language distinguishes between primitive types and complex types. Some features of the language can only be used for either type.</p>"},{"location":"Modding/squirrel/types/arrays/","title":"Arrays","text":"<p>Unlike the data types previously covered, arrays can hold multiple values.</p> <p>Their size is dynamic and you can add and remove elements at will.</p> <p>The type keyword is <code>array</code>.</p> <p>By default, uninitialized arrays are empty.</p> <p>Arrays are always zero indexed with <code>[ &lt;expression&gt; ]</code>. The indexes are always numbers. If you index an array with a key that does not exist, an error will get thrown.</p>"},{"location":"Modding/squirrel/types/arrays/#literals","title":"Literals","text":"<p>Array literals are a comma or newline seperated sequence of expressions delimited by an opening bracket <code>[</code> and a corresponding closing bracket <code>]</code>.</p> <pre><code>  array a = [ 1, 2, 3 ]\n  array b = [\n    1\n    2\n    3\n  ]\n</code></pre>"},{"location":"Modding/squirrel/types/arrays/#primitive-arrays","title":"Primitive Arrays","text":"<p>Primitive arrays are arrays that can hold any value. Their content is therefore untyped.</p> <pre><code>  array a\n  a.append( 1 ) // add a number\n  a.append( \"str\" ) // add a string\n  a.append( [] ) // add an empty array\n\n  // because the content type of the array is not defined, all content will be var\n  var n = a[0]\n  var str = a[1]\n  var arr = a[2]\n</code></pre>"},{"location":"Modding/squirrel/types/arrays/#complex-arrays","title":"Complex Arrays","text":"<p>Complex Arrays are arrays that can only hold values that have a specific type.</p> <p>The content type needs to be specified within <code>&lt;</code> and <code>&gt;</code> brackets.</p> <p>There is no way to define a complex array that holds multiple different types.</p> <pre><code>   array&lt;int&gt; a\n   a.append( 1 )\n   a.append( 0x2 )\n   a.append( \"3\" ) // this will throw a compile error because the array can only contain integers\n</code></pre>"},{"location":"Modding/squirrel/types/arrays/#static-arrays","title":"Static Arrays","text":"<p>Static arrays are a different kind of complex type. Like complex arrays they can only hold values of one specific type. However unlike complex arrays static arrays have a set length that cannot be changed.</p> <p>The typing for static arrays is <code>type[size]</code>, where <code>type</code> is the content type of the array and <code>size</code> is an integer literal of the total size of the array.</p> <p>Uninitialized static arrays have their size by default and all content values are the default values of their content type.</p> <p>You can index and change content values like with regular arrays.</p> <p>When initializing a static array you can omit all values after your initial values with <code>...</code>. All following values will get default initialized with the content's default.</p> <pre><code>   float[3] v1\n   float[8] v2 = [ 1.0, 2.0, ... ]\n   v2[2] = 3.0\n\n   print( v1[0] ) // notice how no value needs to be pushed into the vector\n   print( v2[7] ) // will print 0.0 because it has been default initialized\n</code></pre>"},{"location":"Modding/squirrel/types/arrays/#compatability","title":"Compatability","text":"<p>It is not possible to cast or convert an array between their different forms. For example you can't assign an <code>array&lt;string&gt;</code> variable to a different variable that has the type <code>array</code> or the other way around.</p> <p>Instead you need to create an entirely new array with the target type or add all contents manually.</p> <pre><code>  array&lt;string&gt; orig = [ \"a\", \"b\", \"c\" ]\n  array target\n\n  target.clear() // clear all contents from the target array\n  foreach( v in orig ) // iterate over the original array and add all contents to the target array\n    target.append( v )\n</code></pre> <p>Furthermore it's important to understand that <code>array</code> and <code>array&lt;var&gt;</code> behave the same but are not identical.</p>"},{"location":"Modding/squirrel/types/booleans/","title":"Booleans","text":"<p>Booleans are a primitive type that can be either <code>true</code> or <code>false</code></p> <p>The type name and keyword for Booleans is <code>bool</code>. Booleans default initialize as <code>false</code>.</p> <pre><code>   bool b = false\n   b = true\n</code></pre>"},{"location":"Modding/squirrel/types/entities/","title":"Entities","text":"<p>Entities are a primitive type that can refer to any in-game object.</p> <p>The type keyword is <code>entity</code>.</p> <p>Entities are always class instances of classes that are defined by native code. The classes differ between the CLIENT or UI, and SERVER vm.</p> <p>You can not specify which entity class a variable is supposed to hold so you need to be careful you know what entity is expected where.</p> <p>If you need to check the class of an entity at runtime you can do so with the <code>instanceof</code> operator.</p> <pre><code>   bool function IsCPlayer( entity e )\n   {\n    return e instanceof CPlayer\n   }\n</code></pre> <p>Entities are <code>null</code> initialized and there are no literals for entities.</p> <pre><code>   entity e\n   Assert( e == null )\n</code></pre>"},{"location":"Modding/squirrel/types/floats/","title":"Floats","text":"<p>Floats are 32 bit floating point numbers that can be any decimal number.</p> <p>An unitilized float will have the default value <code>0.0</code>.</p> <p>The type keyword for floats is <code>float</code>.</p>"},{"location":"Modding/squirrel/types/floats/#literals","title":"Literals","text":"<p>Float literals need to contain a <code>.</code> to distinguish them from integer literals.</p> <p>They may omit the decimal before the period, however after the period a value is required.</p> <pre><code>  float a = 1.1\n  float b = 0.0\n  float c = .0 // 0.0\n  float d = 0. // INVALID, this will throw a compile error because the value after the period is missing.\n</code></pre>"},{"location":"Modding/squirrel/types/functionrefs/","title":"Functionrefs","text":"<p>Function references are a complex type that can reference any function or closure.</p> <p>The type keyword is <code>functionref</code> and needs to include any parameter types and optionally return types.</p> <pre><code>   void function CallDelayed( void functionref() fn )\n   {\n    wait 1\n    fn()\n   }\n</code></pre> <p>You can call functionrefs like a regular function. The return type of a functionref will default to <code>var</code> if omitted. Omitting the return type is only possible in <code>untyped</code> files.</p> <p>Parameter names are optional in functionrefs. Otherwise the parameter syntax is like in regular functions.</p> <pre><code>   void function Example( int n, ... ) {}\n\n   void functionref( int, ... ) fn = Example\n</code></pre>"},{"location":"Modding/squirrel/types/integers/","title":"Integers","text":"<p>Integers in Squirrel are 32 bit signed integers and can be any whole number (in the 32 bit confines).</p> <p>An Integer is a primitive type with a default value of <code>0</code>.</p> <p>The type keyword for Integers is <code>int</code>.</p>"},{"location":"Modding/squirrel/types/integers/#literals","title":"Literals","text":"<p>Integers can be represented with multiple different literals.</p> <ul> <li> <p>Decimal</p> <p>Regular decimal letters will always be an integer decimal literal. <pre><code>int n = 123\n</code></pre></p> </li> <li> <p>Hexadecimal</p> <p>If any number is prefixed with <code>0x</code>, it is a hexadecimal literal.</p> <pre><code>int n = 0x0012 // 18\n</code></pre> </li> <li> <p>Octal</p> <p>Numbers starting with a <code>0</code> are octal literals.</p> <pre><code>int n = 075 // 61\n</code></pre> </li> <li> <p>Chars</p> <p>A single letter or escaped sequence are character literals. Their value is the ASCII value of the letter.</p> <pre><code>int a = 'a' // 97\nint newline = '\\n' // 10\n</code></pre> </li> </ul>"},{"location":"Modding/squirrel/types/ornull/","title":"ornull","text":"<p><code>ornull</code> is a type suffix that flags the variable to be able to contain <code>null</code>. This is required for nesting structs inside themselves to ensure they are fixed size.</p> <p><code>ornull</code> makes any type complex and stops you from using any inbuilt functions or passing it to a function that does not expect that exact <code>ornull</code> type.</p> <p>To use the value of an <code>ornull</code> variable you need to ensure that it is not <code>null</code> and then cast to the correct type.</p> <pre><code>   int ornull n = null\n   n = 1\n\n   if( n != null )\n   {\n    expect int( n ) // n is now in this scope an int\n    n += 2\n   }\n\n   print( n ) // 3\n</code></pre> <p>Being required to cast the value of <code>ornull</code> variables makes it impossible to use it with types that cannot be casted like complex arrays. You can still make complex ornull variables, just be aware that the content type can never be recasted.</p> <p>You can use <code>ornull</code> types in complex type as well, for example in complex arrays.</p> <pre><code>   array&lt;int ornull&gt; a = [ 1, null ]\n   a.append( 2 )\n   a.append( null )\n</code></pre> <p>Additionally, <code>ornull</code> is useful for adding optional parameters to functions that need to preserve backwards compatability.</p> <pre><code>   SomeAPIFunction( int ornull n = null ) {}\n\n   // both are valid\n   SomeAPIFunction()\n   SomeAPIFunction( 1 )\n</code></pre>"},{"location":"Modding/squirrel/types/ornull/#default-values","title":"Default Values","text":"<p><code>ornull</code>-ing a type will make a variable always default initia will make a variable always default initialize with <code>null</code> instead of the types respective default value.lize with <code>null</code> instead of the types respective default value.</p>"},{"location":"Modding/squirrel/types/strings/","title":"Strings","text":"<p>Unlike in other languages, strings in squirrel are primitive types and immutable. That means you can't change the value of a string but will need to copy and change it in another variable.</p> <p>The default value of strings is an empty string with a length of 0.</p> <p>The type keyword for strings is <code>string</code>.</p> <p>To create strings, simply write the text of the literals in <code>\"</code> quotes.</p> <pre><code>  string s = \"this is an example string literal\"\n</code></pre>"},{"location":"Modding/squirrel/types/strings/#verbatim-strings","title":"Verbatim Strings","text":"<p>Verbatim strings do not escape sequences. They begin with a <code>@</code> token before a regular string literal. Verbatim strings can also extend over multiple lines. If they do they include any white space between the matching string quotes.</p> <pre><code>  string a = \"simple string\\nover two lines\"\n  string b = @\"simple string\n  over two lines\"\n\n  Assert( a == b )\n</code></pre> <p>However, a doubled quotation mark within a verbatim string is replaced by a single quotation mark.</p> <pre><code>  string a = \"extra quotation mark\\\"\"\n  string b = @\"extra quotation mark \"\"\"\n\n  Assert( a == b )\n</code></pre>"},{"location":"Modding/squirrel/types/strings/#assets","title":"Assets","text":"<p>Assets and strings are internally the same but at compile time they are different types.</p> <p>Assets are used to reference a specific resource (often in rpak files).</p> <p>The type keyword for assets is <code>asset</code>.</p> <p>Asset literals are regular string literals prefixed with the <code>$</code> token. Verbatim strings can't be an asset.</p> <pre><code>  asset a = $\"my/resource\"\n</code></pre> <p>Northstar added the <code>StringToAsset</code> function that allows converting any string into an asset.</p>"},{"location":"Modding/squirrel/types/structs/","title":"Structs","text":"<p>Structs are statically typed, fixed size structures that contain other values. Similar to tables they are used to store mutliple values, however structs allow for each value to have a seperate type.</p>"},{"location":"Modding/squirrel/types/structs/#declaration","title":"Declaration","text":"<p>Before using a struct you need to define it and all contents.</p> <p>The fields are typed like any regular variable.</p> <pre><code>   struct MyStruct\n   {\n    int field1\n    string field2\n    array&lt;float&gt; field3\n   }\n</code></pre> <p>You can then use <code>MyStruct</code> as a type anywhere in the file. Structs are default initialized by assigning each field it's appropriate default value. Struct fields can be indexed by writing <code>instance.field</code>, just like with tables.</p> <pre><code>  MyStruct myStructInstance\n  printt( myStructInstance.field1 ) // 0\n</code></pre> <p>Structs are passed by reference so if a function changes a field that field is changed for everything that uses the struct instance.</p> <p>Struct instances can also get initiaized with different default values if required.</p> <p>Similar like in static arrays, you can omit any fields that should have their type's default value with <code>...</code>.</p> <pre><code>   MyStruct ins = { field3 = [], field1 = 1, ... }\n   printt( ins.field1, ins.field2 ) // 1, \"\"\n</code></pre>"},{"location":"Modding/squirrel/types/structs/#nesting-structs","title":"Nesting Structs","text":"<p>Struct fields can be any type, this includes previously declared structs as well.</p> <pre><code>   struct Engine\n   {\n    string manufacturer\n   }\n\n   struct Tire\n   {\n    string material\n   }\n\n   struct Car\n   {\n    Engine engine,\n    Tire[4] tires\n   }\n</code></pre>"},{"location":"Modding/squirrel/types/structs/#self-nesting-structs","title":"Self Nesting Structs","text":"<p>Structs can contain fields of their own type, however they need to be null initialized. You can achieve this by specifying their type as <code>ornull</code>.</p> <pre><code>   struct LinkedList\n   {\n    var content\n    LinkedList ornull nextNode\n   }\n</code></pre>"},{"location":"Modding/squirrel/types/structs/#field-default-values","title":"Field Default Values","text":"<p>Any struct field can have an optional default value. If omitted, the type's default value is used instead.</p> <p>Default values need to be a constant expression that can be evaluated at compile time.</p> <pre><code>   struct Dice\n   {\n    int[6] sides = [ 1, 2, 3, 4, 5, 6 ]\n   }\n</code></pre>"},{"location":"Modding/squirrel/types/structs/#singleton-instances","title":"Singleton Instances","text":"<p>You can define a struct and initialize a local variable of that struct instantly with singletons. These are often used to have global variables that are only used in a single script file.</p> <pre><code>   struct {\n    var menu\n   } file\n\n   void function InitMyMenu()\n   {\n    file.menu = GetMenu( \"SomeMenu\" )\n   }\n</code></pre> <p>Singletons can also be used for struct fields.</p> <pre><code>   struct Car\n   {\n    struct {\n      string manufacturer\n      } engine\n   }\n\n   // ...\n   Car car\n   car.engine.manufacturer = \"Vinson Dynamics\"\n</code></pre>"},{"location":"Modding/squirrel/types/tables/","title":"Tables","text":"<p>Like arrays, tables are dynamically sized data structures that can have entries added or removed at runtime.</p> <p>In other languages tables might be called Hashmaps, Maps or Objects.</p> <p>Entries are added with a key that can subsequently be used to read that object from the table back.</p> <p>The type keyword is <code>table</code>.</p> <p>To index an array with a string you can write <code>t.index</code>, or with an expression just like in arrays with <code>t.[\"index\"]</code>.</p> <pre><code>   table t = { val = \"value\" }\n   string v = t.val\n   string v2 = t[\"val\"]\n</code></pre>"},{"location":"Modding/squirrel/types/tables/#literals","title":"Literals","text":"<p>Table literals are comma or newline seperated expressions that are delimited by <code>{</code> and <code>}</code>.</p> <p>Each entry needs to have a key, seperated from the initial value with a <code>=</code>.</p> <p>Table keys will be by default strings if you just write their identifier in the literal. However they can also be any expression if wrapped with <code>[</code> and <code>]</code>.</p> <pre><code>   table t = { key1 = 1, key2 = \"2\" }\n   table t2 = {\n    randomValue = getSomethingRandom()\n    [1] = 0x1\n   }\n\n   printt( t[\"key1\"], t2[1] ) // 1 1\n</code></pre>"},{"location":"Modding/squirrel/types/tables/#primitive-tables","title":"Primitive Tables","text":"<p>Like arrays primitive tables can hold any type, both as values and keys.</p> <p>Any value of key of the table will therefore be <code>var</code> if retrieved.</p>"},{"location":"Modding/squirrel/types/tables/#complex-tables","title":"Complex Tables","text":"<p>Complex tables are tables that have their content types defined. It is necessary to both define the key and value types.</p> <pre><code>   table&lt;string, int&gt; numbers = {\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n   }\n</code></pre>"},{"location":"Modding/squirrel/types/typedefs/","title":"Typedefs","text":"<p>With typedefs you can create type aliases for types. Typedefs can be global as well.</p> <pre><code>  typedef alias var\n  global typedef SomeCallback void functionref(int)\n</code></pre>"},{"location":"Modding/squirrel/types/var/","title":"Var","text":"<p><code>var</code> stands for a variable of any type. Any primitive can be <code>var</code>, however complex types can never be <code>var</code>.</p> <pre><code>  // var can be just about anything. \n  var v = 1\n  v = \"string\"\n  v = []\n  v = {}\n</code></pre> <p>in <code>untyped</code> files you can also use the <code>local</code> keyword instead of <code>var</code>. However the keyword is deprecated and should not be used.</p> <p>If possible, usage of <code>var</code> should be avoided and other static types should be used instead to benefit from the type checking of squirrel.</p>"},{"location":"Modding/squirrel/types/vectors/","title":"Vectors","text":"<p>Vectors are a primitive data type to describe velocities or positions of objects in the game.</p> <p>Usually the positions are absolute in the game world, but that may depend on the function.</p> <p>Vectors store 3 float values that can be accessed with the <code>x</code>, <code>y</code> and <code>z</code> keys.</p>"},{"location":"Modding/squirrel/types/vectors/#literals","title":"Literals","text":"<p>A vector literal is a comma seperated list of expressions that evaluate to either a float or integer delimited by <code>&lt;</code> and <code>&gt;</code> brackets.</p> <pre><code>   vector v = &lt; 1, 2.5, 3 &gt;\n   v.y = 2\n   printt( v.x, v.y, v.z ) // 1 2 3\n</code></pre>"}]}